{"version":3,"file":"js/733.bundle.min.js","mappings":"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","sources":["webpack://client/./src/components/common/SBFormatBtn.tsx","webpack://client/./src/components/common/SchemaLoader.tsx","webpack://client/./src/components/create/message/lib/utils.ts","webpack://client/./src/components/create/message/lib/field/types/basicField.tsx","webpack://client/./src/components/create/message/lib/field/types/enumerated.tsx","webpack://client/./src/components/create/message/lib/field/types/choice.tsx","webpack://client/./src/components/common/SBToggleBtn.tsx","webpack://client/./src/components/create/message/lib/field/types/record.tsx","webpack://client/./src/components/create/message/lib/field/types/map.tsx","webpack://client/./src/components/create/message/lib/field/types/arrayOf.tsx","webpack://client/./src/components/common/SBUUID4Btn.tsx","webpack://client/./src/components/create/message/lib/field/types/formattedField.tsx","webpack://client/./src/components/create/message/lib/field/types/array.tsx","webpack://client/./src/components/create/message/lib/field/types/mapOf.tsx","webpack://client/./src/components/create/message/lib/field/types/linkField.tsx","webpack://client/./src/components/create/message/lib/field/types/derivedEnum.tsx","webpack://client/./src/components/create/message/lib/field/Field.tsx","webpack://client/./src/components/create/message/MessageCreator.tsx","webpack://client/./src/components/create/message/MessageGenerator.tsx"],"sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faIndent } from \"@fortawesome/free-solid-svg-icons\";\nimport { LANG_JADN } from \"components/utils/constants\";\nimport { FormatJADN } from \"components/utils\";\nimport { sbToastError } from \"./SBToast\";\n\nconst SBFormatBtn = (props: any) => {\n\n    const { ext, data, customClass, handleFormatClick } = props;\n\n    const onFormatClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        if (!data) {\n            sbToastError('Format Error: No Schema to format');\n            return;\n        }\n\n        try {\n            let dataObj = data;\n            if (typeof data == 'string') {\n                dataObj = JSON.parse(dataObj);\n            }\n\n            if (ext == LANG_JADN) {\n                dataObj = FormatJADN(dataObj);\n            }\n\n            handleFormatClick(dataObj);\n\n        } catch {\n            sbToastError('Failed to format: Invalid JSON')\n            return;\n        }\n    }\n\n    return (\n        <>\n            <button\n                id='formatButton'\n                type='button'\n                className={'btn btn-sm btn-primary ' + customClass}\n                onClick={onFormatClick}\n                title='Format'>\n                <FontAwesomeIcon icon={faIndent} />\n            </button>\n        </>\n    );\n}\n\nexport default SBFormatBtn;","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllSchemas } from \"../../reducers/util\";\nimport { info, setSchema } from \"../../actions/util\";\nimport { getSchemaConversions } from \"reducers/convert\";\nimport { validateSchema } from \"actions/validate\";\nimport { LANG_JADN } from \"components/utils/constants\";\nimport { getFilenameExt, getFilenameOnly } from \"components/utils/general\";\nimport { dismissAllToast, sbToastError, sbToastSuccess } from \"./SBToast\";\nimport SBCopyToClipboard from \"./SBCopyToClipboard\";\nimport SBSelect, { Option } from \"./SBSelect\";\nimport SBSpinner from \"./SBSpinner\";\nimport SBFormatBtn from \"./SBFormatBtn\";\nimport SBEditor from \"./SBEditor\";\nimport SBValidateSchemaBtn from \"./SBValidateSchemaBtn\";\nimport SBFileLoader from \"./SBFileLoader\";\n\n//File Loader Note: User should be able to upload any JSON/JADN schema; \n//It does not need to be syntactically correct since the user can edit the schema in the code editor.\n\ninterface SchemaLoaderProps {\n    selectedFile: Option | null;\n    setSelectedFile: (selectedOpt: Option | null) => void;\n    loadedSchema: object | null;\n    setLoadedSchema: (schema: object | null) => void;\n    decodeMsg?: Option | null;\n    setDecodeMsg?: (msgType: Option | null) => void;\n    setDecodeSchemaTypes?: (obj: {\n        all: string[] | [],\n        exports: string[] | []\n    }) => void;\n    acceptFormat?: string[];\n    schemaFormat: Option | null;\n    setSchemaFormat: (fmtOpt: Option | null) => void;\n}\n\nconst SchemaLoader = (props: SchemaLoaderProps) => {\n    const dispatch = useDispatch();\n\n    const { selectedFile, setSelectedFile, loadedSchema, setLoadedSchema, decodeMsg, setDecodeMsg, setDecodeSchemaTypes, acceptFormat, schemaFormat, setSchemaFormat } = props;\n    const [isValid, setIsValid] = useState(false);\n    const [isValidating, setIsValidating] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [fileName, setFileName] = useState({\n        name: '',\n        ext: LANG_JADN\n    });\n    const schemaOpts = useSelector(getAllSchemas);\n    const validSchemaFormatOpt = useSelector(getSchemaConversions);\n    const ref = useRef<HTMLInputElement | null>(null);\n\n    useEffect(() => {\n        if (fileName.ext) {\n            setSchemaFormat({ value: fileName.ext, label: fileName.ext })\n        }\n    }, [fileName])\n\n    useEffect(() => {\n        if (!loadedSchema) {\n            setIsValid(false);\n            setSelectedFile(null);\n            setSchemaFormat(null);\n        }\n    }, [loadedSchema])\n\n    useEffect(() => {\n        dispatch(info());\n    }, [dispatch])\n\n    const loadDecodeTypes = (schemaObj: any) => {\n        let decodeTypes: { all: any[], exports: any[] } = {\n            all: [],\n            exports: []\n        };\n        let msgDecode = '';\n\n        if (typeof schemaObj == \"string\") {\n            try {\n                schemaObj = JSON.parse(schemaObj);\n            } catch {\n                schemaObj = schemaObj\n            }\n        }\n\n        if (schemaObj.info !== undefined) {\n            if (schemaObj.info.exports !== undefined) {\n                decodeTypes.exports = schemaObj.info.exports;\n            }\n        }\n        if (schemaObj.types !== undefined) {\n            decodeTypes.all = schemaObj.types.map((def: any[]) => def[0]);\n            decodeTypes.all = decodeTypes.all.filter(dt => !decodeTypes.exports.includes(dt));\n            decodeTypes.all.sort();\n        }\n        if (decodeMsg === null || !decodeTypes.all.includes(decodeMsg)) {\n            if (decodeTypes.exports.length >= 1) {\n                msgDecode = decodeTypes.exports[0];\n            } else if (decodeTypes.all.length >= 1) {\n                msgDecode = decodeTypes.all[0];\n            }\n        }\n        setDecodeSchemaTypes(decodeTypes);\n        setDecodeMsg({ value: msgDecode, label: msgDecode });\n    }\n\n    const onFormatClick = (formattedSchema: object) => {\n        if (formattedSchema) {\n            setLoadedSchema(formattedSchema);\n        }\n    }\n\n    const sbEditorOnChange = (data: string) => {\n        dismissAllToast();\n        setIsValid(false);\n        setLoadedSchema(data);\n        dispatch(setSchema(null));\n        try {\n            if (setDecodeSchemaTypes && setDecodeMsg) {\n                loadDecodeTypes(JSON.parse(data));\n            }\n        } catch {\n            return;\n        }\n    }\n\n    const onFileLoad = async (schemaObj?: any, fileStr?: Option) => {\n        setIsValid(false);\n        setIsLoading(true);\n        if (schemaObj && fileStr) {\n            setSelectedFile(fileStr);\n            const fileName = {\n                name: getFilenameOnly(fileStr.label),\n                ext: getFilenameExt(fileStr.label)\n            }\n            setFileName(fileName);\n            setLoadedSchema(schemaObj);\n            try {\n                dispatch(validateSchema(schemaObj, fileName.ext))\n                    .then((validateSchemaVal: any) => {\n                        if (validateSchemaVal.payload.valid_bool == true) {\n                            setIsValid(true);\n                            if (typeof schemaObj == \"string\") {\n                                schemaObj = JSON.parse(schemaObj);\n                            }\n                            dispatch(setSchema(schemaObj));\n                            sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                        } else {\n                            sbToastError(validateSchemaVal.payload.valid_msg);\n                            dispatch(setSchema(null));\n                        }\n                    })\n                    .catch((validateSchemaErr) => {\n                        sbToastError(validateSchemaErr.payload.valid_msg)\n                        dispatch(setSchema(null));\n                    }).finally(() => {\n                        setIsValidating(false);\n                    })\n            } catch (err) {\n                if (err instanceof Error) {\n                    setIsValidating(false);\n                    sbToastError(err.message)\n                }\n            }\n\n            if (setDecodeSchemaTypes && setDecodeMsg) {\n                loadDecodeTypes(schemaObj);\n            }\n        }\n        setIsLoading(false);\n    }\n\n    const onCancelFileUpload = (e: React.MouseEvent<HTMLButtonElement> | React.ChangeEvent<HTMLInputElement> | null) => {\n        if (e) {\n            e.preventDefault();\n        }\n        dismissAllToast();\n        setIsLoading(false);\n        setIsValidating(false);\n        setIsValid(false);\n        setLoadedSchema(null);\n        dispatch(setSchema(null));\n        setSelectedFile(null);\n        setFileName({\n            name: '',\n            ext: LANG_JADN\n        });\n        if (ref.current) {\n            ref.current.value = '';\n        }\n        if (setDecodeSchemaTypes && setDecodeMsg) {\n            setDecodeMsg(null);\n            setDecodeSchemaTypes([]);\n        }\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <div className=\"row no-gutters\">\n                    <div className=\"col-lg-6 align-self-center\">\n                        <SBFileLoader\n                            opts={schemaOpts}\n                            selectedOpt={selectedFile}\n                            loadedFileData={loadedSchema}\n                            fileName={fileName}\n                            fileExt={schemaFormat?.value}\n                            setSelectedFile={setSelectedFile}\n                            onCancelFileUpload={onCancelFileUpload}\n                            onFileChange={onFileLoad}\n                            acceptableExt={acceptFormat}\n                            ref={ref}\n                            placeholder={'Select a schema...'}\n                            loc={'schemas'}\n                            isSaveable\n                        />\n                    </div>\n                    {acceptFormat && <div className=\"col-lg-3 align-self-center\">\n                        <SBSelect id={\"schema-format-list\"}\n                            data={validSchemaFormatOpt}\n                            onChange={(e: Option) => setSchemaFormat(e)}\n                            value={schemaFormat}\n                            placeholder={'Schema format...'}\n                            isSmStyle\n                            isClearable />\n                    </div>}\n                    <div className=\"col text-end align-self-center nowrap\">\n                        {isValidating ? <SBSpinner action={\"Validating\"} color={\"primary\"} /> :\n                            <SBValidateSchemaBtn\n                                isValid={isValid}\n                                setIsValid={setIsValid}\n                                setIsValidating={setIsValidating}\n                                schemaData={loadedSchema}\n                                schemaFormat={schemaFormat?.value}\n                            />\n                        }\n                        <SBCopyToClipboard buttonId='copySchema' data={loadedSchema} customClass='me-1' />\n                        <SBFormatBtn customClass=\"me-1\" handleFormatClick={onFormatClick} ext={schemaFormat?.value} data={loadedSchema} />\n\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-body-page\">\n                {isLoading ? <SBSpinner action={'Loading'} isDiv /> :\n                    <SBEditor data={loadedSchema || \"\"} onChange={sbEditorOnChange}></SBEditor>}\n            </div>\n        </div>\n    )\n}\nexport default SchemaLoader;\n","/* eslint-disable import/prefer-default-export */\n// Field Utils\nimport { $MINV } from 'components/create/consts';\nimport { hasProperty } from 'components/utils';\nimport { FieldArray, InfoConfig, TypeArray } from '../../schema/interface';\nimport { Buffer } from 'buffer';\n\nexport const isOptional = (def: TypeArray | FieldArray) => {\n\tswitch (def.length) {\n\t\tcase 5:\n\t\t\treturn def[3].includes('[0');\n\t\tcase 4:\n\t\t\treturn def[2].includes('[0');\n\t\tdefault:\n\t\t\tconsole.log(`default optional - ${def[0]} - ${def[1]}`);\n\t\t\treturn false;\n\t}\n};\n\n// TYPE OPTION VALIDATION\n// optData validation for Array, ArrayOf, Map, MapOf, or Record\nexport const validateOptDataElem = (config: InfoConfig, optData: any, data: any[], formatCheck: boolean = false) => {\n\tlet isFormatted: boolean = false;\n\tlet m: string[] = [];\n\tif (!data || data.length == 0) {\n\t\treturn m;\n\t}\n\t//ARRAY\n\tif (formatCheck) {\n\t\tisFormatted = validateArrayFormat(data, optData.format);\n\t\tif (!isFormatted) {\n\t\t\tm.push('Format Error: Invalid ' + optData.format + ' value');\n\t\t}\n\t}\n\n\t//ARRAYOF\n\tif (hasProperty(optData, 'unique') && optData.unique || hasProperty(optData, 'set') && optData.set) {\n\t\tif (Array.from(new Set(Object.values(data))).length != Object.values(data).length) {\n\t\t\tm.push(`${optData.unique ? `Unique` : `Set`} Error: Must not contain duplicate values`);\n\t\t}\n\t}\n\n\t//check # of elements\n\tvar minv = optData.minv || $MINV;\n\tvar maxv = optData.maxv || config.$MaxElements;\n\tif (data.length < minv) {\n\t\tm.push('Minv Error: must include at least ' + minv + ' element(s)');\n\t}\n\tif (data.length > maxv) {\n\t\tm.push('Maxv Error: must not include more than ' + maxv + ' element(s)');\n\t}\n\n\treturn m;\n}\n// optData validation for String\nexport const validateOptDataStr = (config: InfoConfig, optData: any, data: string) => {\n\tlet m: string[] = [];\n\tif (!data || data.length == 0) {\n\t\treturn m;\n\t}\n\tlet minv = optData.minv || $MINV;\n\tlet maxv = optData.maxv || config.$MaxString;\n\tif (data.length < minv) {\n\t\tm.push('Minv Error: must be greater than ' + minv + ' characters');\n\t}\n\tif (data.length > maxv) {\n\t\tm.push('Maxv Error: must be less than ' + maxv + ' characters');\n\t}\n\n\tif (hasProperty(optData, 'pattern') && typeof data == 'string') {\n\t\tconst regex = new RegExp(optData.pattern, \"g\");\n\t\tif (!regex.test(data)) {\n\t\t\tm.push('Pattern Error: must match regular expression specified by pattern: ' + optData.pattern);\n\t\t}\n\t}\n\n\tif (hasProperty(optData, 'format')) {\n\t\tconst isFormatted = validateStringFormat(data, optData.format);\n\t\tif (!isFormatted) {\n\t\t\tm.push('Format Error: Invalid ' + optData.format + ' value');\n\t\t}\n\n\t\t// Moved format.regex check up to allow detailed errors vs true/false\n\t\tif (optData.format && optData.format == 'regex') {\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(data);\n\t\t\t\tconsole.log(regex.exec(\"\"));\n\t\t\t} catch (err: any) {\n\t\t\t\tm.push(`Regex Error: Invalid Regex: ${err.message}`);\t\t\t\n\t\t\t}\n\t\t}\t\t\t\n\t}\n\n\treturn m;\n}\n// optData validation for Number, Integer\nexport const validateOptDataNum = (optData: any, data: number) => {\n\tlet m: string[] = [];\n\tif (!data) {\n\t\treturn m;\n\t}\n\n\tif (hasProperty(optData, 'format')) {\n\t\tconst isFormatted = validateNumericFormat(data, optData.format);\n\t\tif (!isFormatted) {\n\t\t\tm.push('Format Error: Invalid ' + optData.format + ' value');\n\t\t}\n\t}\n\t//INTEGER\n\tvar minv = optData.minv || $MINV;\n\tvar maxv = optData.maxv;\n\tif (minv && data < minv) {\n\t\tm.push('Minv Error: must be greater than ' + minv);\n\t}\n\tif (maxv && data > maxv) {\n\t\tm.push('Maxv Error: must be less than ' + maxv);\n\t}\n\n\t//NUMBER\n\t//TODO: check for minf/maxf defaults\n\tvar minf = optData.minf;\n\tvar maxf = optData.maxf;\n\tif (minf && data < minf) {\n\t\tm.push('Minf Error: must be greater than ' + minf);\n\t}\n\tif (maxf && data > maxf) {\n\t\tm.push('Maxf Error: must be less than ' + maxf);\n\t}\n\n\treturn m;\n}\n\n// optData validation for Binary\nexport const validateOptDataBinary = (config: InfoConfig, optData: any, data: string) => {\n\t// JADN Binary - A sequence of octets. Length is the number of octets.\n\tconst binaryType = optData.format ?? 'binary';\n\n\tlet m: string[] = [];\n\tlet length: number = 0;\n\tif (!data) {\n\t\treturn m;\n\t}\n\n\tif (optData.format) {\n\t\tconst isFormatted = validateBinaryFormat(data, binaryType);\n\t\tif (!isFormatted) {\n\t\t\tm.push('Format Error: Invalid ' + binaryType + ' value');\n\t\t\treturn m;\n\t\t}\n\t\tlength = isFormatted;\n\t} else {\n\t\tif (!data.match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)*(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)) {\n\t\t\tm.push('Invalid Binary value');\n\t\t\treturn m;\n\t\t}\n\t\t// Get length of binary value where length is sequence of octets\n\t\tconst binArr = data.split('.');\n\t\tlength = binArr.length;\n\t}\n\n\t// A Binary type, the minv and maxv type options constrain the number of octets (bytes) in the binary value.\n\tvar minv = optData.minv || $MINV;\n\tvar maxv = optData.maxv || config.$MaxBinary;\n\n\tif (length < minv) {\n\t\tm.push('Minv Error: must be greater than ' + minv + ' bytes');\n\t}\n\tif (length > maxv) {\n\t\tm.push('Maxv Error: must be less than ' + maxv + ' bytes');\n\t}\n\n\treturn m;\n}\n\n\n//FORMAT TYPE OPTION VALIDATION: given [type of value/format] and [data], validate\n//binary: eui, ipv4-addr, ipv6-addr\n//TODO : if valid, return binary length of formatted data\nexport const validateBinaryFormat = (data: string, type: string) => {\n\tif (type == 'x' && data.match(/(0x)?[0-9A-F]+/)) { //hex encoding\n\t\treturn Buffer.byteLength(data, 'hex');;\n\t}\n\tif (type == 'eui' && data.match(/[A-Fa-f\\d]{2}(?:[:-][A-Fa-f\\d]{2}){5}/)) { //MAC-addr\n\t\treturn Buffer.byteLength(data, 'hex');\n\t}\n\tif ((type == 'ipv4' || type == 'ipv4-addr') && data.match(\n\t\t/(?:(?:\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d|\\d)(?:\\/\\d{1,2})?/)) {\n\t\t// Get length of binary value where length is sequence of octets\n\t\tconst binArr = data.split('.');\n\t\treturn binArr.length;\n\t}\n\tif ((type == 'ipv6' || type == 'ipv6-addr') && data.match(\n\t\t/((?=.*::)(?!.*::.+::)(::)?([\\dA-Fa-f]{1,4}:(:|\\b)|){5}|([\\dA-Fa-f]{1,4}:){6})((([\\dA-Fa-f]{1,4}((?!\\3)::|:\\b|(?![\\dA-Fa-f])))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})/)) {\n\t\treturn Buffer.byteLength(data, 'hex');\n\t}\n\treturn false;\n}\n\n//array: ipv4-net, ipv6-net\nexport const validateArrayFormat = (data: any[], type: string) => {\n\tif (type == 'ipv4-net') {\n\t\tif (data[0].match(\n\t\t\t/(?:(?:\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d|\\d)(?:\\/\\d{1,2})?/)) {\n\t\t\tif (data.length == 1) {\n\t\t\t\treturn true;\n\t\t\t} else if (data.length == 2 && ((typeof parseInt(data[1]) == \"number\" && parseInt(data[1]) >= 0 && parseInt(data[1]) <= 128) || data[1] == '')) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\tif (type == 'ipv6-net') {\n\t\tif (data[0].match(\n\t\t\t/((?=.*::)(?!.*::.+::)(::)?([\\dA-Fa-f]{1,4}:(:|\\b)|){5}|([\\dA-Fa-f]{1,4}:){6})((([\\dA-Fa-f]{1,4}((?!\\3)::|:\\b|(?![\\dA-Fa-f])))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})/)) {\n\t\t\tif (data.length == 1) {\n\t\t\t\treturn true;\n\t\t\t} else if (data.length == 2 && ((typeof parseInt(data[1]) == \"number\" && parseInt(data[1]) >= 0 && parseInt(data[1]) <= 128) || data[1] == '')) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n//integer: i8, i16, i32, u<n>\n//number: f16, f32\nexport const validateNumericFormat = (data: any, type: string) => {\n\tif (type == 'i8') {\n\t\t//check 8 bit\n\t\tif (-128 < data && data < 127) {\n\t\t\treturn true;\n\t\t}\n\t}\n\tif (type == 'i16') {\n\t\t//check 16 bit\n\t\tif (-32768 < data && data < 32767) {\n\t\t\treturn true;\n\t\t}\n\t}\n\tif (type == 'i32') {\n\t\t//check 32 bit\n\t\tif (-2147483648 < data && data < 2147483647) {\n\t\t\treturn true;\n\t\t}\n\t}\n\tif (type == 'u<n>') { //TODO\n\t\tconst n = data.substring(1); // digit after u\n\t\t//check n bits\n\t\tif (0 < data && data < (2 ** (parseInt(n) - 1))) {\n\t\t\treturn true;\n\t\t}\n\t}\n\tif (type == 'f16') {\n\t\t//check half precision point\n\t\treturn true;\n\t}\n\tif (type == 'f32') {\n\t\t//check single precision point\n\t\treturn true;\n\t}\n\treturn false;\n}\n//string: JSON schema section 7.3\n///https://json-schema.org/draft/2020-12/json-schema-validation.html#name-resource-identifiers\nexport const validateStringFormat = (data: string, type: string) => {\n\tif (type == 'email' && data.match(/^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+\\.[a-zA-z]{2,3}$/)) {\n\t\treturn true;\n\t}\n\tif (type == 'idn-email' && data.match(/(?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9](?:[\\u00A0-\\uD7FF\\uE000-\\uFFFF-a-z0-9-]*[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9])?\\.)+[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9](?:[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9-]*[\\u00A0-\\uD7FF\\uE000-\\uFFFFa-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}\\])/)) {\n\t\treturn true;\n\t}\n\tif ((type == 'hostname' || type == 'idn-hostname') && data.match(/\\b((?=[a-z0-9-]{1,63}\\.)(xn--)?[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,255}\\b/)) {\n\t\treturn true;\n\t}\n\tif ((type == 'ipv4') && data.match(\n\t\t/(?:(?:\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d|\\d)(?:\\/\\d{1,2})?/)) {\n\t\treturn true;\n\t}\n\tif ((type == 'ipv6') && data.match(\n\t\t/((?=.*::)(?!.*::.+::)(::)?([\\dA-Fa-f]{1,4}:(:|\\b)|){5}|([\\dA-Fa-f]{1,4}:){6})((([\\dA-Fa-f]{1,4}((?!\\3)::|:\\b|(?![\\dA-Fa-f])))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})/)) {\n\t\treturn true;\n\t}\n\tif (type == 'uri-reference' || type == 'iri-reference') {\n\t\t//TODO: if data is valid uri/ref\n\t\t//then check if vald iri/ref\n\t\treturn true;\n\t}\n\tif (type == 'uri' || type == 'iri') {\n\t\tif (data.match(/\\w+:(\\/?\\/?)[^\\s]+/)) {\n\t\t\tif (type == 'iri') {\n\t\t\t\tif (data.match(/^<(.*)>$/)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (type == 'uuid' &&\n\t\tdata.match(/^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/)) {\n\t\treturn true;\n\t}\n\tif (type == 'uri-template' &&\n\t\tdata.match(/^(((ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*))?(\\/?)(\\{?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+\\~\\{\\}\\&%\\$#_]*)?(\\}?)(\\/?)$/)) {\n\t\treturn true;\n\t}\n\tif (type == 'json-pointer' || type == 'relative-json-pointer') {\n\t\t//TODO\n\t\treturn true;\n\t}\n\t// Regex has been moved up to so it can provide a detailed error response if needed.\n\tif (type == 'regex') {\n\t\treturn true;\n\t}\n\n\n\treturn false;\n}","//basic\nimport React, { useState } from 'react';\nimport Field from '../Field';\nimport { isOptional } from '../../GenMsgLib';\nimport { InfoConfig, SchemaJADN, StandardFieldArray } from '../../../../schema/interface';\nimport { opts2obj } from 'components/create/schema/structure/editors/options/consts';\nimport { useAppSelector } from 'reducers';\nimport { validateOptDataNum, validateOptDataBinary, validateOptDataStr } from '../../utils';\nimport { hasProperty } from 'components/utils';\nimport { FormattedField } from './Types';\nimport { Buffer } from 'buffer';\n// import SBECMARegexBtn from 'components/common/SBECMARegexBtn';\n\n// Interface\ninterface BasicFieldProps {\n  arr?: any;\n  def: StandardFieldArray;\n  optChange: (n: string, v: any, i?: number) => void;\n  parent?: string;\n  config: InfoConfig;\n  children?: JSX.Element;\n  value: any;\n}\n\n// Component\nconst BasicField = (props: BasicFieldProps) => {\n\n  const { arr, def, optChange, parent, config, children, value = '' } = props;\n  const [idx, name, type, opts, comment] = def;\n  const msgName = (parent ? [parent, name] : [name]).join('.');\n  const [data, setData] = useState(value);\n\n  //used for ECMAScript regex checker button\n  // const [isECMAScriptValid, setIsECMAScriptValid] = useState(false);\n  // const [isValidating, setIsValidating] = useState(false);\n  // const patternOnchg = (patternData: string) => {\n  //     setData(patternData);\n  //     optChange(name, patternData, arr);\n  // }\n\n  var optData: Record<string, any> = {};\n  const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN;\n  const typeDefs = schema.types ? schema.types.filter(t => t[0] === type) : [];\n  const typeDef = typeDefs.length === 1 ? typeDefs[0] : [];\n  if (typeDef.length != 0) {\n    optData = (opts2obj(typeDef[2]));\n  } else {\n    optData = (opts ? opts2obj(opts) : []);\n  }\n\n  if (hasProperty(optData, 'default') && value == '') {\n    setData(optData.default);\n  }\n\n  let dataType;\n  if (typeDefs.length === 1) {\n    dataType = typeDef[1].toLowerCase();\n  } else {\n    dataType = type ? type.toLowerCase() : type;\n  }\n\n  const [errMsg, setErrMsg] = useState<string[]>([]);\n\n  const err = errMsg.map((msg, index) =>\n    <div key={index}><small className='form-text' style={{ color: 'red' }}>{msg}</small></div>\n  );\n\n  if (name >= 0) { // name is type if not field    \n    return (<Field key={def[1]} def={def} parent={msgName} optChange={optChange} config={config} value={value} children={children} />);\n  }\n\n  if (hasProperty(optData, 'format')) {\n    return (<FormattedField\n      basicProps={props} optData={optData}\n      errMsg={errMsg} setErrMsg={setErrMsg} config={config} value={value} children={children}\n    />);\n  }\n\n  if (dataType) {\n    if (dataType == 'boolean') {\n      return (\n        <div className='form-group m-3'>\n          <div className='card'>\n            <div className='card-header p-4 d-flex justify-content-between'>\n              <div>\n                <label htmlFor={`checkbox-${idx}`} className=\"custom-control-label\">\n                  <input\n                    id={`checkbox-${idx}`}\n                    type='checkbox'\n                    name={name}\n                    value={data}\n                    checked={data}\n                    onChange={e => {\n                      setData(e.target.checked);\n                      optChange(name, e.target.checked, arr);\n                    }}\n                    style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                  />\n                  <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                  {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                </label>\n                {err}\n              </div>\n              {children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (dataType == 'binary') {\n      return (\n        <div className='form-group'>\n          <div className='card'>\n            <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n              <div>\n                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n              </div>\n              {children}\n            </div>\n            <div className='card-body m-0 p-0'>\n              <input\n                type='text'\n                name={name}\n                value={data}\n                onBlur={e => {\n                  //encode into base64 for valid JSON\n                  const encoded = Buffer.from(e.target.value, \"utf8\").toString('base64');\n                  const errCheck = validateOptDataBinary(config, optData, encoded);\n                  setErrMsg(errCheck);\n                  optChange(name, encoded, arr);\n                }}\n                onChange={e => {\n                  setData(e.target.value);\n                }}\n                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n              />\n            </div>\n            {err}\n          </div>\n        </div>\n      );\n    }\n\n    if (dataType == 'number') {\n      return (\n        <div className='form-group'>\n          <div className='card'>\n            <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n              <div>\n                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n              </div>\n              {children}\n            </div>\n            <div className='card-body m-0 p-0'>\n              <input\n                type='number'\n                onWheel={(e) => { e.target.blur(); }}\n                step='any'\n                name={name}\n                value={data}\n                onChange={e => {\n                  setData(e.target.value);\n                }}\n                onBlur={e => {\n                  const errCheck = validateOptDataNum(optData, parseInt(e.target.value));\n                  setErrMsg(errCheck);\n                  optChange(name, parseInt(e.target.value), arr);\n                }}\n                onKeyDown={(e) => [\"e\", \"E\", \"+\", \"-\"].includes(e.key) && e.preventDefault()}\n                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n              />\n            </div>\n            {err}\n          </div>\n        </div>\n      );\n    }\n\n    if (dataType == 'integer') {\n      return (\n        <div className='form-group'>\n          <div className='card'>\n            <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n              <div>\n                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n              </div>\n              {children}\n            </div>\n            <div className='card-body m-0 p-0'>\n              <input\n                type='number'\n                onWheel={(e) => { e.target.blur(); }}\n                name={name}\n                value={data}\n                onChange={e => {\n                  setData(e.target.value);\n                }}\n                onBlur={e => {\n                  const errCheck = validateOptDataNum(optData, parseInt(e.target.value));\n                  setErrMsg(errCheck);\n                  optChange(name, parseInt(e.target.value), arr);\n                }}\n                onKeyDown={(e) => [\"e\", \"E\", \"+\", \"-\"].includes(e.key) && e.preventDefault()}\n                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n              />\n            </div>\n            {err}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  if (optData.pattern)\n    return (\n      <div className='form-group'>\n        <div className='card'>\n          <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n            <div>\n              <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n              {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n            </div>\n            {children}\n          </div>\n          <div className='card-body m-0 p-0'>\n            <input\n              type='text'\n              className=\"form-control form-control-sm\"\n              name={name}\n              value={data}\n              placeholder={optData.pattern ? optData.pattern : ''}\n              onChange={e => {\n                setData(e.target.value);\n              }}\n              onBlur={e => {\n                const errCheck = validateOptDataStr(config, optData, e.target.value);\n                setErrMsg(errCheck);\n                optChange(name, e.target.value, arr);\n              }}\n              style={{ borderColor: errMsg.length != 0 ? 'red' : '' }} />\n          </div>\n          {err}\n        </div>\n      </div>\n    )\n\n\n  //DEFAULT: STRING \n  return (\n    <div className='form-group'>\n      <div className='card'>\n        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n          <div>\n            <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n            {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n          </div>\n          {children}\n        </div>\n        <div className='card-body m-0 p-0'>\n          <input\n            type='text'\n            name={name}\n            value={data}\n            placeholder={optData.pattern ? optData.pattern : ''}\n            onChange={e => {\n              setData(e.target.value);\n            }}\n            onBlur={e => {\n              const errCheck = validateOptDataStr(config, optData, e.target.value);\n              setErrMsg(errCheck);\n              optChange(name, e.target.value, arr);\n            }}\n            style={{ borderColor: errMsg.length != 0 ? 'red' : '' }} />            \n        </div>\n        {err}\n      </div>\n    </div>\n  );\n}\n\nexport default BasicField;","import React, { useState } from 'react';\nimport { isOptional } from '../../GenMsgLib';\nimport { SchemaJADN, StandardFieldArray } from '../../../../schema/interface';\nimport { useAppSelector } from '../../../../../../reducers';\nimport { opts2obj } from 'components/create/schema/structure/editors/options/consts';\nimport { hasProperty } from 'components/utils';\nimport SBSelect, { Option } from 'components/common/SBSelect';\n\n// Interface\ninterface EnumeratedFieldProps {\n  def: StandardFieldArray;\n  optChange: (n: string, v: any) => void;\n  parent?: string;\n  children?: JSX.Element;\n  value: any;\n}\n\n// Component\nconst EnumeratedField = (props: EnumeratedFieldProps) => {\n  const { def, optChange, parent, children, value = '' } = props;\n  const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN;\n  const [selectedValue, setSelectedValue] = useState<Option | string>(value != '' ? { 'label': value, 'value': value } : '');\n  var optData: Record<string, any> = {};\n  const [idx, name, type, opts, comment] = def;\n  const msgName = (parent ? [parent, name] : [name]).join('.');\n\n  const handleChange = (e: Option) => {\n    // if (hasProperty(optData, 'id') && optData.id) {\n    //key should already be id\n    if (e == null) {\n      setSelectedValue('');\n      optChange(name, '')\n    } else {\n      setSelectedValue(e);\n      optChange(name, e.value);\n    }\n  }\n\n  const typeDefs = schema.types.filter(t => t[0] === type);\n  const typeDef = typeDefs.length === 1 ? typeDefs[0] : def;\n  if (typeDefs.length === 1) {\n    optData = (opts2obj(typeDef[2]));\n  } else {\n    optData = (opts2obj(opts));\n  }\n\n  var defOpts: any[] = [];\n  if (hasProperty(optData, 'enum')) {\n    const typeDefs = schema.types.filter(t => t[0] === optData.enum);\n    const typeDef = typeDefs.length === 1 ? typeDefs[0] : [];\n    defOpts = typeDef[typeDef.length - 1]?.map((opt: any) => ({ value: `${hasProperty(optData, 'id') && optData.id ? opt[0] : opt[1]}`, label: opt[1] }));\n\n  } else if (hasProperty(optData, 'pointer')) {\n    const typeDefs = schema.types.filter(t => t[0] === optData.pointer);\n    const typeDef = typeDefs.length === 1 ? typeDefs[0] : [];\n    let optCount = 1;\n    typeDef[typeDef.length - 1]?.map((opt: any) => {\n      // check for field opt for dir, replace Pointer extension with an Enumerated type containing a JSON Pointer pathname \n      const fieldOptData = (opts2obj(opt[3]));\n      if (hasProperty(fieldOptData, 'dir') && fieldOptData.dir) {\n        const pointerDefs = schema.types.filter(t => t[0] === opt[2]);\n        const pointerDef = pointerDefs.length === 1 ? pointerDefs[0] : [];\n        pointerDef[pointerDef.length - 1]?.map((fieldOpt: any) => {\n          defOpts.push({ value: `${hasProperty(optData, 'id') && optData.id ? optCount : fieldOpt[1]}`, label: opt[2] + '/' + fieldOpt[1] });\n          optCount += 1;\n        });\n\n      } else {\n        defOpts.push({ value: `${hasProperty(optData, 'id') && optData.id ? optCount : opt[1]}`, label: opt[1] });\n      }\n      optCount += 1;\n    });\n\n  } else {\n    defOpts = typeDef[typeDef.length - 1]?.map((opt: any) => ({ value: `${hasProperty(optData, 'id') && optData.id ? opt[0] : opt[1]}`, label: opt[1] }));\n  }\n\n  return (\n    <div className='form-group'>\n      <div className='card'>\n        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n          <div>\n            <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n            {idx != 0 && comment ? <small className='card-subtitle form-text text-muted'>{comment}</small> : ''}\n          </div>\n          {children}\n        </div>\n        <div className='card-body m-0 p-0'>\n          <div className='row'>\n            <div className=\"col\">\n              <SBSelect id={name} name={name} data={defOpts}\n                onChange={handleChange}\n                placeholder={`${name} options`}\n                value={selectedValue}\n                isClearable />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EnumeratedField;\n","import React, { useState } from 'react';\nimport Field from '../Field';\nimport { isOptional } from '../../GenMsgLib';\nimport { InfoConfig, SchemaJADN, StandardFieldArray } from '../../../../schema/interface';\nimport { useAppSelector } from '../../../../../../reducers';\nimport { opts2obj } from 'components/create/schema/structure/editors/options/consts';\nimport { hasProperty } from 'components/utils';\nimport SBSelect, { Option } from 'components/common/SBSelect';\n\n// Interface\ninterface ChoiceFieldProps {\n  def: StandardFieldArray;\n  optChange: (n: string, v: any) => void;\n  parent?: string;\n  config: InfoConfig;\n  children?: JSX.Element;\n  value: any;\n}\n\n// Component\nconst ChoiceField = (props: ChoiceFieldProps) => {\n  const { def, optChange, parent, config, children, value = {} } = props;\n  const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN;\n  const [initSelectedOpt, InitSelectedValues] = (typeof value == \"object\" && Object.keys(value).length != 0) ? Object.entries(value)[0] :\n    (typeof value == \"string\" && value.length != 0) ? [value, \"\"] : [\"\", \"\"];\n  const initSelectedOptValue = initSelectedOpt != '' ? { 'label': initSelectedOpt, 'value': initSelectedOpt } : null;\n\n  const [selectedValue, setSelectedValue] = useState<Option | null>(initSelectedOptValue);\n  const [selectedValueData, setSelectedValueData] = useState<any>(InitSelectedValues);\n\n  const handleChange = (e: Option) => {\n    //get selected choice\n    if (e == null) {\n      setSelectedValue(null);\n      setSelectedValueData('');\n      optChange(name, null);\n    } else {\n      setSelectedValue(e);\n      setSelectedValueData(InitSelectedValues);\n      optChange(name, e.value);\n    }\n    //target is undefined \n    //this resets selected choice\n    //e.target.selectedOptions[0].text\n  }\n\n  const onChange = (k: string, v: any) => {\n    //get fields (k, v) for selected choice \n    let updatedData = { [k]: v }\n    setSelectedValueData(updatedData);\n    optChange(name, updatedData);\n  }\n\n  const [_idx, name, type, _args, comment] = def;\n  const msgName = (parent ? [parent, name] : [name]).join('.');\n  var optData: Record<string, any> = {};\n\n  const typeDefs = schema.types.filter(t => t[0] === type);\n  const typeDef = typeDefs.length === 1 ? typeDefs[0] : [];\n  if (typeDef.length != 0) {\n    optData = (opts2obj(typeDef[2]));\n  }\n\n  let defOpts; //select dropdown options\n  if (Array.isArray(typeDef[typeDef.length - 1]) && typeDef[typeDef.length - 1].length != 0) {\n    defOpts = typeDef[typeDef.length - 1]?.map((opt: any) => ({ value: `${hasProperty(optData, 'id') && optData.id ? opt[0] : opt[1]}`, label: opt[1] }));\n  }\n\n  let selectedOpts;\n  if (selectedValue != null) {\n    let selectedDefs; //get opt where the key = selected\n    if (hasProperty(optData, 'id') && optData.id) {\n      selectedDefs = typeDef[typeDef.length - 1].filter((opt: any) => opt[0] === selectedValue.value);\n    } else {\n      selectedDefs = typeDef[typeDef.length - 1].filter((opt: any) => opt[1] === selectedValue.value);\n    }\n    const selectedDef = selectedDefs.length === 1 ? selectedDefs[0] : [];\n    selectedOpts = <Field key={selectedDef[1]} def={selectedDef} parent={msgName} optChange={onChange} config={config} value={selectedValueData} />;\n  }\n\n  return (\n    <div className='form-group'>\n      <div className='card'>\n        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n          <div>\n            <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n            {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n          </div>\n          {children}\n        </div>\n        <div className='card-body m-0 p-0'>\n          <div className='row'>\n            <div className=\"col mb-2\">\n              <SBSelect id={name} name={name} data={defOpts}\n                onChange={handleChange}\n                placeholder={`${name} options`}\n                value={selectedValue}\n                isClearable />\n            </div>\n          </div>\n          <div className='row'>\n            <div className=\"col\">\n              {selectedOpts}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ChoiceField;\n","import { faCircleChevronUp, faCircleChevronDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\n\nconst SBToggleBtn = (props: any) => {\n\n    const { toggle, setToggle, index, children } = props;\n\n    const onToggleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        if (index != undefined) {\n            setToggle((prev) => ({ ...prev, [index]: !prev[index] }));\n        } else {\n            setToggle(!toggle);\n        }\n    }\n    return (\n        <div className='d-flex justify-content-between'>\n            <div>\n                {children}\n            </div>\n            <button onClick={onToggleClick} className='btn btn-sm'\n                title={`${index ? (toggle[index] == true ? 'hide' : 'show') : (toggle ? 'hide' : 'show')}`} >\n                <FontAwesomeIcon icon={index ? (toggle[index] == true ? faCircleChevronUp : faCircleChevronDown) : (toggle ? faCircleChevronUp : faCircleChevronDown)}\n                />\n            </button>\n        </div>\n    );\n}\n\nexport default SBToggleBtn;","import React, { useState } from 'react';\nimport Field from '../Field';\nimport { isOptional } from '../../GenMsgLib';\nimport { InfoConfig, SchemaJADN, StandardFieldArray } from '../../../../schema/interface';\nimport { useAppSelector } from '../../../../../../reducers';\nimport { opts2obj } from 'components/create/schema/structure/editors/options/consts';\nimport { validateOptDataElem } from '../../utils';\nimport SBToggleBtn from 'components/common/SBToggleBtn';\n\n// Interface\ninterface RecordFieldProps {\n  def: StandardFieldArray;\n  optChange: (n: string, v: any) => void;\n  parent?: string;\n  config: InfoConfig;\n  children?: JSX.Element;\n  value: any;\n}\n\n// Component\nconst RecordField = (props: RecordFieldProps) => {\n  const { def, optChange, parent, config, children, value = {} } = props;\n  const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN;\n  var optData: Record<string, any> = {};\n\n  const [_idx, name, type, _args, comment] = def;\n  const msgName = (parent ? [parent, name] : [name]).join('.');\n  const [data, setData] = useState(value); //track elements\n  const [errMsg, setErrMsg] = useState<string[]>([]);\n  const [toggle, setToggle] = useState(true);\n\n  const onChange = (k: string, v: any) => {\n    let updatedData = { ...data };\n    if ((!v || (typeof v == \"object\" && Object.keys(v).length == 0)) && (data && k in data)) {\n      delete updatedData[k]\n    } else {\n      updatedData = { ...data, [k]: v };\n    }\n    setData(updatedData);\n\n    const validMsg = validateOptDataElem(config, optData, Object.entries(updatedData));\n    setErrMsg(validMsg);\n\n    optChange(name, updatedData);\n  }\n\n  const typeDefs = schema.types.filter(t => t[0] === type);\n  const typeDef = typeDefs.length === 1 ? typeDefs[0] : [];\n  if (typeDef.length != 0) {\n    optData = (opts2obj(typeDef[2]));\n  }\n\n  const fieldDef = (!Array.isArray(typeDef[typeDef.length - 1]) || typeDef[typeDef.length - 1].length == 0) ?\n    <div className='p-2'> No fields </div> :\n    typeDef[typeDef.length - 1]?.map((d: any) => <Field key={d[0]} def={d} parent={msgName} optChange={onChange} config={config} value={data[d[1]]} />);\n\n  const err = errMsg.map((msg, index) =>\n    <div key={index}><small className='form-text' style={{ color: 'red' }}>{msg}</small></div>\n  );\n\n  return (\n    <div className='form-group'>\n      <div className='card'>\n        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n          <div>\n            <SBToggleBtn toggle={toggle} setToggle={setToggle} >\n              <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n              {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n              {err}\n            </SBToggleBtn>\n          </div>\n          {children}\n        </div>\n\n        <div className={`card-body mx-2 ${toggle ? '' : 'collapse'}`}>\n          <div className='row'>\n            <div className=\"col my-1 px-0\">\n              {fieldDef}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RecordField;\n","import React, { useState } from 'react';\nimport Field from '../Field';\nimport { isOptional } from '../../GenMsgLib';\nimport { InfoConfig, SchemaJADN, StandardFieldArray } from '../../../../schema/interface';\nimport { useAppSelector } from '../../../../../../reducers';\nimport { opts2obj } from 'components/create/schema/structure/editors/options/consts';\nimport { hasProperty } from 'components/utils';\nimport { validateOptDataElem } from '../../utils';\nimport SBToggleBtn from 'components/common/SBToggleBtn';\n\n// Interface\ninterface MapFieldProps {\n  def: StandardFieldArray;\n  optChange: (n: string, v: any) => void;\n  parent?: string;\n  config: InfoConfig;\n  children?: JSX.Element;\n  value: any;\n}\n\n// Component\nconst MapField = (props: MapFieldProps) => {\n  const { def, optChange, parent, config, children, value = {} } = props;\n  const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN;\n\n  var optData: Record<string, any> = {};\n  const [_idx, name, _type, _args, comment] = def;\n  const msgName = (parent ? [parent, name] : [name]).join('.');\n  const [data, setData] = useState(value); //track elements\n  const [errMsg, setErrMsg] = useState<string[]>([]);\n  const [toggle, setToggle] = useState(true);\n\n  const onChange = (k: string, v: any) => {\n    //if (hasProperty(optData, 'id') && optData.id) { \n    //k should be already be id \n\n    let updatedData = { ...data };\n    if (data && ((!v || (typeof v == \"object\" && Object.keys(v).length == 0)) && k in data)) {\n      delete updatedData[k]\n    } else {\n      updatedData = { ...data, [k]: v };\n    }\n\n    setData(updatedData);\n\n    const validMsg = validateOptDataElem(config, optData, Object.entries(updatedData));\n    setErrMsg(validMsg);\n\n    optChange(name, updatedData);\n  }\n\n  const typeDefs = schema.types.filter(t => t[0] === def[2]);\n  const typeDef = typeDefs.length === 1 ? typeDefs[0] : [];\n  if (typeDef.length != 0) {\n    optData = (opts2obj(typeDef[2]));\n  }\n\n  const fieldDef = (!Array.isArray(typeDef[typeDef.length - 1]) || typeDef[typeDef.length - 1].length == 0) ?\n    <div className='p-2'> No fields </div> :\n    typeDef[typeDef.length - 1].map((d: any) => <Field key={hasProperty(optData, 'id') && optData.id ? d[0] : d[1]} def={d} parent={msgName} optChange={onChange} config={config} value={data[d[1]]} />);\n\n  const err = errMsg.map((msg, index) =>\n    <div key={index}><small className='form-text' style={{ color: 'red' }}>{msg}</small></div>\n  );\n\n  return (\n    <div className='form-group'>\n      <div className='card'>\n        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n          <div>\n            <SBToggleBtn toggle={toggle} setToggle={setToggle} >\n              <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n              {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n              {err}\n            </SBToggleBtn>\n          </div>\n          {children}\n        </div>\n\n        <div className={`card-body mx-2 ${toggle ? '' : 'collapse'}`}>\n          <div className='row'>\n            <div className=\"col my-1 px-0\">\n              {fieldDef}\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default MapField;\n","\n//ArrayOf\nimport React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusSquare, faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n\nimport Field from '../Field';\nimport { isOptional } from '../../GenMsgLib';\nimport { InfoConfig, SchemaJADN, StandardFieldArray, TypeArray } from '../../../../schema/interface';\nimport { useAppSelector } from '../../../../../../reducers';\nimport { opts2obj } from '../../../../schema/structure/editors/options/consts';\nimport { hasProperty } from '../../../../../utils';\nimport { merge } from 'lodash';\nimport { validateOptDataElem } from '../../utils';\nimport { $MINV } from 'components/create/consts';\nimport SBToggleBtn from 'components/common/SBToggleBtn';\n\n// Interface\ninterface ArrayOfFieldProps {\n  def: StandardFieldArray;\n  optChange: (n: string, v: any, i?: number) => void;\n  parent?: string;\n  config: InfoConfig;\n  children?: JSX.Element;\n  value: any;\n}\n\n// ArrayOf Field Component\nconst ArrayOfField = (props: ArrayOfFieldProps) => {\n  const { def, parent, optChange, config, children, value = [''] } = props;\n  const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN;\n\n  var optData: Record<string, any> = {};\n  const [_idx, name, type, args, comment] = def;\n  const msgName = (parent ? [parent, name] : [name]).join('.');\n\n  const [opts, setOpts] = useState<any[]>(Array.isArray(value) ? value : [value]); //track elem of vtype\n\n  const MAX_COUNT = hasProperty(optData, 'maxv') && optData.maxv != 0 ? optData.maxv : config.$MaxElements;\n  const MIN_COUNT = hasProperty(optData, 'minv') && optData.minv != 0 ? optData.minv : $MINV;\n\n  const [count, setCount] = useState(opts ? opts.length : 1);\n  const [min, setMin] = useState((count <= MIN_COUNT) || (MIN_COUNT == 0 && count == 1));\n  const [max, setMax] = useState(MAX_COUNT <= count);\n\n  const [errMsg, setErrMsg] = useState<string[]>([]);\n  const [toggle, setToggle] = useState(true);\n\n  useEffect(() => {\n    setMax(MAX_COUNT <= count);\n    setMin((count <= MIN_COUNT) || (MIN_COUNT == 0 && count == 1));\n  }, [count])\n\n  const addOpt = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    if (MAX_COUNT <= count + 1) {\n      return;\n    }\n    // add placeholder\n    const updatedOpts = [...opts, ''];\n    setOpts(updatedOpts);\n    setCount((count) => count + 1);\n  }\n\n  const removeOpt = (e: React.MouseEvent<HTMLButtonElement>, removedIndex: number) => {\n    e.preventDefault();\n    if (count - 1 <= MIN_COUNT) {\n      return;\n    }\n\n    //remove from arr\n    var updatedOpts = opts.filter((_opt, i) => i != removedIndex);\n    setOpts(updatedOpts);\n\n    //remove empty placeholders\n    let filteredOpts = updatedOpts.filter((opt) => opt != '');\n\n    //validate filtered data\n    const errCheck = validateOptDataElem(config, optData, filteredOpts);\n    setErrMsg(errCheck);\n\n    //update data\n    const updatedOptArr = Array.from(Object.values(updatedOpts));\n\n    optChange(name, updatedOptArr);\n    setCount((count) => count - 1);\n  }\n\n  const onChange = (k: string, v: any, i: number) => {\n    if (Number.isNaN(v)) {\n      v = undefined;\n    }\n\n    const arrKeys = msgName.split(\".\");\n    const valKeys = k.split(\".\");\n\n    if ((arrKeys.length < valKeys.length - 1) && (valKeys.length - arrKeys.length != 1)) {\n      //create nested obj based on keys\n      const nestedKeys = valKeys.slice(arrKeys.length + 1);\n      let nestedObj = {};\n      nestedKeys.reduce((obj, key, index) => {\n        if (index == nestedKeys.length - 1) {\n          return obj[key] = v;\n        } else {\n          return obj[key] = {};\n        }\n      }, nestedObj);\n\n      v = nestedObj;\n\n      //merge and update v obj at opt[i] \n      //if the old V has more items than the new value, then a value has been removed and\n      //if value exists in old V and if value is null; do not merge\n      if (opts.length != 0) {\n        let oldV = opts[i];\n\n        if (oldV) {\n          if (typeof oldV[valKeys[valKeys.length - 1]] != 'object' && v == '') {\n            v = undefined;\n          } else if (typeof oldV[valKeys[valKeys.length - 1]] == 'object' && Object.keys(oldV).includes(valKeys[valKeys.length - 1])) {\n            if (oldV[valKeys[valKeys.length - 1]].length >= v[valKeys[valKeys.length - 1]].length) {\n              oldV[valKeys[valKeys.length - 1]] = v[valKeys[valKeys.length - 1]]; //TODO: delete\n              v = oldV;\n            }\n          } else {\n            v = merge(oldV, v);\n          }\n        } //if oldV is not null\n      }\n    } //else v is an arrayOf string\n\n    let updatedOpts;\n    if (i < opts.length) {\n      //update\n      updatedOpts = opts.map((data, index) => {\n        if (index == i) {\n          return v;\n        } else {\n          return data;\n        }\n      });\n    } else {\n      //add\n      updatedOpts = [...opts, v];\n    }\n    setOpts(updatedOpts);\n\n    //send up arrayOf data\n    let filteredOpts = updatedOpts.filter((opt) => opt != '');\n    const errCheck = validateOptDataElem(config, optData, filteredOpts);\n    setErrMsg(errCheck);\n\n    const updatedOptArr = Array.from(Object.values(updatedOpts));\n\n    optChange(name, updatedOptArr);\n  }\n\n  const typeDefs: TypeArray[] = schema.types.filter(t => t[0] === type);\n  const typeDef = typeDefs.length === 1 ? typeDefs[0] : []; //type is not model defined; arrayOf\n  if (typeDef.length != 0) {\n    optData = (opts2obj(typeDef[2]));\n  } else {\n    optData = (opts2obj(args));\n  }\n  // MUST include vtype\n  // MUST NOT include more than one collection option (set, unique, or unordered).\n\n  // if vtype is enum/pointer = derived enum\n  var fieldDef;\n  if (optData.vtype.startsWith(\"#\") || optData.vtype.startsWith(\">\")) {\n    optData.vtype = optData.vtype.slice(1);\n\n    const arrDefs: TypeArray[] = schema.types.filter((t: any) => t[0] === optData.vtype);\n    const arrDef = arrDefs.length === 1 ? arrDefs[0] : def;\n\n    fieldDef = [0, arrDef[0], 'Enumerated', [], arrDef[arrDef.length - 1]];\n\n  } else {\n    const arrDefs: TypeArray[] = schema.types.filter((t: any) => t[0] === optData.vtype);\n    const arrDef = arrDefs.length === 1 ? arrDefs[0] : optData.vtype;\n\n    //vtype is defined\n    //vtype is primitive or vtype is not found (create string field)\n    // TODO? : definition not found = unresolved schema (validate JADN should have failed)\n    fieldDef = arrDefs.length === 1 ? [0, arrDef[0], arrDef[0], [], arrDef[arrDef.length - 2]]\n      : [0, arrDef.toLowerCase(), arrDef, [], ''];\n  }\n\n  const fields = opts.map((opt, i) => {\n    return (\n      <Field key={self.crypto.randomUUID()} def={fieldDef} parent={msgName} optChange={onChange} idx={i} config={config} value={opt}>\n        <>\n          {!min && <button\n            type='button'\n            className={`btn btn-danger btn-sm p-1${min ? ' disabled' : ''}`}\n            onClick={(e) => removeOpt(e, i)}\n          >\n            <FontAwesomeIcon icon={faMinusSquare} size=\"lg\" />\n          </button>}\n        </>\n      </Field>\n    )\n  });\n\n  const err = errMsg.map((msg, index) =>\n    <div key={index}><small className='form-text' style={{ color: 'red' }}>{msg}</small></div>\n  );\n\n  return (\n    <div className='form-group'>\n      <div className='card'>\n        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n          <div>\n            <SBToggleBtn toggle={toggle} setToggle={setToggle} >\n              <p className='card-title m-0'>\n                {`${name}${isOptional(def) ? '' : '*'}`}\n              </p>\n              {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n              {err}\n            </SBToggleBtn>\n          </div>\n          {children}\n        </div>\n        <div className={`card-body p-2 ${toggle ? '' : 'collapse'}`}>\n          {fields}\n          <div className=\"p-2\">\n            {!max && <button\n                type='button'\n                className={`btn btn-primary btn-sm btn-block ${max ? ' disabled' : ''}`}\n                title={`Add Field to ${name}`}\n                onClick={addOpt}\n              >\n                <FontAwesomeIcon icon={faPlusSquare} />\n              </button>}\n            </div> \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ArrayOfField;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { v4 as uuid4} from 'uuid';\n\nconst SBUUIDv4Btn = (props: any) => {\n    const { uuidOnClick } = props;\n\n    const onCreateUUIDv4 = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        const data = uuid4();\n        uuidOnClick(data)\n    }\n\n    return (\n        <button type='button'\n            className=\"btn btn-sm btn-primary\"\n            title={\"Generate a UUIDv4\"}\n            name={\"generate_uuid\"}\n            onClick={onCreateUUIDv4}>     \n            <FontAwesomeIcon icon={faPlusSquare} />\n        </button>\n    );\n}\n\nexport default SBUUIDv4Btn;","import React, { useState } from \"react\";\nimport { isOptional, validateOptDataBinary, validateOptDataElem, validateOptDataNum, validateOptDataStr } from \"../../utils\";\nimport SBUUIDv4Btn from \"components/common/SBUUID4Btn\";\nimport dayjs from 'dayjs';\nimport { Buffer } from 'buffer';\nimport { hasProperty } from \"components/utils\";\n\n//This component is used to help users format/serialize data into valid JSON\n//input fields, basic input validation, and parsing\n//e.g. ipv4 addr : fields for [ipv4][/CIDR ] with field validation then gets parsed into JSON as => ipv4/CIDR \nconst FormattedField = (props: any) => {\n\n    const { basicProps, config, optData, errMsg, setErrMsg, value } = props;\n    const { arr, def, optChange, parent, children } = basicProps;\n    const [_idx, name, _type, _opts, comment] = def;\n    const msgName = (parent ? [parent, name] : [name]).join('.');\n    const [data, setData] = useState(value);\n\n    if (hasProperty(optData, 'default') && value == '') {\n        setData(optData.default);\n    }\n    const err = errMsg.map((msg, index) =>\n        <div key={index}><small className='form-text' style={{ color: 'red' }}>{msg}</small></div>\n    );\n\n    //UUID\n    const [uuidValue, setUUIDValue] = useState(\"\");\n    const uuidOnchg = (generatedUUID: string) => {\n        setData(generatedUUID);\n        const errCheck = validateOptDataStr(config, optData, generatedUUID);\n        setErrMsg(errCheck);\n        optChange(name, generatedUUID, arr);\n    }\n    \n    //IP Values\n    const [ipValue, setIpValue] = useState<any[]>(['', '']);\n    const ipvNetOnchg = (k: string, v: any, idx: number) => {\n        const newArr = ipValue.map((obj, i) => {\n            if (i === idx) {\n                return v;\n            } else {\n                return obj;\n            }\n        });\n        setIpValue(newArr);\n        const encoded = Buffer.from(newArr[0], \"utf8\").toString('base64');\n        const newValue = `${encoded}${newArr[1] ? `/${newArr[1]}` : ``}`;\n\n        const errCheck = validateOptDataElem(config, optData, newArr, optData.format ? true : false);\n        setErrMsg(errCheck);\n        optChange(k, newValue);\n    }\n\n    switch (optData.format) {\n        case 'date-time':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                value={data}\n                                name={name}\n                                type={\"datetime-local\"}\n                                step=\"any\"\n                                min={dayjs().format('YYYY-MM-DDTHH:mm:ssZ[Z]')}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    //TODO? check for min/max?\n                                    optChange(name, dayjs(e.target.value).format('YYYY-MM-DDTHH:mm:ssZ[Z]'), arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'date':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                value={data}\n                                name={name}\n                                type={\"date\"}\n                                step=\"any\"\n                                min={dayjs().format('YYYY-MM-DD')}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    //TODO? check for min/max?\n                                    optChange(name, dayjs(e.target.value).format('YYYY-MM-DD'), arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'time':\n        case 'duration':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                value={data}\n                                name={name}\n                                type='time'\n                                step=\"1\"\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    //TODO? check for min/max?\n                                    optChange(name, e.target.value, arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'email':\n        case 'idn-email':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                type='email'\n                                name={name}\n                                value={data}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    const errCheck = validateOptDataStr(config, optData, e.target.value);\n                                    setErrMsg(errCheck);\n                                    optChange(name, e.target.value, arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'ipv4':\n        case 'ipv4-addr':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                type='text'\n                                name={name}\n                                value={data}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    const encoded = Buffer.from(e.target.value, \"utf8\").toString('base64');\n                                    const errCheck = validateOptDataBinary(config, optData, e.target.value);\n                                    setErrMsg(errCheck);\n                                    optChange(name, encoded, arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'ipv4-net':\n            //console.log(\"ipv4-net array detected\")\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0 input-group'>\n                            <input\n                                type='text'\n                                name={\"IPv4 Address\"}\n                                value={data}\n                                onChange={e => {\n                                    setIpValue(ipValue => [e.target.value, ipValue[1]]);\n                                }}\n                                onBlur={e => {\n                                    ipvNetOnchg(name, e.target.value, 0)\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                            <span className=\"input-group-text\"> / </span>\n                            <input\n                                type='number'\n                                onWheel={(e) => { e.target.blur(); }}\n                                name={\"Prefix Length\"}\n                                min={0}\n                                max={128}\n                                value={data}\n                                onChange={e => {\n                                    setIpValue(ipValue => [ipValue[0], e.target.value]);\n                                }}\n                                onBlur={e =>\n                                    ipvNetOnchg(name, e.target.value, 1)\n                                }\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'ipv6':\n        case 'ipv6-addr':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                type='text'\n                                name={name}\n                                value={data}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    const encoded = Buffer.from(e.target.value, \"utf8\").toString('base64');\n                                    const errCheck = validateOptDataBinary(config, optData, e.target.value);\n                                    setErrMsg(errCheck);\n                                    optChange(name, encoded, arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'ipv6-net':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0 input-group'>\n                            <input\n                                type='text'\n                                name={name}\n                                value={data}\n                                onChange={e => {\n                                    setIpValue(ipValue => [e.target.value, ipValue[1]]);\n                                }}\n                                onBlur={e => {\n                                    ipvNetOnchg(name, e.target.value, 0);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                            <span className=\"input-group-text\"> / </span>\n                            <input\n                                type={'number'}\n                                onWheel={(e) => { e.target.blur(); }}\n                                name={name}\n                                min={0}\n                                max={128}\n                                value={data}\n                                onChange={e => {\n                                    setIpValue(ipValue => [ipValue[0], e.target.value]);\n                                }}\n                                onBlur={e =>\n                                    ipvNetOnchg(name, e.target.value, 1)\n                                }\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'eui':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                type='text'\n                                name={name}\n                                value={data}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    const encoded = Buffer.from(e.target.value, \"utf8\").toString('base64').toUpperCase();\n                                    const errCheck = validateOptDataBinary(config, optData, e.target.value);\n                                    setErrMsg(errCheck);\n                                    optChange(name, encoded, arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'uuid':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <div className='d-flex justify-content-between'>\n                                <div className=\"input-group\">\n                                    <input\n                                        className=\"form-control form-control-sm\"\n                                        value={data}\n                                        placeholder=\"\"\n                                        type='text'\n                                        name={name}\n                                        onChange={e => {\n                                            setData(e.target.value);\n                                        }}\n                                        onBlur={e => {\n                                            const errCheck = validateOptDataStr(config, optData, e.target.value);\n                                            setErrMsg(errCheck);\n                                            optChange(name, e.target.value, arr);\n                                        }}\n                                        style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                                    />\n                                    <SBUUIDv4Btn uuidOnClick={uuidOnchg}/>\n                                </div>\n                            </div>\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'i8':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                type='number'\n                                onWheel={(e) => { e.target.blur(); }}\n                                min={-128}\n                                max={127}\n                                name={name}\n                                value={data}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    const errCheck = validateOptDataNum(optData, parseInt(e.target.value));\n                                    setErrMsg(errCheck);\n                                    optChange(name, parseInt(e.target.value), arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'i16':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                type='number'\n                                onWheel={(e) => { e.target.blur(); }}\n                                min={-32768}\n                                max={32767}\n                                name={name}\n                                value={data}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    const errCheck = validateOptDataNum(optData, parseInt(e.target.value));\n                                    setErrMsg(errCheck);\n                                    optChange(name, parseInt(e.target.value), arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'i32':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                type='number'\n                                onWheel={(e) => { e.target.blur(); }}\n                                name={name}\n                                min={-2147483648}\n                                max={2147483647}\n                                value={data}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    const errCheck = validateOptDataNum(optData, parseInt(e.target.value));\n                                    setErrMsg(errCheck);\n                                    optChange(name, parseInt(e.target.value), arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'u\\\\d+': //TODO\n        case 'u<n>':\n            const n = optData.format.substring(1); // digit after u\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                type='number'\n                                onWheel={(e) => { e.target.blur(); }}\n                                min={0}\n                                max={2 ** (parseInt(n) - 1)}\n                                name={name}\n                                value={data}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    const errCheck = validateOptDataNum(optData, parseInt(e.target.value));\n                                    setErrMsg(errCheck);\n                                    optChange(name, parseInt(e.target.value), arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n        case 'x':\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                type='text'\n                                name={name}\n                                value={data}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    //TODO : JSON string containing Base16 (hex) encoding of a binary value as defined in RFC 4648 Section 8. \n                                    //Note that the Base16 alphabet does not include lower-case letters.\n                                    const encoded = Buffer.from(e.target.value, \"utf8\").toString('base64').toUpperCase();\n                                    const errCheck = validateOptDataBinary(config, optData, e.target.value);\n                                    setErrMsg(errCheck);\n                                    optChange(name, encoded, arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n\n\n        case 'hostname':\n        case 'idn-hostname':\n        case 'uri':\n        case 'uri-reference':\n        case 'iri':\n        case 'iri-reference':\n        case 'uri-template':\n        case 'json-pointer':\n        case 'relative-json-pointer':\n        case 'regex':\n        default:\n            return (\n                <div className='form-group'>\n                    <div className='card'>\n                        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                            <div>\n                                <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                            </div>\n                            {children}\n                        </div>\n                        <div className='card-body m-0 p-0'>\n                            <input\n                                type='text'\n                                name={name}\n                                value={data}\n                                onChange={e => {\n                                    setData(e.target.value);\n                                }}\n                                onBlur={e => {\n                                    const errCheck = validateOptDataStr(config, optData, e.target.value);\n                                    setErrMsg(errCheck);\n                                    optChange(name, e.target.value, arr);\n                                }}\n                                style={{ borderColor: errMsg.length != 0 ? 'red' : '' }}\n                            />\n                        </div>\n                        {err}\n                    </div>\n                </div>\n            );\n    }\n}\nexport default FormattedField;","import React, { useState } from 'react';\nimport Field from '../Field';\nimport { isOptional } from '../../GenMsgLib';\nimport { InfoConfig, SchemaJADN, StandardFieldArray } from '../../../../schema/interface';\nimport { useAppSelector } from '../../../../../../reducers';\nimport { opts2obj } from 'components/create/schema/structure/editors/options/consts';\nimport { validateOptDataElem } from '../../utils';\nimport FormattedField from './formattedField';\nimport { hasProperty } from 'components/utils';\nimport SBToggleBtn from 'components/common/SBToggleBtn';\n\n// Interface\ninterface ArrayFieldProps {\n  def: StandardFieldArray;\n  optChange: (n: string, v: any) => void;\n  parent?: string;\n  config: InfoConfig;\n  children?: JSX.Element;\n  value: any;\n}\n\n// Component\nconst ArrayField = (props: ArrayFieldProps) => {\n  const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN\n  var optData: Record<string, any> = {};\n\n  const { def, optChange, parent, config, children, value = [] } = props;\n  const [_idx, name, _type, _args, comment] = def;\n  const msgName = (parent ? [parent, name] : [name]).join('.');\n  const [data, setData] = useState<string[]>(value); //track elements\n  const [errMsg, setErrMsg] = useState<string[]>([]);\n  const [toggle, setToggle] = useState(true);\n\n  const onChange = (_k: string, v: any, i: number) => {\n    var updatedArr;\n    if (data.length - 1 < i) {\n      //add \n      setData([...data, v]);\n      updatedArr = [...data, v];\n\n    } else {\n      //update arr at index\n      updatedArr = data.map((field, idx) => {\n        if (idx === i) {\n          return v;\n        } else {\n          return field;\n        }\n      });\n      setData(updatedArr);\n    }\n    //remove empty fields?\n    const errCheck = validateOptDataElem(config, optData, updatedArr, optData.format ? true : false);\n    setErrMsg(errCheck);\n\n    optChange(name, updatedArr);\n  }\n\n  const typeDefs = schema.types.filter(t => t[0] === def[2]);\n  const typeDef = typeDefs.length === 1 ? typeDefs[0] : [];\n  if (typeDef.length != 0) {\n    optData = (opts2obj(typeDef[2]));\n  }\n\n  const err = errMsg.map((msg, index) =>\n    <div key={index}><small className='form-text' style={{ color: 'red' }}>{msg}</small></div>\n  );\n\n  if (hasProperty(optData, 'format')) {\n    console.log(\"found a formatted array\");\n    return (<FormattedField\n      basicProps={props} optData={optData} config={config}\n      errMsg={errMsg} setErrMsg={setErrMsg}\n    />);\n  }\n\n  //Expected: fields (typeDef.length  == 5)\n  let fieldDef;\n  if (Array.isArray(typeDef[typeDef.length - 1]) && typeDef[typeDef.length - 1].length != 0) {\n    fieldDef = typeDef[typeDef.length - 1].map((d: any, i: number) =>\n      <Field key={d[0]} def={d} parent={msgName} optChange={onChange} idx={i} config={config} value={data[i]} />\n    )\n  } else {\n    <div className='p-2'> No Fields </div>\n  }\n\n\n  return (\n    <div className='form-group'>\n      <div className='card'>\n        <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n          <div>\n            <SBToggleBtn toggle={toggle} setToggle={setToggle} >\n              <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n              {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n              {err}\n            </SBToggleBtn>\n          </div>\n          {children}\n        </div>\n\n        <div className={`card-body mx-2 ${toggle ? '' : 'collapse'}`}>\n          {fieldDef}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ArrayField;\n","\n//MapOf\nimport React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusSquare, faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n\nimport Field from '../Field';\nimport { isOptional } from '../../GenMsgLib';\nimport { InfoConfig, SchemaJADN, StandardFieldArray, TypeArray } from '../../../../schema/interface';\nimport { opts2obj } from '../../../../schema/structure/editors/options/consts';\nimport { useAppSelector } from '../../../../../../reducers';\nimport { validateOptDataElem } from '../../utils';\nimport { delMultiKey, hasProperty, setMultiKey } from 'components/utils';\nimport { $MINV } from 'components/create/consts';\nimport SBToggleBtn from 'components/common/SBToggleBtn';\n\n// Interface\ninterface MapOfFieldProps {\n    def: StandardFieldArray;\n    optChange: (n: string, v: any, i?: number) => void;\n    parent?: string;\n    config: InfoConfig;\n    children?: JSX.Element;\n    value: any;\n}\n\n// MapOf Field Component\nconst MapOfField = (props: MapOfFieldProps) => {\n    const { def, parent, optChange, config, children, value = [''] } = props;\n    const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN;\n    var optData: Record<string, any> = {};\n    const [_idx, name, type, args, comment] = def;\n    const msgName = (parent ? [parent, name] : [name]).join('.');\n\n    const [opts, setOpts] = useState<any[]>(Array.isArray(value) ? value : [value]); //opts: let every obj have a key and value [{key: '', value:''}, ...]\n    const [kopts, setkOpts] = useState<any[]>([]);\n    const [vopts, setvOpts] = useState<any[]>([]);\n\n    const MAX_COUNT = hasProperty(optData, 'maxv') && optData.maxv != 0 ? optData.maxv : config.$MaxElements;\n    const MIN_COUNT = hasProperty(optData, 'minv') && optData.minv != 0 ? optData.minv : $MINV;\n\n    const [count, setCount] = useState(opts ? opts.length : 1);\n    const [min, setMin] = useState((count <= MIN_COUNT) || (MIN_COUNT == 0 && count == 1));\n    const [max, setMax] = useState(MAX_COUNT <= count);\n\n    const [errMsg, setErrMsg] = useState<string[]>([]);\n\n    const [toggle, setToggle] = useState(true);\n    const [toggleField, setToggleField] = useState<{ [key: string]: Boolean }>({ [0]: true });\n\n    useEffect(() => {\n        setMax(MAX_COUNT <= count);\n        setMin((count <= MIN_COUNT) || (MIN_COUNT == 0 && count == 1));\n    }, [count])\n\n    const addOpt = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        if (MAX_COUNT <= count + 1) {\n            return;\n        }\n        // add placeholder\n        setOpts((prev) => [...prev, '']);\n        setkOpts((prev) => [...prev, ''])\n        setvOpts((prev) => [...prev, ''])\n        setCount((count) => count + 1);\n    }\n\n    const removeOpt = (e: React.MouseEvent<HTMLButtonElement>, removedIndex: number) => {\n        e.preventDefault();\n        if (count - 1 <= MIN_COUNT) {\n            return;\n        }\n\n        //remove from end of arr\n        var updatedOpts = opts.filter((_opt, i) => i != removedIndex);\n        setOpts(updatedOpts);\n\n        let filteredOpts = updatedOpts.filter((opt) => opt != '');\n\n        //validate data\n        const errCheck = validateOptDataElem(config, optData, filteredOpts);\n        setErrMsg(errCheck);\n\n        //update data\n        let data;\n        const ktypeDefs = schema.types.filter(t => t[0] === keyField[2]);\n        var ktypeDef = ktypeDefs.length === 1 ? ktypeDefs[0][1] : keyField[2];\n        if (ktypeDef == 'Enumerated' || ktypeDef == 'String') {\n            data = updatedOpts.reduce((opts, obj) => { return Object.assign(opts, { [obj.key]: obj.val }) }, {});\n        } else {\n            data = updatedOpts.reduce((opts, obj) => { return opts.concat([obj.key], [obj.val]) }, []);\n        }\n\n        optChange(name, data);\n        setCount((count) => count - 1);\n    }\n\n    const onChangeKey = (k: string, v: any, i: number) => {\n        if (!v) {\n            v = '';\n        }\n        const ktype = msgName + \".\" + optData.ktype.toLowerCase();\n        const arrKeys = ktype.split(\".\");\n        const valKeys = k.split(\".\");\n        const nestedKeys = valKeys.slice(arrKeys.length);\n\n        let updatedVal = v;\n        if (nestedKeys.length != 0) {\n            updatedVal = { ...kopts[i] };\n            if (v) {\n                setMultiKey(updatedVal, k.toString(), v);\n            } else {\n                delMultiKey(updatedVal, k.toString());\n                if (nestedKeys.length > 1 && updatedVal[nestedKeys[0]] && !updatedVal[nestedKeys[0]][nestedKeys[1]]) {\n                    delMultiKey(updatedVal, nestedKeys[0].toString());\n                }\n            }\n        }\n\n        var updatedOpts;\n        if (kopts.length - 1 < i) {\n            updatedOpts = [...kopts, updatedVal];\n        } else {\n            updatedOpts = kopts.map((obj, idx) => {\n                if (idx === i) {\n                    return updatedVal;\n                } else {\n                    return obj;\n                }\n            });\n        }\n\n        setkOpts(updatedOpts);\n        onChange('key', updatedOpts, i);\n    }\n\n    const onChangeValue = (k: string, v: any, i: number) => {\n        if (!v) {\n            v = '';\n        }\n        const vtype = msgName + \".\" + optData.vtype;\n        const arrKeys = vtype.split(\".\");\n        const valKeys = k.split(\".\");\n        const nestedKeys = valKeys.slice(arrKeys.length);\n\n        let updatedVal = v;\n        if (nestedKeys.length != 0) {\n            updatedVal = { ...vopts[i] };\n            if (v) {\n                setMultiKey(updatedVal, nestedKeys.join('.').toString(), v);\n            } else {\n                delMultiKey(updatedVal, nestedKeys.join('.').toString());\n                if (nestedKeys.length > 1 && updatedVal[nestedKeys[0]] && !updatedVal[nestedKeys[0]][nestedKeys[1]]) {\n                    delMultiKey(updatedVal, nestedKeys[0].toString());\n                }\n            }\n        }\n\n        var updatedOpts;\n        if (vopts.length - 1 < i) {\n            updatedOpts = [...vopts, updatedVal];\n        } else {\n            updatedOpts = vopts.map((obj, idx) => {\n                if (idx === i) {\n                    return updatedVal;\n                } else {\n                    return obj;\n                }\n            });\n        }\n\n        setvOpts(updatedOpts);\n        onChange('val', updatedOpts, i);\n    }\n\n    const onChange = (k: string, v: any, i: number) => {\n        var updatedOpts;\n        //add to key or value type\n        if (opts.length - 1 < i) {\n            updatedOpts = [...opts, { [k]: v[i] }];\n            setOpts(updatedOpts);\n        } else {\n            updatedOpts = opts.map((obj, idx) => {\n                if (idx === i) {\n                    return { ...obj, [k]: v[i] };\n                } else {\n                    return obj;\n                }\n            });\n            setOpts(updatedOpts);\n        }\n\n        const filteredOpts = updatedOpts.filter((obj) => obj && (obj.key || obj.value))\n\n        const errCheck = validateOptDataElem(config, optData, filteredOpts);\n        setErrMsg(errCheck);\n\n        // TODO: FINISH REDUCE ARR OF OBJ ...\n        // A MapOf type where ktype is Enumerated is equivalent to a Map. \n        // JSON object if ktype is a String type \n        // JSON array if ktype is not a String type.  \n        let data;\n        const ktypeDefs = schema.types.filter(t => t[0] === keyField[2]);\n        var ktypeDef = ktypeDefs.length === 1 ? ktypeDefs[0][1] : keyField[2];\n        if (ktypeDef == 'Enumerated' || ktypeDef == 'String') {\n            data = updatedOpts.reduce((opts, obj) => { return Object.assign(opts, { [obj.key]: obj.val }) }, {});\n        } else {\n            data = updatedOpts.reduce((opts, obj) => { return opts.concat([obj.key], [obj.val]) }, []);\n        }\n\n        optChange(name, data);\n    }\n\n    const typeDefs: TypeArray[] = schema.types.filter(t => t[0] === type);\n    const typeDef = typeDefs.length === 1 ? typeDefs[0] : []; //type is not model defined; mapOf\n    if (typeDef.length != 0) {\n        optData = (opts2obj(typeDef[2]));\n    } else {\n        optData = (opts2obj(args));\n    }\n    // MUST include ktype and vtype options.\n\n\n    // if ktype is enum/pointer = derived enum else ktype\n    var keyDef; //keyDef == defined or based type\n    var keyField: any[];\n    if (optData.ktype.startsWith(\"#\") || optData.ktype.startsWith(\">\")) {\n        optData.ktype = optData.ktype.slice(1);\n        const keyDefs: TypeArray[] = schema.types.filter((t: any) => t[0] === optData.ktype);\n        //CURRENTLY IN TypeKey = 'name' | 'type' | 'options' | 'comment' | 'fields';\n        //no fields in def\n        //StandardFieldKey = 'id' | 'name' | 'type' | 'options' | 'comment';\n        keyDefs.length === 1 ? keyDef = keyDefs[0] : keyDef = keyDefs;\n        keyField = [0, keyDef, 'Enumerated', [], keyDef[keyDef.length - 1]];\n\n    } else {\n        const keyDefs: TypeArray[] = schema.types.filter((t: any) => t[0] === optData.ktype);\n        const keyDef = keyDefs.length === 1 ? keyDefs[0] : optData.ktype;\n\n        if (keyDefs.length != 0) {\n            keyField = keyDef.length === 4 ? [0, keyDef[0], keyDef[0], [], keyDef[keyDef.length - 1]]\n                : [0, keyDef[0], keyDef[0], [], keyDef[keyDef.length - 2]];\n        } else {\n            //vtype is a primitive type or undefined (create string field)\n            // TODO? : definition not found = unresolved schema (validate JADN should have failed)\n            keyField = [0, keyDef, keyDef, [], ''];\n        }\n    }\n\n    // if vtype is enum/pointer = derived enum\n    var valDef;\n    var valField;\n    if (optData.vtype.startsWith(\"#\") || optData.vtype.startsWith(\">\")) {\n        optData.vtype = optData.vtype.slice(1);\n        const valDefs: TypeArray[] = schema.types.filter((t: any) => t[0] === optData.vtype);\n        valDefs.length === 1 ? valDef = valDefs[0] : valDef = valDefs;\n        valField = [0, valDef, 'Enumerated', [], valDef[valDef.length - 1]];\n\n    } else {\n        //vtype is an def\n        const valDefs: TypeArray[] = schema.types.filter((t: any) => t[0] === optData.vtype);\n        const valDef = valDefs.length === 1 ? valDefs[0] : optData.vtype;\n        if (valDefs.length != 0) {\n            valField = valDef.length === 4 ? [0, valDef[0], valDef[0], [], valDef[valDef.length - 1]]\n                : [0, valDef[0], valDef[0], [], valDef[valDef.length - 2]];\n        } else {\n            //vtype is a primitive type or undefined (create string field)\n            // TODO? : definition not found = unresolved schema (validate JADN should have failed)\n            valField = [0, valDef, valDef, [], ''];\n        }\n    }\n\n    const fields = opts.map((item, i) => {\n        return (\n            <div className='form-group' key={self.crypto.randomUUID()}>\n                <div className='card'>\n                    <div className='card-header p-2'>\n                        {!min && <button\n                            type='button'\n                            className={`btn btn-sm btn-danger float-end p-1${min ? ' disabled' : ''}`}\n                            onClick={(e) => removeOpt(e, i)}\n                        >\n                            <FontAwesomeIcon icon={faMinusSquare} size=\"lg\" />\n                        </button>}\n                        <SBToggleBtn toggle={toggleField} setToggle={setToggleField} index={i} >\n                            <div className='card-title m-2'>\n                                {name} {i + 1}\n                            </div>\n                        </SBToggleBtn>\n                    </div>\n                    <div className={`card-body mx-2 ${toggleField[i] == true ? '' : 'collapse'}`} id={`${i}`}>\n                        <Field key={\"key\"} def={keyField} parent={msgName} optChange={onChangeKey} idx={i} config={config} value={item.key} />\n                        <Field key={\"value\"} def={valField} parent={msgName} optChange={onChangeValue} idx={i} config={config} value={item.val} />\n                    </div>\n                </div>\n            </div >\n        )\n    });\n\n    const err = errMsg.map((msg, index) =>\n        <div key={index}><small className='form-text' style={{ color: 'red' }}>{msg}</small></div>\n    );\n\n    return (\n        <div className='form-group'>\n            <div className='card'>\n                <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                    <div>\n                        <SBToggleBtn toggle={toggle} setToggle={setToggle} >\n                            <div>\n                                <p className='card-title m-0'>\n                                    {`${name}${isOptional(def) ? '' : '*'}`}\n                                </p>\n                                {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                                {err}\n                            </div>\n                        </SBToggleBtn>\n                    </div>\n                    {children}\n                </div>\n                <div className={`card-body p-2 ${toggle ? '' : 'collapse'}`}>\n                    {fields}\n                    <div className=\"p-2\">\n                        {!max && <button\n                            type=\"button\"\n                            className={`btn btn-sm btn-block btn-primary ${max ? ' disabled' : ''}`}\n                            title={`Add Field to ${name}`}\n                            onClick={addOpt}>\n                            <FontAwesomeIcon icon={faPlusSquare} />\n                        </button>}                    \n                    </div>\n                </div>               \n            </div>\n        </div>\n    );\n}\n\nexport default MapOfField;\n","//basic\nimport React from 'react';\nimport Field from '../Field';\nimport { InfoConfig, SchemaJADN, StandardFieldArray } from '../../../../schema/interface';\nimport { opts2obj } from 'components/create/schema/structure/editors/options/consts';\nimport { useAppSelector } from 'reducers';\nimport { hasProperty } from 'components/utils';\n\n// Interface\ninterface LinkFieldProps {\n    def: StandardFieldArray;\n    optChange: (n: string, v: any, i?: number) => void;\n    parent?: string;\n    config: InfoConfig;\n    value: any;\n}\n\n// Component\nconst LinkField = (props: LinkFieldProps) => {\n\n    const { def, optChange, parent, config, value } = props;\n    const [_idx, name, type, _opts, _comment] = def;\n\n    var optData: Record<string, any> = {};\n    const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN;\n    const typeDefs = schema.types.filter(t => t[0] === type);\n    const typeDef = typeDefs.length === 1 ? typeDefs[0] : [];\n    if (typeDef.length != 0) {\n        optData = (opts2obj(typeDef[2]));\n    }\n\n    //find key\n    let linkField = undefined;\n    if (Array.isArray(typeDef[typeDef.length - 1]) && typeDef[typeDef.length - 1].length != 0) {\n        for (let field of (typeDef[typeDef.length - 1])) {\n            const [_fidx, _fname, _ftype, fopts, _fcomment] = field;\n            const newField = [_fidx, name, _ftype, fopts, _fcomment];\n            const foptData = (opts2obj(fopts));\n            if (hasProperty(foptData, 'key')) {\n                //create field based on key\n                return linkField = (\n                    <Field key={name} def={newField} parent={parent} optChange={optChange} config={config} value={value} />\n                );\n            }\n        };\n    }\n\n    if (linkField) {\n        return linkField;\n    } else {\n        return (<div style={{ color: 'red' }}> No Link Found </div>);\n    }\n}\n\nexport default LinkField;","import React from 'react';\nimport Field from '../Field';\nimport { isOptional } from '../../GenMsgLib';\nimport { InfoConfig, SchemaJADN, StandardFieldArray } from '../../../../schema/interface';\nimport { useAppSelector } from '../../../../../../reducers';\nimport { opts2obj } from 'components/create/schema/structure/editors/options/consts';\n\n// Interface\ninterface DerivedEnumProps {\n    def: StandardFieldArray;\n    optChange: (n: string, v: any) => void;\n    parent?: string;\n    config: InfoConfig;\n    children?: JSX.Element;\n    value: any;\n}\n\n// Component\nconst DerivedEnum = (props: DerivedEnumProps) => {\n    const { def, optChange, parent, children, config, value = {} } = props;\n    const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN;\n\n    const onChange = (_k: string, v: any) => {\n        optChange(name, v);\n    }\n\n    const [_idx, name, type, _args, comment] = def;\n    const msgName = (parent ? [parent, name] : [name]).join('.');\n    var optData: Record<string, any> = {};\n\n    const typeDefs = schema.types.filter(t => t[0] === type);\n    const typeDef = typeDefs.length === 1 ? typeDefs[0] : [];\n    if (typeDef.length != 0) {\n        optData = (opts2obj(typeDef[2]));\n    }\n\n    let fieldDef = [0, typeDef[0], typeDef[0], typeDef[2], typeDef[3]];\n\n    return (\n        <div className='form-group'>\n            <div className='card'>\n                <div className={`card-header p-2 ${children ? 'd-flex justify-content-between' : ''}`}>\n                    <div>\n                        <p className='card-title m-0'>{`${name}${isOptional(def) ? '' : '*'}`}</p>\n                        {comment ? <small className='card-subtitle form-text text-muted text-wrap'>{comment}</small> : ''}\n                    </div>\n                    {children}\n                </div>\n                <div className='card-body m-0 p-0'>\n                    <Field key={fieldDef[0]} def={fieldDef} parent={msgName} optChange={onChange} config={config} value={value} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default DerivedEnum;\n","import React from 'react';\nimport {\n  BasicField, EnumeratedField, ChoiceField, RecordField, MapField, ArrayOfField, ArrayField, MapOfField\n} from './types/Types';\nimport {\n  InfoConfig,\n  SchemaJADN, StandardFieldArray\n} from '../../../schema/interface';\nimport { useAppSelector } from '../../../../../reducers';\nimport { opts2obj } from 'components/create/schema/structure/editors/options/consts';\nimport { hasProperty } from 'components/utils';\nimport LinkField from './types/linkField';\nimport DerivedEnum from './types/derivedEnum';\n\n// Interfaces\ninterface FieldProps {\n  def: StandardFieldArray;\n  optChange: (k: string, v: any, i?: number) => void;\n  idx?: number;\n  parent?: string;\n  config: InfoConfig;\n  children?: JSX.Element;\n  value: any;\n  isDir?: Boolean;\n}\n\n// Component\nconst Field = (props: FieldProps) => {\n  const schema = useAppSelector((state) => state.Util.selectedSchema) as SchemaJADN\n  const { def, idx, optChange, parent, config, children, value, isDir } = props;\n  const [_idx, name, type, opts, _comment] = def;\n\n  const parentName = parent || '';\n  const typeDefs = schema.types ? schema.types.filter(t => t[0] === type) : [];\n  var typeDef = typeDefs.length === 1 ? typeDefs[0][1] : type; //find type otherwise, type is JADN type\n  const args = {\n    def,\n    parent: parentName,\n    config,\n    children,\n    value,\n    isDir,\n    optChange: (k: string, v: any) => optChange(k, v, idx)\n  };\n\n  //Circular Dependency Check: Create Primitive Field\n  if (name && parent && parent.split('.')[parent.split('.').length - 2] == name) {\n    return <BasicField {...args} />;\n  }\n\n  //Link Check\n  if (opts) {\n    const foptData = (opts2obj(opts));\n    if (hasProperty(foptData, 'link')) {\n      return <LinkField {...args} />;\n    }\n    if (hasProperty(foptData, 'dir')) {\n      return <DerivedEnum {...args} />\n    }\n  }\n\n  switch (typeDef) {\n    case 'Enumerated':\n      return <EnumeratedField {...args} />;\n    case 'Choice':\n      return <ChoiceField {...args} />;\n    case 'Record':\n      return <RecordField {...args} />;\n    case 'Map':\n      return <MapField {...args} />;\n    case 'MapOf':\n      return <MapOfField {...args} />;\n    case 'ArrayOf':\n      return <ArrayOfField {...args} />;\n    case 'Array':\n      return <ArrayField {...args} />;\n    default:\n      return <BasicField {...args} />;\n  }\n}\n\nexport default Field;\n\n","import React, { useState } from 'react'\nimport { getSelectedSchema } from 'reducers/util'\nimport { useSelector } from 'react-redux'\nimport { Field, delMultiKey, setMultiKey } from './lib/GenMsgLib'\nimport { StandardFieldArray } from '../schema/interface'\nimport { $FIELDNAME, $MAX_BINARY, $MAX_ELEMENTS, $MAX_STRING, $NSID, $SYS, $TYPENAME } from '../consts'\nimport { LANG_JSON } from 'components/utils/constants'\nimport SBCopyToClipboard from 'components/common/SBCopyToClipboard'\nimport SBEditor from 'components/common/SBEditor'\nimport SBSaveFile from 'components/common/SBSaveFile'\nimport SBSelect, { Option } from 'components/common/SBSelect'\nimport SBScrollToTop from 'components/common/SBScrollToTop'\nimport SBDownloadBtn from 'components/common/SBDownloadBtn'\n\nconst MessageCreator = (props: any) => {\n    const { generatedMessage, setGeneratedMessage, commandType, setCommandType } = props\n    const [activeView, setActiveView] = useState('creator');\n    const [configOpt, setConfigOpt] = useState({\n        $MaxBinary: $MAX_BINARY,\n        $MaxString: $MAX_STRING,\n        $MaxElements: $MAX_ELEMENTS,\n        $Sys: $SYS,\n        $TypeName: $TYPENAME,\n        $FieldName: $FIELDNAME,\n        $NSID: $NSID\n    })\n\n    let schemaObj = useSelector(getSelectedSchema);\n    const exportRecords = schemaObj.info ? schemaObj.info && schemaObj.info.exports : [];\n    const recordDefs = schemaObj.types ? schemaObj.types.filter((t: any) => t[0] === commandType?.value) : [];\n\n    //set configuration data\n    const configDefs = schemaObj.info && schemaObj.info.config ? schemaObj.info.config : [];\n    if (configDefs) {\n        for (const [key, value] of Object.entries(configDefs)) {\n            if (key in configOpt && configOpt[key] != value && value != '') {\n                setConfigOpt({\n                    ...configOpt,\n                    [key]: value\n                })\n            }\n        }\n    }\n\n    const handleSelection = (e: Option) => {\n        setCommandType(e);\n        setGeneratedMessage({});\n    }\n\n    const optChange = (k: string, v: any) => {\n        const keys = k.split('.');\n\n        if (v) {\n            setMultiKey(generatedMessage, k.toString(), v);\n        } else {\n            delMultiKey(generatedMessage, k.toString());\n            if (keys.length > 1 && generatedMessage[keys[0]] && !generatedMessage[keys[0]][keys[1]]) {\n                delMultiKey(generatedMessage, keys[0].toString());\n            }\n        }\n\n        setGeneratedMessage(generatedMessage);\n    }\n\n    const recordDef = recordDefs.length === 1 ? recordDefs[0] : [];\n    let commandFields: null | JSX.Element = null;\n\n   // if (recordDef.length > 1 && recordDef[recordDef.length - 2].length > 0) {\n    //    commandFields = (\n    //        <small id=\"exportHelpBlock\" className=\"form-text text-muted\">\n   //             <b>Comment: </b>\n     //           {recordDef[recordDef.length - 2]}\n   //         </small>\n  //      );\n  //  }\n\n    let fieldDefs: null | JSX.Element | JSX.Element[] = null;\n    if (commandType?.value) {\n        //TODO: add value={} --> This is for uploading preloaded messages.\n        if (Array.isArray(recordDef[recordDef.length - 1]) && recordDef[recordDef.length - 1].length != 0) {\n            if (recordDef[1] && recordDef[1].toLowerCase() != 'choice' && recordDef[1].toLowerCase() != 'enumerated') { //check not choice or enum type\n                const fields = recordDef[recordDef.length - 1] as Array<StandardFieldArray>;\n                fieldDefs = fields.map(def => <Field key={`${def[0]}-${def[1]}`} def={def} optChange={optChange} config={configOpt} />);\n            } else if (recordDef[1] && recordDef[1].toLowerCase() == 'choice' || recordDef[1].toLowerCase() == 'enumerated') {\n                const field = [0, recordDef[0], recordDef[0], recordDef[2], recordDef[3], recordDef[4]];\n                fieldDefs = <Field key={field[0]} def={field} optChange={optChange} config={configOpt} />;\n            }\n        } else { //baseType = Primitive type, ArrayOf , MapOf --- convert TypeArray to FieldArray\n            const field = [0, recordDef[0], recordDef[1], recordDef[2], recordDef[3], recordDef[4]];\n            fieldDefs = <Field key={field[0]} def={field} optChange={optChange} config={configOpt} />;\n        }\n    } else {\n        fieldDefs = (\n            <small id=\"msgGenHelpBlock\" className=\"form-text text-muted\">\n                Data generator will appear here after selecting a data type\n                &nbsp;\n                {commandType?.value}\n            </small>\n        );\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <div className='row no-gutters'>\n                    <div className='col-md-6 align-self-center'>\n                        <div className=\"d-flex\">\n                            <SBSelect id={\"command-list\"}\n                                data={exportRecords}\n                                onChange={handleSelection}\n                                placeholder={'Select a data type...'}\n                                value={commandType}\n                                isSmStyle\n                                isClearable\n                                customNoOptionMsg={Object.keys(schemaObj).length != 0 ? 'Schema is missing Exports' : 'Select a schema to begin'}\n                            />\n                            <SBSaveFile buttonId={'saveMessage'} toolTip={'Save Message'} data={generatedMessage} loc={'messages'} customClass={\"float-end ms-1\"} ext={LANG_JSON} />\n                        </div>\n                    </div>\n                    <div className='col align-self-center'>\n                        <SBCopyToClipboard buttonId={'copyMessage'} data={generatedMessage} customClass='float-end' shouldStringify={true} />\n                        <SBDownloadBtn buttonId='msgDownload' customClass='float-end me-1' data={JSON.stringify(generatedMessage, null, 2)} ext={LANG_JSON} />\n\n                        <button type='button' onClick={() => setActiveView('message')} className={`btn btn-primary float-end btn-sm me-1 ${activeView == 'message' ? ' d-none' : ''}`} >View JSON</button>\n                        <button type='button' onClick={() => setActiveView('creator')} className={`btn btn-primary float-end btn-sm me-1 ${activeView == 'creator' ? ' d-none' : ''}`} >View Creator</button>\n                    </div>\n                </div>\n            </div>\n            <div className='card-body-page' id=\"message-editor\">\n                <div className='tab-content mb-2'>\n                    <div className={`container-fluid tab-pane fade ps-2 pe-2 ${activeView == 'creator' ? 'show active' : ''}`} id=\"info\" role=\"tabpanel\" aria-labelledby=\"info-tab\" tabIndex={0}>\n                        <div id='command-fields'>\n                            {commandFields}\n                            <div id=\"fieldDefs\">\n                                {fieldDefs}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className={`tab-pane fade ${activeView == 'message' ? 'show active' : ''}`} id=\"message\" role=\"tabpanel\" aria-labelledby=\"message-tab\" tabIndex={0}>\n                        <SBEditor data={generatedMessage} isReadOnly={true}></SBEditor>\n                    </div>\n                    <SBScrollToTop divID='message-editor' />\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default MessageCreator ","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Helmet } from 'react-helmet-async'\nimport MessageCreator from './MessageCreator'\nimport { getPageTitle } from 'reducers/util'\nimport { info, setSchema } from 'actions/util'\nimport SchemaLoader from 'components/common/SchemaLoader'\nimport { dismissAllToast } from 'components/common/SBToast'\nimport { Option } from 'components/common/SBSelect'\n\n\nconst MessageGenerator = () => {\n    const dispatch = useDispatch()\n\n    const [selectedFile, setSelectedFile] = useState<Option | null>(null);\n    const [schemaFormat, setSchemaFormat] = useState<Option | null>(null);\n    const [loadedSchema, setLoadedSchema] = useState<object | null>(null);\n    const [generatedMessage, setGeneratedMessage] = useState({});\n    const [commandType, setCommandType] = useState<Option | null>();\n\n    const meta_title = useSelector(getPageTitle) + ' | Data Creation'\n    const meta_canonical = `${window.location.origin}${window.location.pathname}`;\n    useEffect(() => {\n        dispatch(info());\n        dismissAllToast();\n    }, [dispatch])\n\n    useEffect(() => {\n        setCommandType(null);\n        setGeneratedMessage({});\n        dispatch(setSchema(loadedSchema));\n    }, [loadedSchema])\n\n    const onReset = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        dismissAllToast();\n        setSelectedFile(null);\n        setLoadedSchema(null);\n        setCommandType(null);\n        setGeneratedMessage({});\n        dispatch(setSchema(null));\n    }\n\n    return (\n        <div>\n            <Helmet>\n                <title>{meta_title}</title>\n                <link rel=\"canonical\" href={meta_canonical} />\n            </Helmet>\n            <div className='row'>\n                <div className='col-md-12'>\n                    <div className='card'>\n                        <div className='card-header bg-secondary p-2'>\n                            <h5 className='m-0' style={{ display: 'inline' }}><span className='align-middle'>Data Creation</span></h5>\n                            <button type='reset' className='btn btn-sm btn-danger float-end ms-1' onClick={onReset}>Reset</button>\n                        </div>\n                        <div className='card-body p-2'>\n                            <div className='row'>\n                                <div className='col-md-6 pr-1'>\n                                    <SchemaLoader\n                                        selectedFile={selectedFile} setSelectedFile={setSelectedFile}\n                                        schemaFormat={schemaFormat} setSchemaFormat={setSchemaFormat}\n                                        loadedSchema={loadedSchema} setLoadedSchema={setLoadedSchema} />\n                                </div>\n                                <div className='col-md-6 pl-1'>\n                                    <MessageCreator\n                                        generatedMessage={generatedMessage} setGeneratedMessage={setGeneratedMessage}\n                                        commandType={commandType} setCommandType={setCommandType} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\nexport default MessageGenerator "],"names":["props","ext","data","customClass","handleFormatClick","React","_jsx","id","type","className","onClick","e","preventDefault","dataObj","JSON","parse","LANG_JADN","FormatJADN","_unused","sbToastError","title","_FontAwesomeIcon","FontAwesomeIcon","icon","faIndent","dispatch","useDispatch","selectedFile","setSelectedFile","loadedSchema","setLoadedSchema","decodeMsg","setDecodeMsg","setDecodeSchemaTypes","acceptFormat","schemaFormat","setSchemaFormat","_useState","useState","_useState2","_slicedToArray","isValid","setIsValid","_useState3","_useState4","isValidating","setIsValidating","_useState5","_useState6","isLoading","setIsLoading","_useState7","name","_useState8","fileName","setFileName","schemaOpts","useSelector","getAllSchemas","validSchemaFormatOpt","getSchemaConversions","ref","useRef","useEffect","value","label","info","loadDecodeTypes","schemaObj","decodeTypes","all","exports","msgDecode","undefined","types","map","def","filter","dt","includes","sort","length","onFileLoad","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","fileStr","_fileName","_context","prev","next","getFilenameOnly","getFilenameExt","validateSchema","then","validateSchemaVal","payload","valid_bool","setSchema","sbToastSuccess","valid_msg","validateSchemaErr","err","Error","message","stop","_x","_x2","apply","arguments","SBFileLoader","opts","selectedOpt","loadedFileData","fileExt","onCancelFileUpload","dismissAllToast","current","onFileChange","acceptableExt","placeholder","loc","isSaveable","SBSelect","onChange","isSmStyle","isClearable","_SBSpinner","SBSpinner","action","color","SBValidateSchemaBtn","schemaData","SBCopyToClipboard","buttonId","SBFormatBtn","formattedSchema","_SBSpinner2","isDiv","SBEditor","_unused2","isOptional","console","log","concat","validateOptDataElem","config","optData","formatCheck","m","validateArrayFormat","format","push","hasProperty","unique","set","Array","from","Set","Object","values","minv","$MINV","maxv","$MaxElements","validateOptDataStr","$MaxString","RegExp","pattern","test","validateStringFormat","regex","exec","validateOptDataNum","validateNumericFormat","minf","maxf","validateOptDataBinary","_optData$format","binaryType","isFormatted","validateBinaryFormat","match","split","$MaxBinary","Buffer","byteLength","parseInt","n","substring","Math","pow","dataType","arr","optChange","parent","children","_props$value","_def","idx","comment","msgName","join","setData","schema","useAppSelector","state","Util","selectedSchema","typeDefs","t","typeDef","opts2obj","toLowerCase","errMsg","setErrMsg","msg","index","style","Field","FormattedField","basicProps","htmlFor","checked","target","borderColor","onBlur","encoded","toString","errCheck","onWheel","blur","step","onKeyDown","key","selectedValue","setSelectedValue","defOpts","_typeDef2","opt","_typeDef4","pointer","optCount","fieldOptData","dir","_pointerDef","pointerDefs","pointerDef","fieldOpt","_typeDef5","_typeDef","selectedOpts","_typeof","keys","entries","_ref2","initSelectedOpt","InitSelectedValues","initSelectedOptValue","selectedValueData","setSelectedValueData","isArray","selectedDefs","selectedDef","k","v","updatedData","_defineProperty","toggle","setToggle","_objectSpread","faCircleChevronUp","faCircleChevronDown","validMsg","fieldDef","d","_div","SBToggleBtn","args","setOpts","MAX_COUNT","MIN_COUNT","count","setCount","min","setMin","max","setMax","_useState9","_useState10","_useState11","_useState12","i","Number","isNaN","updatedOpts","arrKeys","valKeys","nestedKeys","slice","nestedObj","reduce","obj","oldV","merge","_toConsumableArray","filteredOpts","updatedOptArr","vtype","startsWith","arrDefs","arrDef","fields","self","crypto","randomUUID","removedIndex","_opt","removeOpt","faMinusSquare","size","_FontAwesomeIcon2","faPlusSquare","uuidOnClick","uuid4","ipValue","setIpValue","ipvNetOnchg","newArr","newValue","dayjs","_span","_span2","toUpperCase","SBUUIDv4Btn","generatedUUID","_k","updatedArr","field","kopts","setkOpts","vopts","setvOpts","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","toggleField","setToggleField","keyDef","keyField","valDef","valField","onChangeKey","ktype","updatedVal","setMultiKey","delMultiKey","onChangeValue","ktypeDefs","ktypeDef","assign","val","keyDefs","valDefs","item","_Field","linkField","_step","_iterator","_createForOfIteratorHelper","s","done","_field","_fidx","_ftype","fopts","newField","foptData","f","isDir","parentName","BasicField","LinkField","DerivedEnum","EnumeratedField","ChoiceField","RecordField","MapField","MapOfField","ArrayOfField","ArrayField","generatedMessage","setGeneratedMessage","commandType","setCommandType","activeView","setActiveView","$MAX_BINARY","$MAX_STRING","$MAX_ELEMENTS","$Sys","$SYS","$TypeName","$TYPENAME","$FieldName","$FIELDNAME","$NSID","configOpt","setConfigOpt","getSelectedSchema","exportRecords","recordDefs","configDefs","_i","_Object$entries","_Object$entries$_i","recordDef","fieldDefs","customNoOptionMsg","SBSaveFile","toolTip","LANG_JSON","shouldStringify","SBDownloadBtn","stringify","role","tabIndex","isReadOnly","_SBScrollToTop","SBScrollToTop","divID","meta_title","getPageTitle","meta_canonical","window","location","origin","pathname","Helmet","rel","href","display","SchemaLoader","MessageCreator"],"sourceRoot":""}