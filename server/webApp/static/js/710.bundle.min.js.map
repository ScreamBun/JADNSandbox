{"version":3,"file":"js/710.bundle.min.js","mappings":"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","sources":["webpack://client/./src/components/common/SBCollapseViewer.tsx","webpack://client/./src/components/common/SBDownloadBtn.tsx","webpack://client/./src/components/common/SBDownloadFileBtn.tsx","webpack://client/./src/components/common/SBFileLoader.tsx","webpack://client/./src/components/common/SBSubmitBtn.tsx","webpack://client/./src/components/common/SBValidateSchemaBtn.tsx","webpack://client/./src/components/common/SBFormatBtn.tsx","webpack://client/./src/components/common/SchemaLoader.tsx","webpack://client/./src/components/visualize/SBGvPreviewer.tsx","webpack://client/./src/components/visualize/SBHtmlPreviewer.tsx","webpack://client/./src/components/visualize/SBMarkdownPreviewer.tsx","webpack://client/./src/components/visualize/SBPumlPreviewer.tsx","webpack://client/./src/components/visualize/SchemaVisualized.tsx","webpack://client/./src/components/visualize/SchemaVisualizer.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport SBCopyToClipboard from \"./SBCopyToClipboard\";\nimport SBEditor from \"./SBEditor\";\nimport { faWindowMaximize } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { FILE_TYPE_PDF, FILE_TYPE_PNG, FILE_TYPE_SVG, LANG_GRAPHVIZ, LANG_HTML, LANG_JIDL, LANG_MARKDOWN, LANG_PLANTUML, LANG_XSD } from \"components/utils/constants\";\nimport { convertToGvFullView, onGVPopOutClick } from \"../visualize/SBGvPreviewer\";\nimport { onHTMLPopOutClick } from \"../visualize/SBHtmlPreviewer\";\nimport { onMDPopOutClick } from \"../visualize/SBMarkdownPreviewer\";\nimport { convertToPuml } from \"../visualize/SBPumlPreviewer\";\nimport SBDownloadBtn from \"./SBDownloadBtn\";\nimport { sbToastError } from \"./SBToast\";\nimport SBDownloadFileBtn from \"./SBDownloadFileBtn\";\n\n//given a list of data\n//toggle each view\n//allow user to download or copy to clipboard\nconst SBCollapseViewer = (props: any) => {\n    const { data, pumlURL, setPumlURL, loadedSchema } = props;\n    const [toggle, setToggle] = useState<{ [key: string]: boolean }>({});\n\n    useEffect(() => {\n        for (const obj of data) {\n            if (obj.fmt_ext == LANG_PLANTUML) {\n                setPumlURL(convertToPuml(obj.schema));\n            }\n            if (obj.fmt_ext == LANG_GRAPHVIZ) {\n                convertToGvFullView(obj.schema);\n            }\n        }\n    }, [data]);\n\n    const onToggle = (index: number) => {\n        setToggle((prev) => ({ ...prev, [index]: !prev[index] }));\n    }\n\n    const onPopOutClick = (data: any, url: string = \"\") => {\n        try {\n            var newWindow = window.open(url);\n            if (data) {\n                newWindow?.document.write('<html><body><pre>' + data + '</pre></body></html>');\n            }\n        } catch {\n            sbToastError('Error: Unable to open data in pop out.');\n        }\n    }\n\n    const listData = data.map((obj: any, i: number) => {\n        return (\n            obj.err == false && <div className=\"card\" key={i}>\n                <div className=\"card-header\">\n                    <h5 className=\"mb-0 align-self-center\">\n                        <button id={`toggleMsg#${i}`} type=\"button\" className=\"btn btn-link\" onClick={() => onToggle(i)} >\n                            {obj.fmt}\n                        </button>\n                        <SBCopyToClipboard buttonId={`copy${i}`} data={obj.schema} customClass='float-end' />\n                        <SBDownloadBtn buttonId={`download${i}`} customClass='me-1 float-end' data={obj.schema} ext={obj.fmt_ext} />\n\n                        {obj.fmt_ext == LANG_XSD &&\n                            <>\n                                <SBDownloadFileBtn buttonId='jadnBaseTypesDownload' buttonTitle='Download JADN Base Types Schema' fileName='jadn_base_types.xsd' customClass={`me-1 float-end`}></SBDownloadFileBtn>\n                            </>\n                        }\n\n                        {obj.fmt_ext == LANG_HTML &&\n                            <>\n                                <SBDownloadBtn buttonId={`download${i}AsHTML`} customClass='me-1 float-end' data={loadedSchema} ext={FILE_TYPE_PDF} />\n                                <button id=\"htmlPopOut\" type='button' title=\"View Schema in new window\" className=\"btn btn-sm btn-primary me-1 float-end\" onClick={() => onHTMLPopOutClick(obj.schema)}>\n                                    <FontAwesomeIcon icon={faWindowMaximize} />\n                                </button>\n                            </>\n                        }\n\n                        {obj.fmt_ext == LANG_MARKDOWN &&\n                            <>\n                                <SBDownloadBtn buttonId={`download${i}AsMD`} customClass='me-1 float-end' data={loadedSchema} ext={FILE_TYPE_PDF} />\n                                <button id=\"mdPopOut\" type='button' title=\"View Schema in new window\" className=\"btn btn-sm btn-primary me-1 float-end\" onClick={() => onMDPopOutClick(obj.schema)}>\n                                    <FontAwesomeIcon icon={faWindowMaximize} />\n                                </button>\n                            </>\n                        }\n\n                        {obj.fmt_ext == LANG_JIDL &&\n                            <>\n                                <button id=\"jidlPopOut\" type='button' title=\"View Schema in new window\" className=\"btn btn-sm btn-primary me-1 float-end\" onClick={() => onPopOutClick(obj.schema)}>\n                                    <FontAwesomeIcon icon={faWindowMaximize} />\n                                </button>\n                            </>\n                        }\n\n                        {obj.fmt_ext == LANG_PLANTUML &&\n                            <>\n                                <SBDownloadBtn buttonId={`pumlPngDownload`} customClass='me-1 float-end' data={pumlURL} ext={FILE_TYPE_PNG} />\n                                <button id=\"pumlPopOut\" type='button' title=\"View Schema in new window\" className=\"btn btn-sm btn-primary me-1 float-end\" onClick={() => onPopOutClick('', pumlURL)}>\n                                    <FontAwesomeIcon icon={faWindowMaximize} />\n                                </button>\n                            </>\n                        }\n\n                        {obj.fmt_ext == LANG_GRAPHVIZ &&\n                            <>\n                                <SBDownloadBtn buttonId={`gvSvgDownload`} customClass='me-1 float-end' ext={FILE_TYPE_SVG} />\n                                <button id=\"gvPopOut\" type='button' title=\"View Schema in new window\" className=\"btn btn-sm btn-primary me-1 float-end\" onClick={onGVPopOutClick}>\n                                    <FontAwesomeIcon icon={faWindowMaximize} />\n                                </button>\n                            </>\n                        }\n\n                    </h5>\n                </div>\n\n                {toggle[i] == true ?\n                    <div className=\"card-body\" key={i}>\n                        <SBEditor data={obj.schema} isReadOnly={true} height={'35vh'}></SBEditor>\n                    </div>\n                    : ''}\n            </div>\n        );\n    });\n\n    return (\n        <div className='card-body-page'>\n            {listData}\n            <div id=\"fullGV\" style={{ visibility: 'hidden', overflow: 'hidden' }}></div>\n        </div>\n    );\n}\n\nexport default SBCollapseViewer;","import React, { useState } from \"react\";\nimport { faFileDownload, faFileImage, faFilePdf } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { sbToastError, sbToastSuccess, sbToastWarning } from \"./SBToast\";\nimport SBSpinner from \"./SBSpinner\";\nimport { FormatJADN } from \"components/utils\";\nimport saveAs from \"file-saver\";\nimport { FILENAME_RULE, FILE_TYPE_PDF, FILE_TYPE_PNG, FILE_TYPE_SVG, LANG_JADN } from \"components/utils/constants\";\n\nexport const onDownloadPNGClick = (pumlURL: any, filename: string = \"plantuml\") => {\n    saveAs(pumlURL, `${filename}.png`);\n}\n\nexport const onDownloadSVGClick = (e: React.MouseEvent<HTMLButtonElement>, filename: string = \"graphviz\") => {\n    e.preventDefault();\n    const svg = document.getElementById(\"fullGV\")?.innerHTML;\n    if (svg) {\n        var blob = new Blob([svg], { type: \"image/svg+xml\" });\n        saveAs(blob, `${filename}.svg`);\n    } else {\n        sbToastError('Error: Unable to download GraphViz file.')\n    }\n}\n//TODO: Add ability to save in other extensions ? \nconst SBDownloadBtn = (props: any) => {\n\n    const { buttonId, data, customClass, filename, ext = LANG_JADN } = props;\n\n    const [fileNameInput, setFileNameInput] = useState(filename);\n    const [toggleDownloadDialog, setToggleDownloadDialog] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setFileNameInput(e.target.value);\n    }\n\n    const onDownloadIconClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        setToggleDownloadDialog(true);\n    }\n\n    const onDownloadFileClick = (e: React.MouseEvent<HTMLButtonElement>, fmt: string) => {\n        e.preventDefault();\n        if (!data) {\n            sbToastError('No data to download');\n            return;\n        }\n\n        setIsLoading(true);\n        try {\n            const filename = `${fileNameInput}.${fmt}`;\n            let formattedData = typeof data == \"object\" ? FormatJADN(data) : data;\n\n            const blob = new Blob([formattedData], { type: \"application/json\" });\n            //content: `data:application/json;charset=utf-8,${encodeURIComponent(FormatJADN(prevState.schema))}`\n            const elem = document.createElement('a');\n            elem.href = URL.createObjectURL(blob);\n            elem.download = filename;\n            document.body.appendChild(elem);\n            elem.click();\n\n            // To make this work on Firefox we need to wait\n            // a little while before removing it.\n            setTimeout(() => {\n                elem.remove();\n                URL.revokeObjectURL(elem.href);\n            }, 0);\n            sbToastSuccess('File downloaded')\n\n        } catch (err) {\n            console.log(err);\n            sbToastError(`File cannot be downloaded`);\n        }\n    }\n\n    const onDownloadPDFClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        const filename = `${fileNameInput}.pdf`;\n        setIsLoading(true);\n        try {\n            fetch('/api/convert/pdf', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    schema: data\n                })\n            }).then(\n                rsp => rsp.blob()\n            ).then(blob => {\n                const elem = document.createElement('a');\n                elem.href = URL.createObjectURL(blob);\n                elem.download = filename;\n                document.body.appendChild(elem);\n                elem.click();\n\n                elem.remove();\n                URL.revokeObjectURL(elem.href);\n            }).catch(err => {\n                console.log(err);\n                sbToastError(`PDF cannot be downloaded`);\n            });\n\n        } catch (err) {\n            console.log(err);\n            sbToastError(`PDF cannot be downloaded`);\n        }\n\n        sbToastSuccess('PDF downloaded successfully');\n    }\n\n\n    let icon;\n    if (ext == FILE_TYPE_PDF) {\n        icon = <FontAwesomeIcon icon={faFilePdf} />;\n    } else if (ext == FILE_TYPE_SVG || ext == FILE_TYPE_PNG) {\n        icon = <FontAwesomeIcon icon={faFileImage} />;\n    } else {\n        icon = <FontAwesomeIcon icon={faFileDownload} />;\n    }\n\n\n    const onDownloadClick = (e: React.MouseEvent<HTMLButtonElement>, fmt: string) => {\n        e.preventDefault();\n        if (fileNameInput == '' || fileNameInput == undefined) {\n            sbToastWarning('Please enter a file name.');\n            return;\n        } else if (!FILENAME_RULE.test(fileNameInput)) {\n            sbToastWarning(\"Please do not use special characters in file name.\");\n            return;\n        }\n\n        switch (fmt) {\n            case FILE_TYPE_PDF:\n                onDownloadPDFClick(e);\n                break;\n            case FILE_TYPE_SVG:\n                onDownloadSVGClick(e, fileNameInput);\n                break;\n            case FILE_TYPE_PNG:\n                onDownloadPNGClick(data, fileNameInput);\n                break;\n            default:\n                //jadn, json, html, md, gv, puml, jidl\n                onDownloadFileClick(e, ext);\n        }\n\n        setIsLoading(false);\n        setToggleDownloadDialog(false);\n    }\n\n    return (\n        <>\n            {isLoading ? <SBSpinner color={\"primary\"} /> :\n                <button id={buttonId || 'downloadBtn'} type='button' title={`Download ${ext} File`} className={'btn btn-sm btn-primary ' + customClass} onClick={onDownloadIconClick}>\n                    {icon}\n                </button>}\n\n            <div id=\"downloadFileModal\" className={`modal fade ${toggleDownloadDialog ? 'show d-block' : 'd-none'}`} tabIndex={-1} role='dialog'>\n                <div className={`modal-dialog modal-dialog-centered`} role='document'>\n                    <div className='modal-content'>\n                        <div className=\"modal-header\">\n                            <div className=\"form col\">\n                                <div className=\"form row\">\n                                    <h5 className='modal-title'>\n                                        Download As...\n                                    </h5>\n                                </div>\n                                <div className=\"form row\">\n                                    <small className=\"text-muted\"> {`Download file to local computer`}</small>\n                                </div>\n                            </div>\n                            <button type='button' className='btn-close' data-bs-dismiss='modal' aria-label='Close' title='Close' onClick={() => setToggleDownloadDialog(false)} />\n                        </div>\n                        <div className=\"modal-body\">\n                            <div className=\"row\">\n                                <label htmlFor=\"filenameDownload\" className=\"col-sm-4 col-label\">File name:</label>\n                                <div className=\"col-sm-8\">\n                                    <input id='filenameDownload' className=\"form-control\" type=\"text\" autoFocus={true} value={fileNameInput} onChange={onChange} />\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <label htmlFor=\"downloadFileAsType\" className=\"col-sm-4 col-label\">Save as type:</label>\n                                <div className=\"col-sm-8\">\n                                    <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"downloadFileAsType\" value={ext} />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type='button' className='btn btn-sm btn-success' onClick={(e) => onDownloadClick(e, ext)}>Download</button>\n                            <button type='button' className='btn btn-sm btn-secondary' onClick={() => { setIsLoading(false); setToggleDownloadDialog(false); }}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n                <div className={`modal-backdrop fade ${toggleDownloadDialog ? 'show' : ''}`} style={{\n                    zIndex: -1\n                }}>\n                </div>\n            </div>\n        </>\n    )\n}\nexport default SBDownloadBtn;","import React, { useState } from \"react\";\nimport SBSpinner from \"./SBSpinner\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFileCode } from \"@fortawesome/free-solid-svg-icons\";\nimport { sbToastError, sbToastSuccess } from \"./SBToast\";\n\nconst SBDownloadFileBtn = (props: any) => {\n\n    const { buttonId, customClass, isDisabled, buttonTitle, fileName } = props;\n    const [isLoading, setIsLoading] = useState(false);\n\n    const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        setIsLoading(true);\n\n        try {\n            fetch('/api/convert/download_xml', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    'filename': fileName\n                })\n\n            }).then(response => response.blob())\n            .then(data => {\n\n                const blobUrl = URL.createObjectURL(data);\n                const link = document.createElement(\"a\");\n                link.href = blobUrl;\n                link.download = fileName;                \n                document.body.appendChild(link);\n\n                link.dispatchEvent(\n                    new MouseEvent('click', { \n                      bubbles: true, \n                      cancelable: true, \n                      view: window \n                    })\n                  );   \n                  \n                document.body.removeChild(link);\n\n                sbToastSuccess(`${fileName} downloaded`);\n            }).catch(err => {\n                console.log(err);\n                sbToastError(`${fileName} cannot be downloaded`);\n            }).finally(()=>{\n                setIsLoading(false);\n            });\n\n        } catch (err) {\n            console.log(err);\n            sbToastError(`${fileName} cannot be downloaded`);\n        }\n\n    }\n\n    return (\n        <>\n            {isLoading ? <SBSpinner color={\"primary\"} /> :\n                <button \n                    id={buttonId || 'downloadFileBtn'} \n                    type={'button'} \n                    title={buttonTitle || \"Download File\"} \n                    className={'btn btn-sm btn-primary border-0 ' + customClass} \n                    disabled={isDisabled}\n                    onClick={onClick}>\n                    <FontAwesomeIcon icon={faFileCode} />\n                </button>\n            }\n        </>\n    )\n}\nexport default SBDownloadFileBtn;","import React, { forwardRef } from \"react\";\nimport SBSaveFile from \"./SBSaveFile\";\nimport SBSelect, { Option } from \"./SBSelect\";\nimport { useDispatch } from \"react-redux\";\nimport { loadFile } from \"actions/util\";\nimport { sbToastError } from \"./SBToast\";\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { LANG_JADN } from \"components/utils/constants\";\n\ninterface SBFileLoaderProps {\n    customClass?: string;\n    opts: any[];\n    selectedOpt: Option | null;\n    setSelectedFile?: (fileOpt: Option | null) => void;\n    placeholder: string;\n    loc: 'schemas' | 'messages';\n    onCancelFileUpload: (e: React.MouseEvent<HTMLButtonElement> | React.ChangeEvent<HTMLInputElement> | null) => void;\n    onFileChange: (fileData?: string | ArrayBuffer | null, fileName?: Option | undefined) => void;\n    acceptableExt?: string | undefined;\n    isSaveable?: boolean;\n    loadedFileData?: any;\n    fileName?: {\n        name: string,\n        ext: string\n    };\n    fileExt?: string;\n}\n\nconst SBFileLoader = forwardRef(function SBLoadSchema(props: SBFileLoaderProps, ref) {\n    const dispatch = useDispatch();\n    const { customClass, opts, selectedOpt, loadedFileData,\n        setSelectedFile, placeholder, loc,\n        acceptableExt, onCancelFileUpload, onFileChange,\n        isSaveable, fileName, fileExt = LANG_JADN } = props;\n\n    const handleFileSelect = (e: Option) => {\n        if (e == null) {\n            onCancelFileUpload(null);\n            return;\n\n        } else if (e.value == \"file\") {\n            ref.current.value = '';\n            ref.current?.click();\n\n        } else {\n            dispatch(loadFile(loc, e.value))\n                .then(async (loadFileVal) => {\n                    if (loadFileVal.error) {\n                        sbToastError(loadFileVal.payload.response);\n                        return;\n                    }\n                    let dataObj = loadFileVal.payload.data;\n                    onFileChange(dataObj, e);\n                })\n                .catch((loadFileErr) => {\n                    sbToastError(loadFileErr.payload.data);\n                    onFileChange();\n                })\n        }\n    };\n\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        if (e.target.files && e.target.files.length != 0) {\n            const file = e.target.files[0];\n            const fileReader = new FileReader();\n            fileReader.onload = (ev: ProgressEvent<FileReader>) => {\n                if (ev.target) {\n                    let dataStr = ev.target.result;\n                    onFileChange(dataStr, { value: file.name, label: file.name });\n                }\n            };\n            fileReader.readAsText(file);\n        }\n    }\n\n    return (\n        <>\n            <div className={`d-flex + ${customClass}`}>\n                <SBSelect id={\"file-select\"}\n                    data={opts}\n                    onChange={handleFileSelect}\n                    placeholder={placeholder}\n                    loc={loc}\n                    value={selectedOpt}\n                    isGrouped\n                    isFileUploader\n                    isSmStyle\n                    isClearable\n                />\n                {isSaveable && <SBSaveFile buttonId=\"saveFile\" toolTip={'Save as..'} data={loadedFileData} loc={loc} customClass={\"float-end ms-1\"}\n                    filename={fileName?.name} ext={fileExt} setDropdown={setSelectedFile} />}\n            </div>\n            <div className='d-none'>\n                <input type=\"file\" id=\"file-input\" name=\"file-input\" accept={acceptableExt} onChange={handleFileChange} ref={ref} />\n                <button id=\"cancelFileUpload\" type='button' className=\"btn btn-sm btn-secondary ms-0\" onClick={() => onCancelFileUpload} style={{ display: 'inline' }}>\n                    <FontAwesomeIcon icon={faXmark}></FontAwesomeIcon>\n                </button>\n            </div >\n        </>\n    );\n});\n\nexport default SBFileLoader;","import React from \"react\";\nimport SBSpinner from \"./SBSpinner\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SBSubmitBtn = (props: any) => {\n\n    const { buttonId, buttonTxt, customClass, isLoading, isDisabled, buttonTitle, formId } = props;\n\n    return (\n        <>\n            {isLoading ? <SBSpinner color={\"success\"} /> :\n                <button \n                    id={buttonId || 'submitBtn'} \n                    type={'submit'} \n                    form={formId}\n                    title={buttonTitle || \"Submit\"} \n                    className={'btn btn-sm btn-success border-0 hoverSubmit ' + customClass} \n                    disabled={isDisabled}>\n                        <span>{buttonTxt || \"Submit\"}</span>\n                        <FontAwesomeIcon icon={faPaperPlane} />\n                </button>\n            }\n        </>\n    )\n}\nexport default SBSubmitBtn;","import { faCheck, faXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { setSchema } from \"actions/util\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { sbToastSuccess, dismissAllToast, sbToastError } from \"./SBToast\";\nimport { validateSchema } from \"actions/validate\";\nimport { LANG_JADN, LANG_JSON } from \"components/utils/constants\";\n\nconst SBValidateSchemaBtn = (props: any) => {\n\n    const { isValid, setIsValid, setIsValidating, schemaData, schemaFormat, customClass } = props;\n    const dispatch = useDispatch();\n\n    const onValidateClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        dismissAllToast();\n        setIsValid(false);\n\n        if (!schemaData) {\n            sbToastError('Validation Error: No Schema to validate');\n            setIsValidating(false);\n            return;\n        }\n\n        setIsValidating(true);\n\n        let jsonObj = schemaData;\n        if (typeof jsonObj == 'string') {\n            try {\n                jsonObj = JSON.parse(jsonObj);\n            } catch (err: any) {\n                sbToastError(`Invalid JSON: ${err.message}`)\n                setIsValidating(false);\n                return;\n            }\n        }\n\n        if (schemaFormat == LANG_JSON) {\n            validateJSONSchema(jsonObj);\n        } else {\n            validateJADNSchema(jsonObj);\n        }\n\n        setIsValidating(false);\n    }\n\n\n    const validateJADNSchema = (jsonObj: any) => {\n        try {\n            dispatch(validateSchema(jsonObj, LANG_JADN))\n                .then((validateSchemaVal: any) => {\n                    if (validateSchemaVal.payload.valid_bool == true) {\n                        setIsValid(true);\n                        dispatch(setSchema(jsonObj));\n                        sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                    } else {\n                        dispatch(setSchema(null));\n                        sbToastError(validateSchemaVal.payload.valid_msg);\n                    }\n                })\n                .catch((validateSchemaErr) => {\n                    dispatch(setSchema(null));\n                    sbToastError(validateSchemaErr.payload.valid_msg)\n                }).finally(() => {\n                    setIsValidating(false);\n                })\n\n        } catch (err) {\n            if (err instanceof Error) {\n                dispatch(setSchema(null));\n                setIsValidating(false);\n                sbToastError(err.message)\n            }\n        }\n    }\n\n    const validateJSONSchema = (jsonObj: any) => {\n        try {\n            dispatch(validateSchema(jsonObj, LANG_JSON))\n                .then((validateSchemaVal: any) => {\n                    if (validateSchemaVal.payload.valid_bool == true) {\n                        setIsValid(true);\n                        dispatch(setSchema(jsonObj));\n                        sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                    } else {\n                        dispatch(setSchema(null));\n                        sbToastError(validateSchemaVal.payload.valid_msg);\n                    }\n                })\n                .catch((validateSchemaErr) => {\n                    dispatch(setSchema(null));\n                    sbToastError(validateSchemaErr.payload.valid_msg)\n\n                }).finally(() => {\n                    setIsValidating(false);\n                })\n        } catch (err) {\n            if (err instanceof Error) {\n                sbToastError(err.message)\n                setIsValidating(false);\n                sbToastError(err.message)\n            }\n        }\n    }\n\n    return (\n        <>\n            <button id='validateJADNButton' type='button' className={`btn btn-sm btn-primary ms-1 me-1 + ${customClass}`} title={isValid ? \"Schema is valid\" : \"Click to validate Schema\"}\n                onClick={onValidateClick}>\n                <span className=\"m-1\">Valid</span>\n                {isValid ? (\n                    <span className=\"badge rounded-pill text-bg-success\">\n                        <FontAwesomeIcon icon={faCheck} />\n                    </span>) : (\n                    <span className=\"badge rounded-pill text-bg-danger\">\n                        <FontAwesomeIcon icon={faXmark} />\n                    </span>)\n                }\n            </button>\n        </>\n    );\n};\n\nexport default SBValidateSchemaBtn;","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faIndent } from \"@fortawesome/free-solid-svg-icons\";\nimport { LANG_JADN } from \"components/utils/constants\";\nimport { FormatJADN } from \"components/utils\";\nimport { sbToastError } from \"./SBToast\";\n\nconst SBFormatBtn = (props: any) => {\n\n    const { ext, data, customClass, handleFormatClick } = props;\n\n    const onFormatClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        if (!data) {\n            sbToastError('Format Error: No Schema to format');\n            return;\n        }\n\n        try {\n            let dataObj = data;\n            if (typeof data == 'string') {\n                dataObj = JSON.parse(dataObj);\n            }\n\n            if (ext == LANG_JADN) {\n                dataObj = FormatJADN(dataObj);\n            }\n\n            handleFormatClick(dataObj);\n\n        } catch {\n            sbToastError('Failed to format: Invalid JSON')\n            return;\n        }\n    }\n\n    return (\n        <>\n            <button\n                id='formatButton'\n                type='button'\n                className={'btn btn-sm btn-primary ' + customClass}\n                onClick={onFormatClick}\n                title='Format'>\n                <FontAwesomeIcon icon={faIndent} />\n            </button>\n        </>\n    );\n}\n\nexport default SBFormatBtn;","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllSchemas } from \"../../reducers/util\";\nimport { info, setSchema } from \"../../actions/util\";\nimport { getSchemaConversions } from \"reducers/convert\";\nimport { validateSchema } from \"actions/validate\";\nimport { LANG_JADN } from \"components/utils/constants\";\nimport { getFilenameExt, getFilenameOnly } from \"components/utils/general\";\nimport { dismissAllToast, sbToastError, sbToastSuccess } from \"./SBToast\";\nimport SBCopyToClipboard from \"./SBCopyToClipboard\";\nimport SBSelect, { Option } from \"./SBSelect\";\nimport SBSpinner from \"./SBSpinner\";\nimport SBFormatBtn from \"./SBFormatBtn\";\nimport SBEditor from \"./SBEditor\";\nimport SBValidateSchemaBtn from \"./SBValidateSchemaBtn\";\nimport SBFileLoader from \"./SBFileLoader\";\n\n//File Loader Note: User should be able to upload any JSON/JADN schema; \n//It does not need to be syntactically correct since the user can edit the schema in the code editor.\n\ninterface SchemaLoaderProps {\n    selectedFile: Option | null;\n    setSelectedFile: (selectedOpt: Option | null) => void;\n    loadedSchema: object | null;\n    setLoadedSchema: (schema: object | null) => void;\n    decodeMsg?: Option | null;\n    setDecodeMsg?: (msgType: Option | null) => void;\n    setDecodeSchemaTypes?: (obj: {\n        all: string[] | [],\n        exports: string[] | []\n    }) => void;\n    acceptFormat?: string[];\n    schemaFormat: Option | null;\n    setSchemaFormat: (fmtOpt: Option | null) => void;\n}\n\nconst SchemaLoader = (props: SchemaLoaderProps) => {\n    const dispatch = useDispatch();\n\n    const { selectedFile, setSelectedFile, loadedSchema, setLoadedSchema, decodeMsg, setDecodeMsg, setDecodeSchemaTypes, acceptFormat, schemaFormat, setSchemaFormat } = props;\n    const [isValid, setIsValid] = useState(false);\n    const [isValidating, setIsValidating] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [fileName, setFileName] = useState({\n        name: '',\n        ext: LANG_JADN\n    });\n    const schemaOpts = useSelector(getAllSchemas);\n    const validSchemaFormatOpt = useSelector(getSchemaConversions);\n    const ref = useRef<HTMLInputElement | null>(null);\n\n    useEffect(() => {\n        if (fileName.ext) {\n            setSchemaFormat({ value: fileName.ext, label: fileName.ext })\n        }\n    }, [fileName])\n\n    useEffect(() => {\n        if (!loadedSchema) {\n            setIsValid(false);\n            setSelectedFile(null);\n            setSchemaFormat(null);\n        }\n    }, [loadedSchema])\n\n    useEffect(() => {\n        dispatch(info());\n    }, [dispatch])\n\n    const loadDecodeTypes = (schemaObj: any) => {\n        let decodeTypes: { all: any[], exports: any[] } = {\n            all: [],\n            exports: []\n        };\n        let msgDecode = '';\n\n        if (typeof schemaObj == \"string\") {\n            try {\n                schemaObj = JSON.parse(schemaObj);\n            } catch {\n                schemaObj = schemaObj\n            }\n        }\n\n        if (schemaObj.info !== undefined) {\n            if (schemaObj.info.exports !== undefined) {\n                decodeTypes.exports = schemaObj.info.exports;\n            }\n        }\n        if (schemaObj.types !== undefined) {\n            decodeTypes.all = schemaObj.types.map((def: any[]) => def[0]);\n            decodeTypes.all = decodeTypes.all.filter(dt => !decodeTypes.exports.includes(dt));\n            decodeTypes.all.sort();\n        }\n        if (decodeMsg === null || !decodeTypes.all.includes(decodeMsg)) {\n            if (decodeTypes.exports.length >= 1) {\n                msgDecode = decodeTypes.exports[0];\n            } else if (decodeTypes.all.length >= 1) {\n                msgDecode = decodeTypes.all[0];\n            }\n        }\n        setDecodeSchemaTypes(decodeTypes);\n        setDecodeMsg({ value: msgDecode, label: msgDecode });\n    }\n\n    const onFormatClick = (formattedSchema: object) => {\n        if (formattedSchema) {\n            setLoadedSchema(formattedSchema);\n        }\n    }\n\n    const sbEditorOnChange = (data: string) => {\n        dismissAllToast();\n        setIsValid(false);\n        setLoadedSchema(data);\n        dispatch(setSchema(null));\n        try {\n            if (setDecodeSchemaTypes && setDecodeMsg) {\n                loadDecodeTypes(JSON.parse(data));\n            }\n        } catch {\n            return;\n        }\n    }\n\n    const onFileLoad = async (schemaObj?: any, fileStr?: Option) => {\n        setIsValid(false);\n        setIsLoading(true);\n        if (schemaObj && fileStr) {\n            setSelectedFile(fileStr);\n            const fileName = {\n                name: getFilenameOnly(fileStr.label),\n                ext: getFilenameExt(fileStr.label)\n            }\n            setFileName(fileName);\n            setLoadedSchema(schemaObj);\n            try {\n                dispatch(validateSchema(schemaObj, fileName.ext))\n                    .then((validateSchemaVal: any) => {\n                        if (validateSchemaVal.payload.valid_bool == true) {\n                            setIsValid(true);\n                            if (typeof schemaObj == \"string\") {\n                                schemaObj = JSON.parse(schemaObj);\n                            }\n                            dispatch(setSchema(schemaObj));\n                            sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                        } else {\n                            sbToastError(validateSchemaVal.payload.valid_msg);\n                            dispatch(setSchema(null));\n                        }\n                    })\n                    .catch((validateSchemaErr) => {\n                        sbToastError(validateSchemaErr.payload.valid_msg)\n                        dispatch(setSchema(null));\n                    }).finally(() => {\n                        setIsValidating(false);\n                    })\n            } catch (err) {\n                if (err instanceof Error) {\n                    setIsValidating(false);\n                    sbToastError(err.message)\n                }\n            }\n\n            if (setDecodeSchemaTypes && setDecodeMsg) {\n                loadDecodeTypes(schemaObj);\n            }\n        }\n        setIsLoading(false);\n    }\n\n    const onCancelFileUpload = (e: React.MouseEvent<HTMLButtonElement> | React.ChangeEvent<HTMLInputElement> | null) => {\n        if (e) {\n            e.preventDefault();\n        }\n        dismissAllToast();\n        setIsLoading(false);\n        setIsValidating(false);\n        setIsValid(false);\n        setLoadedSchema(null);\n        dispatch(setSchema(null));\n        setSelectedFile(null);\n        setFileName({\n            name: '',\n            ext: LANG_JADN\n        });\n        if (ref.current) {\n            ref.current.value = '';\n        }\n        if (setDecodeSchemaTypes && setDecodeMsg) {\n            setDecodeMsg(null);\n            setDecodeSchemaTypes([]);\n        }\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <div className=\"row no-gutters\">\n                    <div className=\"col-lg-6 align-self-center\">\n                        <SBFileLoader\n                            opts={schemaOpts}\n                            selectedOpt={selectedFile}\n                            loadedFileData={loadedSchema}\n                            fileName={fileName}\n                            fileExt={schemaFormat?.value}\n                            setSelectedFile={setSelectedFile}\n                            onCancelFileUpload={onCancelFileUpload}\n                            onFileChange={onFileLoad}\n                            acceptableExt={acceptFormat}\n                            ref={ref}\n                            placeholder={'Select a schema...'}\n                            loc={'schemas'}\n                            isSaveable\n                        />\n                    </div>\n                    {acceptFormat && <div className=\"col-lg-3 align-self-center\">\n                        <SBSelect id={\"schema-format-list\"}\n                            data={validSchemaFormatOpt}\n                            onChange={(e: Option) => setSchemaFormat(e)}\n                            value={schemaFormat}\n                            placeholder={'Schema format...'}\n                            isSmStyle\n                            isClearable />\n                    </div>}\n                    <div className=\"col text-end align-self-center nowrap\">\n                        {isValidating ? <SBSpinner action={\"Validating\"} color={\"primary\"} /> :\n                            <SBValidateSchemaBtn\n                                isValid={isValid}\n                                setIsValid={setIsValid}\n                                setIsValidating={setIsValidating}\n                                schemaData={loadedSchema}\n                                schemaFormat={schemaFormat?.value}\n                            />\n                        }\n                        <SBCopyToClipboard buttonId='copySchema' data={loadedSchema} customClass='me-1' />\n                        <SBFormatBtn customClass=\"me-1\" handleFormatClick={onFormatClick} ext={schemaFormat?.value} data={loadedSchema} />\n\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-body-page\">\n                {isLoading ? <SBSpinner action={'Loading'} isDiv /> :\n                    <SBEditor data={loadedSchema || \"\"} onChange={sbEditorOnChange}></SBEditor>}\n            </div>\n        </div>\n    )\n}\nexport default SchemaLoader;\n","import React from \"react\";\nimport * as d3 from \"d3-graphviz\";\nimport SBEditor from \"../common/SBEditor\";\nimport { faUndo } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport const convertToGvSplitView = (data: any, height = 320, width = 920) => {\n    d3.graphviz(\"#gv\")\n        .fit(true)\n        .height(height)\n        .width(width)\n        .zoomScaleExtent([1, 10])\n        .renderDot(data);\n}\n\nexport const convertToGvFullView = (data: any) => {\n    var margin = 20; // to avoid scrollbars\n    var width = window.innerWidth - margin;\n    var height = window.innerHeight - margin;\n\n    d3.graphviz(\"#fullGV\")\n        .fit(true)\n        .height(height)\n        .width(width)\n        .zoom(true)\n        .renderDot(data);\n}\n\nexport const onGVPopOutClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    var newWindowContent = document.getElementById('fullGV')?.innerHTML;\n    var newWindow = window.open(\"\");\n    newWindow?.document.write(newWindowContent || 'Error: Cannot display Graphviz');\n}\n\nconst SBGvPreviewer = (props: any) => {\n\n    const { conversion, convertedSchema } = props;\n\n    const onDiagramReset = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        d3.graphviz(\"#gv\").resetZoom();\n    }\n\n    return (\n        <>\n            <SBEditor data={convertedSchema} isReadOnly={true} convertTo={conversion} height=\"35vh\"></SBEditor>\n\n            <div id=\"content\" className=\"card bg-secondary\" style={{ 'height': \"35vh\", overflow: 'hidden' }}>\n                <div className=\"tools\">\n                    <button type=\"button\" title=\"Reset\" className=\"btn btn-sm\"\n                        onClick={onDiagramReset}>\n                        <FontAwesomeIcon icon={faUndo} />\n                    </button>\n                </div>\n                <div id=\"gv\" style={{ 'height': \"35vh\", textAlign: 'center', zIndex: '0' }}>\n                </div>\n                <div id=\"fullGV\" style={{ visibility: 'hidden', overflow: 'hidden' }}>\n                </div>\n            </div>\n        </>\n    );\n}\nexport default SBGvPreviewer;","import React from \"react\";\nimport SBEditor from \"../common/SBEditor\";\nimport HTMLReactParser from \"html-react-parser\";\nimport * as DOMPurify from 'dompurify';\n\nexport const onHTMLPopOutClick = (convertedSchema: any) => {\n    const sanitizedData = DOMPurify.sanitize(convertedSchema, { FORCE_BODY: true });\n    const blob = new Blob([sanitizedData], { type: \"text/html\" });\n    const data = URL.createObjectURL(blob);\n    window.open(data);\n}\n\nconst SBHtmlPreviewer = (props: any) => {\n\n    const { htmlText, showPreviewer, conversion } = props;\n    const previewerClassName = \"previewer \" + (showPreviewer ? \"hide\" : \"\");\n    const sanitizedData = DOMPurify.sanitize(htmlText, { FORCE_BODY: true });\n\n    return (\n        <>\n            <SBEditor data={htmlText} isReadOnly={true} convertTo={conversion} height=\"35vh\"></SBEditor>\n\n            <div className=\"card bg-secondary\" style={{ 'height': \"35vh\", 'overflow': 'auto' }}>\n                <div className={previewerClassName}>\n                    <div id=\"preview\"\n                        className=\"previewer-content\"\n                    >\n                        {HTMLReactParser(sanitizedData)}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\nexport default SBHtmlPreviewer;","import React from \"react\";\nimport SBEditor from \"../common/SBEditor\";\nimport { marked } from \"marked\";\nimport HTMLReactParser from \"html-react-parser\";\nimport * as DOMPurify from 'dompurify';\n\n// markdownToHTML: ALLOWS LINE BREAKS WITH RETURN BUTTON\nmarked.setOptions({\n    breaks: true,\n});\n\n// markdownToHTML: INSERTS target=\"_blank\" INTO HREF TAGS (required for codepen links)\nconst renderer = new marked.Renderer();\nrenderer.link = function (href: any, _title: any, text: any) {\n    return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\n}\n\nfunction markdownToHTML(markdownText: string) {\n    try {\n        return marked(markdownText, { renderer: renderer });\n    } catch (error) {\n        console.error(\"Something bad happened\");\n        return error;\n    }\n}\n\nexport const onMDPopOutClick = (convertedSchema: string) => {\n    const htmlContent = markdownToHTML(convertedSchema);\n    const sanitizedData = DOMPurify.sanitize(htmlContent, { FORCE_BODY: true });\n    const blob = new Blob([sanitizedData], { type: \"text/html\" });\n    const data = URL.createObjectURL(blob);\n    window.open(data);\n}\n\nconst SBMarkdownPreviewer = (props: any) => {\n\n    const { markdownText, showPreviewer, conversion } = props;\n    const htmlContent = markdownToHTML(markdownText);\n    const previewerClassName = \"previewer \" + (showPreviewer ? \"hide\" : \"\");\n    const sanitizedData = DOMPurify.sanitize(htmlContent, { FORCE_BODY: true });\n\n    return (\n        <>\n            <SBEditor data={markdownText} isReadOnly={true} convertTo={conversion} height=\"35vh\"></SBEditor>\n\n            <div className=\"card bg-secondary\" style={{ 'height': \"35vh\", 'overflow': 'auto' }}>\n                <div className={previewerClassName}>\n                    <div id=\"preview\"\n                        className=\"previewer-content\"\n                    >\n                        {HTMLReactParser(sanitizedData)}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\nexport default SBMarkdownPreviewer;","import React from \"react\";\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport encoder from \"plantuml-encoder\";\nimport SBEditor from \"../common/SBEditor\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUndo } from \"@fortawesome/free-solid-svg-icons\";\n\nexport const convertToPuml = (data: any) => {\n    const encoded = encoder.encode(data);\n    const url = 'http://www.plantuml.com/plantuml/img/' + encoded;\n    return url;\n}\n\nconst SBPumlPreviewer = (props: any) => {\n\n    const { convertedSchema, conversion, data } = props;\n\n    return (\n        <>\n            <SBEditor data={convertedSchema} isReadOnly={true} convertTo={conversion} height=\"35vh\"></SBEditor>\n\n            <div id=\"content\" className=\"card bg-secondary\" style={{ 'height': \"35vh\" }}>\n                <TransformWrapper\n                    initialScale={0.5}\n                    minScale={0.2}\n                >\n                    {({ zoomIn, zoomOut, resetTransform }) => (\n                        <React.Fragment>\n                            <div className=\"tools\">\n                                <button type=\"button\" className=\"btn btn-sm\" title=\"Zoom In\" onClick={(e) => { e.preventDefault(); zoomIn() }}>+</button>\n                                <button type=\"button\" className=\"btn btn-sm\" title=\"Zoom Out\" onClick={(e) => { e.preventDefault(); zoomOut() }}>-</button>\n                                <button type=\"button\" className=\"btn btn-sm\" title=\"Reset\" onClick={(e) => { e.preventDefault(); resetTransform() }}>\n                                    <FontAwesomeIcon icon={faUndo} />\n                                </button>\n                            </div>\n                            <TransformComponent\n                                wrapperStyle={{\n                                    width: \"100%\",\n                                    height: \"100%\",\n                                    overflow: 'auto'\n                                }}\n                            >\n                                <img src={data}\n                                    style={{\n                                        width: \"100%\",\n                                        height: \"100%\",\n                                        objectFit: \"contain\",\n                                    }}\n                                    onLoad={(e) => { e.preventDefault(); resetTransform() }}\n                                    alt=\"PlantUML preview\"\n                                ></img>\n                            </TransformComponent>\n                        </React.Fragment>\n                    )}\n                </TransformWrapper>\n            </div>\n        </>\n    );\n}\nexport default SBPumlPreviewer;","import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faWindowMaximize, faTableColumns } from \"@fortawesome/free-solid-svg-icons\";\nimport { getValidVisualizations } from \"reducers/convert\";\nimport { getSelectedSchema } from \"reducers/util\";\nimport { FILE_TYPE_PDF, FILE_TYPE_PNG, FILE_TYPE_SVG, LANG_GRAPHVIZ, LANG_HTML, LANG_JIDL, LANG_MARKDOWN, LANG_PLANTUML } from \"components/utils/constants\";\nimport { sbToastError } from \"components/common/SBToast\";\nimport SBCopyToClipboard from \"components/common/SBCopyToClipboard\";\nimport SBEditor from \"components/common/SBEditor\";\nimport SBCollapseViewer from \"components/common/SBCollapseViewer\";\nimport SBSelect, { Option } from \"components/common/SBSelect\";\nimport SBDownloadBtn from \"components/common/SBDownloadBtn\";\nimport SBHtmlPreviewer, { onHTMLPopOutClick } from \"components/visualize/SBHtmlPreviewer\";\nimport SBMarkdownPreviewer, { onMDPopOutClick } from \"components/visualize/SBMarkdownPreviewer\";\nimport SBPumlPreviewer, { convertToPuml } from \"components/visualize/SBPumlPreviewer\";\nimport SBGvPreviewer, { convertToGvFullView, convertToGvSplitView, onGVPopOutClick } from \"components/visualize/SBGvPreviewer\";\nimport { initConvertedSchemaState } from \"./SchemaVisualizer\";\nimport SBSubmitBtn from \"components/common/SBSubmitBtn\";\n\nconst SchemaVisualized = (props: any) => {\n    const location = useLocation();\n\n    const { conversion, setConversion, convertedSchema, setConvertedSchema, spiltViewFlag, setSplitViewFlag, isLoading, formId } = props;\n    const validSchema = useSelector(getSelectedSchema);\n    const [pumlURL, setPumlURL] = useState('');\n    const data = useSelector(getValidVisualizations);\n    let convertOpts: Option[] = [];\n    for (let i = 0; i < Object.keys(data).length; i++) {\n        convertOpts.push({ ['label']: Object.keys(data)[i], ['value']: Object.values(data)[i] });\n    }\n\n    useEffect(() => {\n        if (location.state) {\n            const index = Object.values(data).indexOf(location.state)\n            setConversion({ value: Object.values(data)[index], label: Object.keys(data)[index] });\n        }\n    }, []);\n\n    useEffect(() => {\n        if ((conversion.length == 1 ? conversion[0].value : conversion) == LANG_PLANTUML && convertedSchema.length != 0) {\n            setPumlURL(convertToPuml(convertedSchema[0].schema));\n        }\n        if ((conversion.length == 1 ? conversion[0].value : conversion) == LANG_GRAPHVIZ && convertedSchema.length != 0) {\n            convertToGvSplitView(convertedSchema[0].schema);\n            convertToGvFullView(convertedSchema[0].schema);\n        }\n    }, [convertedSchema]);\n\n    const handleConversion = (e: Option[]) => {\n        let convertTo = [];\n        for (let i = 0; i < Object.values(e).length; i++) {\n            convertTo.push(Object.values(e)[i])\n        }\n        setConversion(convertTo);\n        setConvertedSchema(initConvertedSchemaState);\n        setSplitViewFlag(false);\n    }\n\n    const onPopOutClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        try {\n            var newWindow = window.open(\"\");\n            newWindow?.document.write('<html><body><pre>' + convertedSchema[0].schema + '</pre></body></html>');\n        } catch {\n            sbToastError('Error: Unable to open schema in pop out');\n        }\n    }\n\n    const toggleSplitView = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        setSplitViewFlag(!spiltViewFlag);\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <div className='row no-gutters'>\n                    <div className='col-md-6'>\n                        <SBSelect id={\"conversion-list\"} data={convertOpts} onChange={handleConversion}\n                            value={conversion}\n                            placeholder={'Visualize to...(select at least one)'} isMultiSelect\n                            isSmStyle\n                            isClearable />\n                    </div>\n                    <div className='col-md-6 align-self-center'>\n                        <div className={`${conversion.length == 1 && convertedSchema[0].schema ? '' : ' d-none'}`}>\n                            <SBCopyToClipboard buttonId='copyConvertedSchema' data={convertedSchema[0].schema} customClass='float-end' />\n                            <SBDownloadBtn buttonId='schemaDownload' customClass={`me-1 float-end${convertedSchema[0].schema && conversion.length <= 1 ? '' : ' d-none'}`} data={convertedSchema[0].schema} ext={conversion.length == 1 ? conversion[0].value : conversion} />\n\n                            <div className={`${(conversion.length == 1 ? conversion[0].value : conversion) == LANG_HTML ? '' : ' d-none'}`}>\n                                <SBDownloadBtn buttonId={`htmlPdfDownload`} customClass='me-1 float-end' data={validSchema} ext={FILE_TYPE_PDF} />\n                                <button type='button' id=\"htmlPopOut\" title=\"View Schema in new window\" className=\"btn btn-primary btn-sm me-1 float-end\" onClick={() => onHTMLPopOutClick(convertedSchema[0].schema)}>\n                                    <FontAwesomeIcon icon={faWindowMaximize} />\n                                </button>\n                            </div>\n\n                            <div className={`${(conversion.length == 1 ? conversion[0].value : conversion) == LANG_MARKDOWN ? '' : ' d-none'}`}>\n                                <SBDownloadBtn buttonId={`mdPdfDownload`} customClass='me-1 float-end' data={validSchema} ext={FILE_TYPE_PDF} />\n                                <button type='button' id=\"mdPopOut\" title=\"View Schema in new window\" className=\"btn btn-primary btn-sm me-1 float-end\" onClick={() => onMDPopOutClick(convertedSchema[0].schema)}>\n                                    <FontAwesomeIcon icon={faWindowMaximize} />\n                                </button>\n                            </div>\n\n                            <div className={`${(conversion.length == 1 ? conversion[0].value : conversion) == LANG_JIDL ? '' : ' d-none'}`}>\n                                <button type='button' id=\"jidlPopOut\" title=\"View Schema in new window\" className=\"btn btn-primary btn-sm me-1 float-end\" onClick={onPopOutClick}>\n                                    <FontAwesomeIcon icon={faWindowMaximize} />\n                                </button>\n                            </div>\n\n                            <div className={`${(conversion.length == 1 ? conversion[0].value : conversion) == LANG_PLANTUML ? '' : ' d-none'}`}>\n                                <SBDownloadBtn buttonId={`pumlPngDownload`} customClass='me-1 float-end' data={pumlURL} ext={FILE_TYPE_PNG} />\n                                <a role='button' id=\"pumlPopOut\" title=\"View Schema in new window\" className=\"btn btn-primary btn-sm me-1 float-end\" target=\"_blank\" href={pumlURL}>\n                                    <FontAwesomeIcon icon={faWindowMaximize} />\n                                </a>\n                            </div>\n\n                            <div className={`${(conversion.length == 1 ? conversion[0].value : conversion) == LANG_GRAPHVIZ ? '' : ' d-none'}`}>\n                                <SBDownloadBtn buttonId={`gvSvgDownload`} customClass='me-1 float-end' ext={FILE_TYPE_SVG} />\n                                <button type='button' id=\"gvPopOut\" title=\"View Schema in new window\" className=\"btn btn-primary btn-sm me-1 float-end\" onClick={onGVPopOutClick}>\n                                    <FontAwesomeIcon icon={faWindowMaximize} />\n                                </button>\n                            </div>\n\n                            <div className={`${((conversion.length == 1 ? conversion[0].value : conversion) != LANG_JIDL) ? '' : ' d-none'}`}>\n                                <button type='button' id=\"SplitView\" title=\"View Schema and Preview together\" className=\"btn btn-primary btn-sm me-1 float-end\" onClick={toggleSplitView}>\n                                    <FontAwesomeIcon icon={faTableColumns} className='fa-rotate-90' />\n                                </button>\n                            </div>\n                        </div>\n\n                        <div>\n                            <SBSubmitBtn buttonId=\"visualizeSchema\"\n                                buttonTitle=\"Visualize the given JADN schema to the selected format\"\n                                buttonTxt=\"Visualize\"\n                                customClass=\"me-1 float-end\"\n                                isLoading={isLoading}\n                                formId={formId}\n                                isDisabled={Object.keys(validSchema).length != 0 && conversion.length != 0 ? false : true}>\n                            </SBSubmitBtn>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className={`card-body-page ${spiltViewFlag ? 'd-none' : ''}`}>\n                {conversion.length > 1 && convertedSchema.length > 1 ?\n                    <SBCollapseViewer data={convertedSchema} pumlURL={pumlURL} setPumlURL={setPumlURL} loadedSchema={validSchema} /> :\n                    <SBEditor data={convertedSchema[0].schema} isReadOnly={true} convertTo={(conversion.length == 1 ? conversion[0].value : conversion)}></SBEditor>\n                }\n            </div>\n            <div className={`card-body-page ${spiltViewFlag ? '' : ' d-none'}`}>\n                <div className={`${(conversion.length == 1 ? conversion[0].value : conversion) == LANG_HTML && convertedSchema.length != 0 ? '' : ' d-none'}`}>\n                    <SBHtmlPreviewer htmlText={convertedSchema[0].schema} showPreviewer={true} conversion={(conversion.length == 1 ? conversion[0].value : conversion)}></SBHtmlPreviewer>\n                </div>\n                <div className={`${(conversion.length == 1 ? conversion[0].value : conversion) == LANG_MARKDOWN && convertedSchema.length != 0 ? '' : ' d-none'}`}>\n                    <SBMarkdownPreviewer markdownText={convertedSchema[0].schema} showPreviewer={true}></SBMarkdownPreviewer>\n                </div>\n                <div className={`${(conversion.length == 1 ? conversion[0].value : conversion) == LANG_PLANTUML && convertedSchema.length != 0 ? '' : ' d-none'}`}>\n                    <SBPumlPreviewer data={pumlURL} convertedSchema={convertedSchema[0].schema} conversion={(conversion.length == 1 ? conversion[0].value : conversion)}></SBPumlPreviewer>\n                </div>\n                <div className={`${(conversion.length == 1 ? conversion[0].value : conversion) == LANG_GRAPHVIZ && convertedSchema.length != 0 ? '' : ' d-none'}`}>\n                    <SBGvPreviewer convertedSchema={convertedSchema[0].schema} conversion={(conversion.length == 1 ? conversion[0].value : conversion)}></SBGvPreviewer>\n                </div>\n            </div>\n        </div>\n    );\n}\nexport default SchemaVisualized;","import React, { useEffect, useState } from 'react'\nimport { Helmet } from 'react-helmet-async'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getPageTitle } from 'reducers/util'\nimport { convertSchema, info } from 'actions/convert'\nimport SchemaLoader from 'components/common/SchemaLoader'\nimport { dismissAllToast, sbToastError, sbToastSuccess } from 'components/common/SBToast'\nimport { SchemaJADN } from 'components/create/schema/interface'\nimport SchemaVisualized from './SchemaVisualized'\nimport { Option } from 'components/common/SBSelect'\nimport { setSchema } from 'actions/util'\n\nexport const initConvertedSchemaState = [{\n    schema: '',\n    fmt: '',\n    fmt_ext: ''\n}]\n\nconst SchemaVisualizer = () => {\n    const dispatch = useDispatch();\n\n    const [selectedFile, setSelectedFile] = useState<Option | null>(null);\n    const [schemaFormat, setSchemaFormat] = useState<Option | null>(null);\n    const [loadedSchema, setLoadedSchema] = useState<object | null>(null);\n    const [conversion, setConversion] = useState<Option[]>([]);\n    const [convertedSchema, setConvertedSchema] = useState(initConvertedSchemaState);\n    const [isLoading, setIsLoading] = useState(false);\n    const [spiltViewFlag, setSplitViewFlag] = useState(false);\n\n    const meta_title = useSelector(getPageTitle) + ' | Schema Visualization'\n    const meta_canonical = `${window.location.origin}${window.location.pathname}`;\n    const formId = \"visualization_form\";\n\n    useEffect(() => {\n        dispatch(info());\n        dismissAllToast();\n    }, [dispatch])\n\n    useEffect(() => {\n        setConvertedSchema(initConvertedSchemaState);\n        setSplitViewFlag(false);\n    }, [loadedSchema]);\n\n    const onReset = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        dismissAllToast();\n        setIsLoading(false);\n        setSelectedFile(null);\n        setLoadedSchema(null);\n        setConversion([]);\n        setConvertedSchema(initConvertedSchemaState);\n        setSplitViewFlag(false);\n        dispatch(setSchema(null));\n    }\n\n    const submitForm = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setIsLoading(true);\n        if (conversion) {\n            let schemaObj: SchemaJADN | string = loadedSchema;\n\n            if (typeof schemaObj == 'string') {\n                try {\n                    schemaObj = JSON.parse(loadedSchema);\n                } catch (err) {\n                    if (err instanceof Error) {\n                        setIsLoading(false);\n                        sbToastError(err.message);\n                    }\n                }\n            }\n            //convertSchema takes in an array of values\n            const arr = conversion.map(obj => obj.value);\n            dispatch(convertSchema(schemaObj, schemaFormat?.value, arr))\n                .then((convertSchemaVal) => {\n                    if (convertSchemaVal.error) {\n                        setIsLoading(false);\n                        setConvertedSchema(initConvertedSchemaState);\n                        sbToastError(convertSchemaVal.payload.response);\n                        return;\n                    }\n                    setIsLoading(false);\n                    setConvertedSchema(convertSchemaVal.payload.schema.convert);\n                    const convertedArr = convertSchemaVal.payload.schema.convert.map(obj => obj.fmt_ext);\n                    for (let i = 0; i < convertSchemaVal.payload.schema.convert.length; i++) {\n                        if (convertedArr.includes(arr[i])) {\n                            if (convertSchemaVal.payload.schema.convert[i].err == false) {\n                                sbToastSuccess(`Schema visualized to ${convertSchemaVal.payload.schema.convert[i].fmt} successfully`);\n                            } else {\n                                sbToastError(`Schema failed to visualize ${convertSchemaVal.payload.schema.convert[i].fmt} ${convertSchemaVal.payload.schema.convert[i].schema ? `: ${convertSchemaVal.payload.schema.convert[i].schema}` : ''}`);\n                            }\n                        } else {\n                            sbToastError(`Failed to visualize to ${conversion[i].label}`);\n                        }\n                    }\n                })\n                .catch((convertSchemaErr: string) => {\n                    setIsLoading(false);\n                    sbToastError(convertSchemaErr);\n                })\n        } else {\n            setIsLoading(false);\n            sbToastError(\"No language selected for conversion\");\n        }\n    }\n\n    return (\n        <div>\n            <Helmet>\n                <title>{meta_title}</title>\n                <link rel=\"canonical\" href={meta_canonical} />\n            </Helmet>\n            <div className='row'>\n                <div className='col-md-12'>\n                    <div className='card'>\n                        <div className='card-header bg-secondary p-2'>\n                            <h5 className='m-0' style={{ display: 'inline' }}><span className='align-middle'>Schema Visualization</span></h5>\n                            <button type='reset' className='btn btn-sm btn-danger float-end' onClick={onReset}>Reset</button>\n                        </div>\n                        <div className='card-body p-2'>\n                            <form id={formId} onSubmit={submitForm}>\n                                <div className='row'>\n                                    <div className='col-md-6 pr-1'>\n                                        <SchemaLoader\n                                            selectedFile={selectedFile} setSelectedFile={setSelectedFile}\n                                            schemaFormat={schemaFormat} setSchemaFormat={setSchemaFormat}\n                                            loadedSchema={loadedSchema} setLoadedSchema={setLoadedSchema} />\n                                    </div>\n                                    <div className='col-md-6 pl-1'>\n                                        <SchemaVisualized\n                                            convertedSchema={convertedSchema} setConvertedSchema={setConvertedSchema}\n                                            conversion={conversion} setConversion={setConversion}\n                                            spiltViewFlag={spiltViewFlag} setSplitViewFlag={setSplitViewFlag}\n                                            isLoading={isLoading} formId={formId} />\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SchemaVisualizer"],"names":["props","_SBDownloadBtn","data","pumlURL","setPumlURL","loadedSchema","_useState","useState","_useState2","_slicedToArray","toggle","setToggle","useEffect","_step","_iterator","_createForOfIteratorHelper","s","n","done","obj","value","fmt_ext","LANG_PLANTUML","convertToPuml","schema","LANG_GRAPHVIZ","convertToGvFullView","err","e","f","onPopOutClick","url","arguments","length","undefined","newWindow","window","open","document","write","_unused","sbToastError","listData","map","i","_jsx","className","id","concat","type","onClick","index","prev","_objectSpread","_defineProperty","fmt","SBCopyToClipboard","buttonId","customClass","SBDownloadBtn","ext","LANG_XSD","React","_SBDownloadFileBtn","SBDownloadFileBtn","buttonTitle","fileName","LANG_HTML","FILE_TYPE_PDF","title","onHTMLPopOutClick","_FontAwesomeIcon","FontAwesomeIcon","icon","faWindowMaximize","LANG_MARKDOWN","onMDPopOutClick","_FontAwesomeIcon2","LANG_JIDL","_FontAwesomeIcon3","FILE_TYPE_PNG","_FontAwesomeIcon4","_SBDownloadBtn2","FILE_TYPE_SVG","_button","onGVPopOutClick","SBEditor","isReadOnly","height","style","visibility","overflow","filename","_props$ext","LANG_JADN","fileNameInput","setFileNameInput","_useState3","_useState4","toggleDownloadDialog","setToggleDownloadDialog","_useState5","_useState6","isLoading","setIsLoading","faFilePdf","faFileImage","faFileDownload","onDownloadClick","preventDefault","FILENAME_RULE","test","fetch","method","headers","body","JSON","stringify","then","rsp","blob","elem","createElement","href","URL","createObjectURL","download","appendChild","click","remove","revokeObjectURL","console","log","sbToastSuccess","onDownloadPDFClick","_document$getElementB","svg","getElementById","innerHTML","Blob","saveAs","onDownloadSVGClick","onDownloadPNGClick","formattedData","_typeof","FormatJADN","setTimeout","onDownloadFileClick","sbToastWarning","_SBSpinner","SBSpinner","color","tabIndex","role","_div","_label","htmlFor","autoFocus","onChange","target","_label2","readOnly","zIndex","isDisabled","disabled","response","blobUrl","link","dispatchEvent","MouseEvent","bubbles","cancelable","view","removeChild","faFileCode","forwardRef","ref","dispatch","useDispatch","opts","selectedOpt","loadedFileData","setSelectedFile","placeholder","loc","acceptableExt","onCancelFileUpload","onFileChange","isSaveable","_props$fileExt","fileExt","SBSelect","_ref$current","current","loadFile","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","loadFileVal","dataObj","_context","next","error","payload","abrupt","stop","_x","apply","loadFileErr","isGrouped","isFileUploader","isSmStyle","isClearable","SBSaveFile","toolTip","name","setDropdown","accept","files","file","fileReader","FileReader","onload","ev","dataStr","result","label","readAsText","display","faXmark","buttonTxt","formId","form","faPaperPlane","isValid","setIsValid","setIsValidating","schemaData","schemaFormat","validateJADNSchema","jsonObj","validateSchema","validateSchemaVal","valid_bool","setSchema","valid_msg","validateSchemaErr","Error","message","validateJSONSchema","LANG_JSON","dismissAllToast","parse","_span","_span2","faCheck","_span3","handleFormatClick","faIndent","selectedFile","setLoadedSchema","decodeMsg","setDecodeMsg","setDecodeSchemaTypes","acceptFormat","setSchemaFormat","isValidating","_useState7","_useState8","setFileName","schemaOpts","useSelector","getAllSchemas","validSchemaFormatOpt","getSchemaConversions","useRef","info","loadDecodeTypes","schemaObj","decodeTypes","all","exports","msgDecode","types","def","filter","dt","includes","sort","onFileLoad","fileStr","_fileName","getFilenameOnly","getFilenameExt","_x2","SBFileLoader","action","SBValidateSchemaBtn","SBFormatBtn","formattedSchema","_SBSpinner2","isDiv","_unused2","convertToGvSplitView","width","d3","fit","zoomScaleExtent","renderDot","innerWidth","innerHeight","zoom","newWindowContent","conversion","convertedSchema","convertTo","resetZoom","faUndo","textAlign","sanitizedData","DOMPurify","FORCE_BODY","htmlText","showPreviewer","previewerClassName","HTMLReactParser","marked","setOptions","breaks","renderer","Renderer","markdownToHTML","markdownText","_title","text","htmlContent","encoder","TransformWrapper","initialScale","minScale","zoomIn","zoomOut","resetTransform","TransformComponent","wrapperStyle","src","objectFit","onLoad","alt","location","useLocation","setConversion","setConvertedSchema","spiltViewFlag","setSplitViewFlag","validSchema","getSelectedSchema","getValidVisualizations","convertOpts","Object","keys","_convertOpts$push","push","values","state","indexOf","initConvertedSchemaState","isMultiSelect","_FontAwesomeIcon5","faTableColumns","SBSubmitBtn","SBCollapseViewer","SBHtmlPreviewer","SBMarkdownPreviewer","SBPumlPreviewer","SBGvPreviewer","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","meta_title","getPageTitle","meta_canonical","origin","pathname","Helmet","rel","onSubmit","arr","convertSchema","convertSchemaVal","convert","convertedArr","convertSchemaErr","SchemaLoader","SchemaVisualized"],"sourceRoot":""}