{"version":3,"file":"js/885.bundle.min.js","mappings":"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","sources":["webpack://client/./src/components/common/SBDownloadBtn.tsx","webpack://client/./src/components/common/SBSubmitBtn.tsx","webpack://client/./src/components/common/SBMultiSchemaLoader.tsx","webpack://client/./src/components/transform/SchemaTransformed.tsx","webpack://client/./src/components/transform/SchemaTransformer.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { faFileDownload, faFileImage, faFilePdf } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { sbToastError, sbToastSuccess, sbToastWarning } from \"./SBToast\";\nimport SBSpinner from \"./SBSpinner\";\nimport { FormatJADN } from \"components/utils\";\nimport saveAs from \"file-saver\";\nimport { FILENAME_RULE, FILE_TYPE_PDF, FILE_TYPE_PNG, FILE_TYPE_SVG, LANG_JADN } from \"components/utils/constants\";\n\nexport const onDownloadPNGClick = (pumlURL: any, filename: string = \"plantuml\") => {\n    saveAs(pumlURL, `${filename}.png`);\n}\n\nexport const onDownloadSVGClick = (e: React.MouseEvent<HTMLButtonElement>, filename: string = \"graphviz\") => {\n    e.preventDefault();\n    const svg = document.getElementById(\"fullGV\")?.innerHTML;\n    if (svg) {\n        var blob = new Blob([svg], { type: \"image/svg+xml\" });\n        saveAs(blob, `${filename}.svg`);\n    } else {\n        sbToastError('Error: Unable to download GraphViz file.')\n    }\n}\n//TODO: Add ability to save in other extensions ? \nconst SBDownloadBtn = (props: any) => {\n\n    const { buttonId, data, customClass, filename, ext = LANG_JADN } = props;\n\n    const [fileNameInput, setFileNameInput] = useState(filename);\n    const [toggleDownloadDialog, setToggleDownloadDialog] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setFileNameInput(e.target.value);\n    }\n\n    const onDownloadIconClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        setToggleDownloadDialog(true);\n    }\n\n    const onDownloadFileClick = (e: React.MouseEvent<HTMLButtonElement>, fmt: string) => {\n        e.preventDefault();\n        if (!data) {\n            sbToastError('No data to download');\n            return;\n        }\n\n        setIsLoading(true);\n        try {\n            const filename = `${fileNameInput}.${fmt}`;\n            let formattedData = typeof data == \"object\" ? FormatJADN(data) : data;\n\n            const blob = new Blob([formattedData], { type: \"application/json\" });\n            //content: `data:application/json;charset=utf-8,${encodeURIComponent(FormatJADN(prevState.schema))}`\n            const elem = document.createElement('a');\n            elem.href = URL.createObjectURL(blob);\n            elem.download = filename;\n            document.body.appendChild(elem);\n            elem.click();\n\n            // To make this work on Firefox we need to wait\n            // a little while before removing it.\n            setTimeout(() => {\n                elem.remove();\n                URL.revokeObjectURL(elem.href);\n            }, 0);\n            sbToastSuccess('File downloaded')\n\n        } catch (err) {\n            console.log(err);\n            sbToastError(`File cannot be downloaded`);\n        }\n    }\n\n    const onDownloadPDFClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        const filename = `${fileNameInput}.pdf`;\n        setIsLoading(true);\n        try {\n            fetch('/api/convert/pdf', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    schema: data\n                })\n            }).then(\n                rsp => rsp.blob()\n            ).then(blob => {\n                const elem = document.createElement('a');\n                elem.href = URL.createObjectURL(blob);\n                elem.download = filename;\n                document.body.appendChild(elem);\n                elem.click();\n\n                elem.remove();\n                URL.revokeObjectURL(elem.href);\n            }).catch(err => {\n                console.log(err);\n                sbToastError(`PDF cannot be downloaded`);\n            });\n\n        } catch (err) {\n            console.log(err);\n            sbToastError(`PDF cannot be downloaded`);\n        }\n\n        sbToastSuccess('PDF downloaded successfully');\n    }\n\n\n    let icon;\n    if (ext == FILE_TYPE_PDF) {\n        icon = <FontAwesomeIcon icon={faFilePdf} />;\n    } else if (ext == FILE_TYPE_SVG || ext == FILE_TYPE_PNG) {\n        icon = <FontAwesomeIcon icon={faFileImage} />;\n    } else {\n        icon = <FontAwesomeIcon icon={faFileDownload} />;\n    }\n\n\n    const onDownloadClick = (e: React.MouseEvent<HTMLButtonElement>, fmt: string) => {\n        e.preventDefault();\n        if (fileNameInput == '' || fileNameInput == undefined) {\n            sbToastWarning('Please enter a file name.');\n            return;\n        } else if (!FILENAME_RULE.test(fileNameInput)) {\n            sbToastWarning(\"Please do not use special characters in file name.\");\n            return;\n        }\n\n        switch (fmt) {\n            case FILE_TYPE_PDF:\n                onDownloadPDFClick(e);\n                break;\n            case FILE_TYPE_SVG:\n                onDownloadSVGClick(e, fileNameInput);\n                break;\n            case FILE_TYPE_PNG:\n                onDownloadPNGClick(data, fileNameInput);\n                break;\n            default:\n                //jadn, json, html, md, gv, puml, jidl\n                onDownloadFileClick(e, ext);\n        }\n\n        setIsLoading(false);\n        setToggleDownloadDialog(false);\n    }\n\n    return (\n        <>\n            {isLoading ? <SBSpinner color={\"primary\"} /> :\n                <button id={buttonId || 'downloadBtn'} type='button' title={`Download ${ext} File`} className={'btn btn-sm btn-primary ' + customClass} onClick={onDownloadIconClick}>\n                    {icon}\n                </button>}\n\n            <div id=\"downloadFileModal\" className={`modal fade ${toggleDownloadDialog ? 'show d-block' : 'd-none'}`} tabIndex={-1} role='dialog'>\n                <div className={`modal-dialog modal-dialog-centered`} role='document'>\n                    <div className='modal-content'>\n                        <div className=\"modal-header\">\n                            <div className=\"form col\">\n                                <div className=\"form row\">\n                                    <h5 className='modal-title'>\n                                        Download As...\n                                    </h5>\n                                </div>\n                                <div className=\"form row\">\n                                    <small className=\"text-muted\"> {`Download file to local computer`}</small>\n                                </div>\n                            </div>\n                            <button type='button' className='btn-close' data-bs-dismiss='modal' aria-label='Close' title='Close' onClick={() => setToggleDownloadDialog(false)} />\n                        </div>\n                        <div className=\"modal-body\">\n                            <div className=\"row\">\n                                <label htmlFor=\"filenameDownload\" className=\"col-sm-4 col-label\">File name:</label>\n                                <div className=\"col-sm-8\">\n                                    <input id='filenameDownload' className=\"form-control\" type=\"text\" autoFocus={true} value={fileNameInput} onChange={onChange} />\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <label htmlFor=\"downloadFileAsType\" className=\"col-sm-4 col-label\">Save as type:</label>\n                                <div className=\"col-sm-8\">\n                                    <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"downloadFileAsType\" value={ext} />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type='button' className='btn btn-sm btn-success' onClick={(e) => onDownloadClick(e, ext)}>Download</button>\n                            <button type='button' className='btn btn-sm btn-secondary' onClick={() => { setIsLoading(false); setToggleDownloadDialog(false); }}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n                <div className={`modal-backdrop fade ${toggleDownloadDialog ? 'show' : ''}`} style={{\n                    zIndex: -1\n                }}>\n                </div>\n            </div>\n        </>\n    )\n}\nexport default SBDownloadBtn;","import React from \"react\";\nimport SBSpinner from \"./SBSpinner\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SBSubmitBtn = (props: any) => {\n\n    const { buttonId, buttonTxt, customClass, isLoading, isDisabled, buttonTitle, formId } = props;\n\n    return (\n        <>\n            {isLoading ? <SBSpinner color={\"success\"} /> :\n                <button \n                    id={buttonId || 'submitBtn'} \n                    type={'submit'} \n                    form={formId}\n                    title={buttonTitle || \"Submit\"} \n                    className={'btn btn-sm btn-success border-0 hoverSubmit ' + customClass} \n                    disabled={isDisabled}>\n                        <span>{buttonTxt || \"Submit\"}</span>\n                        <FontAwesomeIcon icon={faPaperPlane} />\n                </button>\n            }\n        </>\n    )\n}\nexport default SBSubmitBtn;","import React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { faExclamationCircle, faTrash, faXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { info, loadFile } from \"actions/util\";\nimport { getAllSchemas } from \"reducers/util\";\nimport { LANG_JADN } from \"components/utils/constants\";\nimport { isString } from \"components/utils/general\";\nimport { SelectedSchema } from \"components/transform/SchemaTransformer\";\nimport { dismissAllToast, sbToastError } from \"./SBToast\";\nimport SBEditor from \"./SBEditor\";\nimport SBSelect, { Option } from \"./SBSelect\";\n\ninterface SBMultiSchemaLoaderProps {\n    isLoading: boolean;\n    onLoading: (isLoading: boolean) => void;\n    selectedSchemas: SelectedSchema[];\n    onSelectedSchemaAdd: (schema: SelectedSchema) => void;\n    onSelectedSchemaReplaceAll: (schemas: SelectedSchema[]) => void;\n    onSelectedSchemaRemove: (schema_to_remove: string) => void;\n}\n\nconst SBMultiSchemaLoader = forwardRef((props: SBMultiSchemaLoaderProps, ref) => {\n    const {\n        onLoading,\n        selectedSchemas,\n        onSelectedSchemaAdd,\n        onSelectedSchemaReplaceAll,\n        onSelectedSchemaRemove } = props;\n\n    const dispatch = useDispatch();\n\n    // Used by SBFileUploader\n    const [selectedFile, setSelectedFile] = useState<null | 'file'>(null);\n    const sbFileUploaderRef = useRef<HTMLInputElement | null>(null);\n\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);\n    const [toggle, setToggle] = useState<{ [key: string]: boolean }>({});\n\n    // Used by SBSelector, preloads with schemas selections\n    const schemaOpts = useSelector(getAllSchemas);\n\n    useEffect(() => {\n        dispatch(info());\n    }, [dispatch]);\n\n    // Allows parent to call child function\n    useImperativeHandle(ref, () => ({\n        onReset() {\n            dismissAllToast();\n            setToggle({});\n            setSelectedFile(null);\n            setSelectedOptions([]);\n        },\n    }));\n\n    const onToggle = (index: number) => {\n        setToggle((prev) => ({ ...prev, [index]: !prev[index] }));\n    }\n\n    const isDupSchemaName = (name: string, schemas: SelectedSchema[]) => {\n        let is_dup: boolean = false;\n        schemas?.map((schema: SelectedSchema) => {\n            if (name == schema.name) {\n                is_dup = true;\n            }\n        });\n\n        return is_dup;\n    }\n\n    const onFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        onLoading(true);\n        if (e.target.files && e.target.files.length != 0) {\n            const chosenFiles = Array.prototype.slice.call(e.target.files);\n            chosenFiles.forEach((file) => {\n                if (!isDupSchemaName(file.name, selectedSchemas)) {\n                    const fileReader = new FileReader();\n                    fileReader.onload = (ev: ProgressEvent<FileReader>) => {\n                        if (ev.target && ev.target.result && isString(ev.target.result)) {\n                            try {\n                                let dataObj = JSON.parse(ev.target.result);\n\n                                // Add to schemas\n                                const new_schema: SelectedSchema = { 'id': uuidv4(), 'name': file['name'], 'type': 'schemas', 'data': dataObj };\n                                onSelectedSchemaAdd(new_schema);\n\n                                // Add to seleted options\n                                setSelectedOptions([\n                                    ...selectedOptions,\n                                    { 'value': file['name'], 'label': file['name'] }\n                                ]);\n\n                            } catch (err) {\n                                sbToastError(`File cannot be loaded: Invalid JSON`);\n                            }\n                        }\n                    };\n                    fileReader.readAsText(file);\n                } else {\n                    sbToastError(`${file.name} already exists`);\n                }\n            });\n        }\n        setSelectedFile(null);\n        onLoading(false);\n    }\n\n    const onCancelFileUpload = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        onLoading(false);\n        setSelectedFile(null);\n    }\n\n    const onGetSchemaData = (schema_name: string) => {\n        return dispatch(loadFile('schemas', schema_name))\n            .then((response) => {\n                return response.payload.data;\n            })\n            .catch((loadFileErr) => { sbToastError(loadFileErr.payload.data); });\n    };\n\n\n    const onSelectChange = async (options: Option[]) => {\n        // If user clicks 'file upload'...\n        if (options.value == 'file') {\n            sbFileUploaderRef.current?.click();\n            return;\n        }\n\n        onSelectedSchemaRemove('');  // clear all\n\n        let schemas_to_load: SelectedSchema[] = [];\n        await Promise.all(\n            options.map(async (option) => {\n                const schema_data: SelectedSchema = await onGetSchemaData(option.label);\n                const new_schema: SelectedSchema = { 'id': uuidv4(), 'name': option.label, 'type': 'schemas', 'data': schema_data };\n                schemas_to_load.push(new_schema);\n                // props.onSelectedSchemaAdd(new_schema);  // Causes a duplicate bug to appear                           \n            }));\n\n        onSelectedSchemaReplaceAll(schemas_to_load);\n\n        setSelectedOptions([\n            ...options\n        ]);\n\n    }\n\n    const onRemoveSchema = (name: string) => {\n        onSelectedSchemaRemove(name);\n        setSelectedOptions(selectedOptions.filter((option) => option.value !== name));\n    }\n\n    const listSchemas = selectedSchemas?.map((schema: SelectedSchema, i: number) => {\n        return (\n            <div className=\"card\" key={schema.id}>\n                <div className=\"card-header\">\n                    <h5 className=\"mb-0 d-flex justify-content-between align-items-center\">\n                        <button className={schema.data == 'err' ? `btn` : `btn btn-link`} id={`toggleMsg#${i}`} type=\"button\" onClick={() => {\n                            onToggle(i);\n                        }}>\n                            {schema.name} {schema.data == 'err' ? <FontAwesomeIcon style={{ color: 'red' }} title={'Invalid JADN. Please remove or fix schema.'} icon={faExclamationCircle}></FontAwesomeIcon> : ''}\n                        </button>\n                        <button id='removeFile' type='button' className='btn btn-sm btn-danger' onClick={() => onRemoveSchema(schema.name)}>\n                            <FontAwesomeIcon icon={faTrash} />\n                        </button>\n                    </h5>\n                </div>\n\n                {toggle[i] == true && schema.data != 'err' ?\n                    <div className=\"card-body\" key={schema.id}>\n                        <SBEditor data={schema.data} isReadOnly={true} height={'35vh'}></SBEditor>\n                    </div>\n                    : ''}\n            </div>\n        )\n    })\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <div className=\"row no-gutters\">\n                    <div className=\"col-md-6\">\n                        <div className={`${selectedFile == 'file' ? ' d-none' : ''}`}>\n                            <div className=\"input-group\">\n                                <SBSelect id={\"schema-list\"}\n                                    data={schemaOpts}\n                                    onChange={onSelectChange}\n                                    placeholder={'Select schema...(at least one)'}\n                                    loc={'schemas'}\n                                    value={selectedOptions}\n                                    isGrouped\n                                    isFileUploader\n                                    isMultiSelect\n                                    isSmStyle \n                                    isClearable/>\n                            </div>\n                        </div>\n                        <div className={`${selectedFile == 'file' ? '' : ' d-none'}`} style={{ display: 'inline' }}>\n                            <input type=\"file\" id=\"file-input\" name=\"file-input\" accept={LANG_JADN} onChange={onFileUpload} ref={sbFileUploaderRef} multiple={true} />\n                            <button id=\"cancelFileUpload\" type='button' className=\"btn btn-sm btn-secondary ms-0\" onClick={() => onCancelFileUpload} style={{ display: 'inline' }}>\n                                <FontAwesomeIcon icon={faXmark}></FontAwesomeIcon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-body-page\">\n                {listSchemas}\n            </div>\n        </div>\n    )\n})\nexport default SBMultiSchemaLoader;\n","import React, { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getValidTransformations } from \"reducers/transform\";\nimport { transformSchema } from \"actions/transform\";\nimport SBCopyToClipboard from \"components/common/SBCopyToClipboard\";\nimport SBEditor from \"components/common/SBEditor\";\nimport SBSelect, { Option } from \"components/common/SBSelect\";\nimport SBSaveFile from \"components/common/SBSaveFile\";\nimport SBDownloadBtn from \"components/common/SBDownloadBtn\";\nimport { LANG_JADN } from \"components/utils/constants\";\nimport { dismissAllToast, sbToastError, sbToastSuccess } from \"components/common/SBToast\";\nimport { SelectedSchema } from \"components/transform/SchemaTransformer\";\nimport SBSubmitBtn from \"components/common/SBSubmitBtn\";\n\n\ninterface SchemaTransformedProps {\n    isLoading: boolean;\n    onLoading: (isLoading: boolean) => void;\n    onSelectedSchemaReplaceAll: (schemas: SelectedSchema[]) => void;\n    selectedSchemas: SelectedSchema[];\n    formId: string;\n}\n\nexport const initTransformedSchema = {\n    schema: '',\n    schema_name: '',\n    schema_fmt: ''\n}\n\nconst SchemaTransformed = forwardRef((props: SchemaTransformedProps, ref) => {\n    const { isLoading, onLoading, onSelectedSchemaReplaceAll, selectedSchemas, formId } = props;\n    const dispatch = useDispatch();\n\n    const transformationOpts = useSelector(getValidTransformations);\n\n    const [toggle, setToggle] = useState<{ [key: string]: boolean }>({});\n    const [isTransformDisabled, setIsTransformDisabled] = useState(true);\n    const [baseFile, setBaseFile] = useState<Option | null>();\n    const [transformationType, setTransformationType] = useState<Option | null>();\n    const [baseFileOpts, setBaseFileOpts] = useState<String[]>([]);\n    const [transformedSchema, setTransformedSchema] = useState([initTransformedSchema]);\n\n    const strip_comments: string = 'strip comments';\n    const resolve_references: string = 'resolve references';\n\n    useEffect(() => {\n        setTransformedSchema([initTransformedSchema]);\n        setBaseFile(null);\n    }, [selectedSchemas]);\n\n    useEffect(() => {\n        setIsTransformDisabled(true);\n        if (selectedSchemas && selectedSchemas.length > 0 && transformationType && transformationType.value) {\n            if (transformationType.value == strip_comments) {\n                setIsTransformDisabled(false);\n            }\n            if (transformationType.value == resolve_references && baseFile) {\n                setIsTransformDisabled(false);\n            }\n        }\n\n        let base_opts: String[] = selectedSchemas.map((ss: SelectedSchema) => { return (ss.name) });\n        setBaseFileOpts(base_opts);\n\n    }, [selectedSchemas, baseFile, transformationType]);\n\n    // Allows parent to call child function\n    useImperativeHandle(ref, () => ({\n        onReset() {\n            dismissAllToast();\n            setToggle({});\n            setBaseFile(null);\n            setTransformedSchema([initTransformedSchema]);\n            setTransformationType(null);\n        },\n    }));\n\n    const onToggle = (index: number) => {\n        setToggle((prev) => ({ ...prev, [index]: !prev[index] }));\n    }\n\n    const onSelectTypeChange = (opt: Option) => {\n        setBaseFile(null);\n        setTransformedSchema([initTransformedSchema]);\n        setTransformationType(opt);\n    }\n\n    const onBaseFileSelect = (opt: Option) => {\n        setTransformedSchema([initTransformedSchema]);\n        setBaseFile(opt);\n    }\n\n    const submitForm = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        onLoading(true);\n        const selectedBasefile = baseFile?.value ? baseFile.value : '';\n        dispatch(transformSchema(selectedSchemas, transformationType.value, selectedBasefile))\n            .then((val) => {\n                if (val.error == true) {\n                    let invalid_schema_list: any[] = [];\n                    if (typeof val.payload.response == \"object\") {\n\n                        val.payload.response.forEach((schema) => {\n                            sbToastError(`${schema.name} : ${schema.err}`);\n                            invalid_schema_list.push(schema.name);\n                        });\n\n                        // invalidate selectedFiles \n                        const invalidFiles = selectedSchemas.map((ss) => {\n                            if (invalid_schema_list.includes(ss.name)) {\n                                return { ...ss, 'data': 'err' };\n                            } else {\n                                return ss;\n                            }\n                        });\n                        onSelectedSchemaReplaceAll(invalidFiles);\n\n                    } else {\n                        sbToastError(val.payload.response);\n                    }\n\n                } else {\n                    sbToastSuccess('Transformed Schema successfully');\n                    setTransformedSchema(val.payload);\n                }\n            })\n            .catch((err) => {\n                sbToastError(err);\n            })\n            .finally(() => {\n                onLoading(false);\n            });\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <form id={formId} onSubmit={submitForm}>\n                    <div className='row no-gutters'>\n                        <div className='col-md-9'>\n                            <div className=\"row\">\n                                <div className=\"col-sm-6\">\n                                    <SBSelect id={\"transformation-list\"} data={transformationOpts} onChange={onSelectTypeChange}\n                                        placeholder={'Select transformation type...'} value={transformationType} isSmStyle isClearable\n                                    />\n                                </div>\n                                <div className={`col-sm-6 ${transformationType?.value == 'resolve references' ? '' : ' d-none'}`}>\n                                    <SBSelect id={\"base-file\"} data={baseFileOpts} onChange={onBaseFileSelect}\n                                        placeholder={'Select base file...'} value={baseFile} isSmStyle isClearable\n                                        customNoOptionMsg={'Select a schema to begin'}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='col-md-3 align-self-center'>\n                            <div className={`${transformedSchema && (transformedSchema.length == 1) && transformedSchema[0].schema != '' ? '' : ' d-none'}`}>\n                                <SBCopyToClipboard buttonId='copyConvertedSchema' data={transformedSchema[0].schema} customClass={`float-end`} />\n                                <SBSaveFile data={transformedSchema[0].schema} loc={'schemas'} customClass={`me-1 float-end`} filename={baseFile?.value} ext={transformedSchema[0].schema_fmt || LANG_JADN} />\n                                <SBDownloadBtn buttonId='schemaDownload' customClass={`me-1 float-end`} filename={baseFile?.value} data={transformedSchema[0].schema} ext={transformedSchema[0].schema_fmt || LANG_JADN} />\n                            </div>\n                            <SBSubmitBtn buttonId=\"transformSchema\"\n                                buttonTitle=\"Process JADN schema(s) to produce another JADN schema\"\n                                buttonTxt=\"Transform\"\n                                customClass=\"me-1 float-end\"\n                                isLoading={isLoading}\n                                formId={formId}\n                                isDisabled={isTransformDisabled}>\n                            </SBSubmitBtn>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div className=\"card-body-page\">\n                {transformedSchema.length > 1 ? transformedSchema.map((output, i: number) => (\n                    <div className=\"card\" key={i}>\n                        <div className=\"card-header\">\n                            <h5 className=\"mb-0\">\n                                <button className=\"btn btn-link\" id={`toggleSchema#${i}`} type=\"button\" onClick={() => onToggle(i)} >\n                                    {output.schema_name}\n                                </button>\n                                <SBCopyToClipboard buttonId={`copySchema${i}`} data={output.schema} customClass='float-end' />\n                                <SBSaveFile data={output.schema} loc={'schemas'} customClass={\"float-end me-1\"} filename={`${output.schema_name}`} ext={LANG_JADN} />\n                                <SBDownloadBtn buttonId={`downloadSchema${i}`} customClass='me-1 float-end' filename={`${output.schema_name}`} data={output.schema} ext={LANG_JADN} />\n                            </h5>\n                        </div>\n\n                        {toggle[i] == true ?\n                            <div className=\"card-body\" key={i}>\n                                <SBEditor data={output.schema} isReadOnly={true} height={'35vh'}></SBEditor>\n                            </div> : ''}\n                    </div>\n                )) :\n                    <SBEditor data={transformedSchema[0].schema} isReadOnly={true}></SBEditor>}\n            </div>\n        </div>\n    )\n})\nexport default SchemaTransformed;","import React, { useEffect, useRef, useState } from 'react'\nimport { Helmet } from 'react-helmet-async'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getPageTitle } from 'reducers/util'\nimport { info } from 'actions/transform'\nimport { dismissAllToast } from 'components/common/SBToast'\nimport SBMultiSchemaLoader from 'components/common/SBMultiSchemaLoader'\nimport SchemaTransformed from './SchemaTransformed'\n\n\nexport interface SelectedSchema { id: string, name: string, type: string, data: {} };\n\nconst SchemaTransformer = () => {\n    const dispatch = useDispatch();\n\n    const schemaTransformedRef = useRef();\n    const sbMultiSchemaLoaderRef = useRef();\n\n    const [selectedSchemas, setSelectedSchemas] = useState<SelectedSchema[]>([]);\n    const prevSelectedSchemasRef = useRef<SelectedSchema[]>([]);  // Used to reload schema data that's not on the server\n    const [isLoading, setIsLoading] = useState(false);\n\n    const meta_title = useSelector(getPageTitle) + ' | Schema Transformation'\n    const meta_canonical = `${window.location.origin}${window.location.pathname}`;\n    const formId = \"transformation_form\";\n\n    useEffect(() => {\n        dispatch(info());\n        dismissAllToast();\n    }, [dispatch]);\n\n    useEffect(() => {\n        /**\n         * assign the latest render value of count to the ref\n         * However, assigning a value to ref doesn't re-render the app\n         * So, prevCountRef.current in the return statement displays the\n         * last value in the ref at the time of render i.e., the previous state value.\n         */\n        if (selectedSchemas.length > 0) {\n            prevSelectedSchemasRef.current = [...selectedSchemas];\n        }\n\n    }, [selectedSchemas]);\n\n    const onReset = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        dismissAllToast();\n        setSelectedSchemas([]);\n        schemaTransformedRef.current?.onReset();\n        sbMultiSchemaLoaderRef.current?.onReset();\n    }\n\n    const onSelectedSchemaAdd = (new_schema: SelectedSchema) => {\n        setSelectedSchemas([\n            ...selectedSchemas,\n            new_schema\n        ]);\n    }\n\n    const onSelectedSchemaReplaceAll = (new_schemas: SelectedSchema[]) => {\n        // Check for empty data caused by uploaded schemas not saved on the server\n        new_schemas?.map((schema: SelectedSchema) => {\n            if (!schema.data) {\n                prevSelectedSchemasRef.current.map((prev_schema: SelectedSchema) => {\n                    if (schema.name == prev_schema.name) {\n                        schema.data = prev_schema.data;\n                    }\n                });\n            }\n        });\n\n        setSelectedSchemas([...new_schemas]);  // Completely replace...     \n    }\n\n    // Pass in '' to clear all schemas\n    const onSelectedSchemaRemove = (schema_to_remove: string) => {\n        if (schema_to_remove) {\n            setSelectedSchemas(selectedSchemas.filter((schema) => schema.name !== schema_to_remove));\n        } else {\n            setSelectedSchemas([]);\n        }\n    }\n\n    const onLoading = (isLoading: boolean) => {\n        setIsLoading(isLoading);\n    }\n\n    return (\n        <div>\n            <Helmet>\n                <title>{meta_title}</title>\n                <link rel=\"canonical\" href={meta_canonical} />\n            </Helmet>\n            <div className='row'>\n                <div className='col-md-12'>\n                    <div className='card'>\n                        <div className='card-header bg-secondary p-2'>\n                            <h5 className='m-0' style={{ display: 'inline' }}><span className='align-middle'>Schema Transformation</span></h5>\n                            <button type='reset' className='btn btn-sm btn-danger float-end' onClick={onReset}>Reset</button>\n                        </div>\n                        <div className='card-body p-2'>\n                            <div className='row'>\n                                <div className='col-md-6 pr-1'>\n                                    <SBMultiSchemaLoader\n                                        ref={sbMultiSchemaLoaderRef}\n                                        isLoading={isLoading}\n                                        onLoading={onLoading}\n                                        selectedSchemas={selectedSchemas}\n                                        onSelectedSchemaAdd={onSelectedSchemaAdd}\n                                        onSelectedSchemaReplaceAll={onSelectedSchemaReplaceAll}\n                                        onSelectedSchemaRemove={onSelectedSchemaRemove}\n                                    />\n                                </div>\n                                <div className='col-md-6 pl-1'>\n                                    <SchemaTransformed\n                                        ref={schemaTransformedRef}\n                                        isLoading={isLoading}\n                                        selectedSchemas={selectedSchemas}\n                                        onSelectedSchemaReplaceAll={onSelectedSchemaReplaceAll}\n                                        onLoading={onLoading}\n                                        formId={formId}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SchemaTransformer"],"names":["props","icon","buttonId","data","customClass","filename","_props$ext","ext","LANG_JADN","_useState","useState","_useState2","_slicedToArray","fileNameInput","setFileNameInput","_useState3","_useState4","toggleDownloadDialog","setToggleDownloadDialog","_useState5","_useState6","isLoading","setIsLoading","FILE_TYPE_PDF","_FontAwesomeIcon","_jsx","FontAwesomeIcon","faFilePdf","FILE_TYPE_SVG","FILE_TYPE_PNG","_FontAwesomeIcon2","faFileImage","_FontAwesomeIcon3","faFileDownload","onDownloadClick","e","fmt","preventDefault","undefined","FILENAME_RULE","test","concat","fetch","method","headers","body","JSON","stringify","schema","then","rsp","blob","elem","document","createElement","href","URL","createObjectURL","download","appendChild","click","remove","revokeObjectURL","err","console","log","sbToastError","sbToastSuccess","onDownloadPDFClick","_document$getElementB","arguments","length","svg","getElementById","innerHTML","Blob","type","saveAs","onDownloadSVGClick","pumlURL","onDownloadPNGClick","formattedData","_typeof","FormatJADN","setTimeout","onDownloadFileClick","sbToastWarning","React","_SBSpinner","SBSpinner","color","id","title","className","onClick","tabIndex","role","_div","_label","htmlFor","autoFocus","value","onChange","target","_label2","readOnly","style","zIndex","buttonTxt","isDisabled","buttonTitle","formId","form","disabled","faPaperPlane","forwardRef","ref","onLoading","selectedSchemas","onSelectedSchemaAdd","onSelectedSchemaReplaceAll","onSelectedSchemaRemove","dispatch","useDispatch","selectedFile","setSelectedFile","sbFileUploaderRef","useRef","selectedOptions","setSelectedOptions","toggle","setToggle","schemaOpts","useSelector","getAllSchemas","useEffect","info","useImperativeHandle","onReset","dismissAllToast","onCancelFileUpload","onSelectChange","_ref","_asyncToGenerator","_regeneratorRuntime","_callee2","options","_sbFileUploaderRef$cu","schemas_to_load","_context2","prev","next","current","abrupt","Promise","all","map","_ref2","_callee","option","schema_data","new_schema","_context","schema_name","label","loadFile","response","payload","loadFileErr","sent","uuidv4","push","stop","_x2","apply","_toConsumableArray","_x","listSchemas","i","index","_objectSpread","_defineProperty","name","faExclamationCircle","filter","faTrash","SBEditor","isReadOnly","height","SBSelect","placeholder","loc","isGrouped","isFileUploader","isMultiSelect","isSmStyle","isClearable","display","accept","files","Array","prototype","slice","call","forEach","file","is_dup","schemas","fileReader","FileReader","onload","ev","result","isString","dataObj","parse","readAsText","multiple","faXmark","initTransformedSchema","schema_fmt","transformationOpts","getValidTransformations","isTransformDisabled","setIsTransformDisabled","baseFile","setBaseFile","_useState7","_useState8","transformationType","setTransformationType","_useState9","_useState10","baseFileOpts","setBaseFileOpts","_useState11","_useState12","transformedSchema","setTransformedSchema","base_opts","ss","onSubmit","selectedBasefile","transformSchema","val","error","invalid_schema_list","invalidFiles","includes","opt","customNoOptionMsg","SBCopyToClipboard","SBSaveFile","SBDownloadBtn","SBSubmitBtn","output","schemaTransformedRef","sbMultiSchemaLoaderRef","setSelectedSchemas","prevSelectedSchemasRef","meta_title","getPageTitle","meta_canonical","window","location","origin","pathname","new_schemas","prev_schema","Helmet","rel","_span","_schemaTransformedRef","_sbMultiSchemaLoaderR","SBMultiSchemaLoader","schema_to_remove","SchemaTransformed"],"sourceRoot":""}