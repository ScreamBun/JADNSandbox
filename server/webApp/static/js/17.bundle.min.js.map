{"version":3,"file":"js/17.bundle.min.js","mappings":"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","sources":["webpack://client/./src/components/common/SBDownloadBtn.tsx","webpack://client/./src/components/common/SBFileLoader.tsx","webpack://client/./src/components/common/SBScrollToTop.tsx","webpack://client/./src/components/common/SBValidateSchemaBtn.tsx","webpack://client/./src/components/create/consts.ts","webpack://client/./src/components/create/schema/structure/editors/options/consts.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { faFileDownload, faFileImage, faFilePdf } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { sbToastError, sbToastSuccess, sbToastWarning } from \"./SBToast\";\nimport SBSpinner from \"./SBSpinner\";\nimport { FormatJADN } from \"components/utils\";\nimport saveAs from \"file-saver\";\nimport { FILENAME_RULE, FILE_TYPE_PDF, FILE_TYPE_PNG, FILE_TYPE_SVG, LANG_JADN } from \"components/utils/constants\";\n\nexport const onDownloadPNGClick = (pumlURL: any, filename: string = \"plantuml\") => {\n    saveAs(pumlURL, `${filename}.png`);\n}\n\nexport const onDownloadSVGClick = (e: React.MouseEvent<HTMLButtonElement>, filename: string = \"graphviz\") => {\n    e.preventDefault();\n    const svg = document.getElementById(\"fullGV\")?.innerHTML;\n    if (svg) {\n        var blob = new Blob([svg], { type: \"image/svg+xml\" });\n        saveAs(blob, `${filename}.svg`);\n    } else {\n        sbToastError('Error: Unable to download GraphViz file.')\n    }\n}\n//TODO: Add ability to save in other extensions ? \nconst SBDownloadBtn = (props: any) => {\n\n    const { buttonId, data, customClass, filename, ext = LANG_JADN } = props;\n\n    const [fileNameInput, setFileNameInput] = useState(filename);\n    const [toggleDownloadDialog, setToggleDownloadDialog] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setFileNameInput(e.target.value);\n    }\n\n    const onDownloadIconClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        setToggleDownloadDialog(true);\n    }\n\n    const onDownloadFileClick = (e: React.MouseEvent<HTMLButtonElement>, fmt: string) => {\n        e.preventDefault();\n        if (!data) {\n            sbToastError('No data to download');\n            return;\n        }\n\n        setIsLoading(true);\n        try {\n            const filename = `${fileNameInput}.${fmt}`;\n            let formattedData = typeof data == \"object\" ? FormatJADN(data) : data;\n\n            const blob = new Blob([formattedData], { type: \"application/json\" });\n            //content: `data:application/json;charset=utf-8,${encodeURIComponent(FormatJADN(prevState.schema))}`\n            const elem = document.createElement('a');\n            elem.href = URL.createObjectURL(blob);\n            elem.download = filename;\n            document.body.appendChild(elem);\n            elem.click();\n\n            // To make this work on Firefox we need to wait\n            // a little while before removing it.\n            setTimeout(() => {\n                elem.remove();\n                URL.revokeObjectURL(elem.href);\n            }, 0);\n            sbToastSuccess('File downloaded')\n\n        } catch (err) {\n            console.log(err);\n            sbToastError(`File cannot be downloaded`);\n        }\n    }\n\n    const onDownloadPDFClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        const filename = `${fileNameInput}.pdf`;\n        setIsLoading(true);\n        try {\n            fetch('/api/convert/pdf', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    schema: data\n                })\n            }).then(\n                rsp => rsp.blob()\n            ).then(blob => {\n                const elem = document.createElement('a');\n                elem.href = URL.createObjectURL(blob);\n                elem.download = filename;\n                document.body.appendChild(elem);\n                elem.click();\n\n                elem.remove();\n                URL.revokeObjectURL(elem.href);\n            }).catch(err => {\n                console.log(err);\n                sbToastError(`PDF cannot be downloaded`);\n            });\n\n        } catch (err) {\n            console.log(err);\n            sbToastError(`PDF cannot be downloaded`);\n        }\n\n        sbToastSuccess('PDF downloaded successfully');\n    }\n\n\n    let icon;\n    if (ext == FILE_TYPE_PDF) {\n        icon = <FontAwesomeIcon icon={faFilePdf} />;\n    } else if (ext == FILE_TYPE_SVG || ext == FILE_TYPE_PNG) {\n        icon = <FontAwesomeIcon icon={faFileImage} />;\n    } else {\n        icon = <FontAwesomeIcon icon={faFileDownload} />;\n    }\n\n\n    const onDownloadClick = (e: React.MouseEvent<HTMLButtonElement>, fmt: string) => {\n        e.preventDefault();\n        if (fileNameInput == '' || fileNameInput == undefined) {\n            sbToastWarning('Please enter a file name.');\n            return;\n        } else if (!FILENAME_RULE.test(fileNameInput)) {\n            sbToastWarning(\"Please do not use special characters in file name.\");\n            return;\n        }\n\n        switch (fmt) {\n            case FILE_TYPE_PDF:\n                onDownloadPDFClick(e);\n                break;\n            case FILE_TYPE_SVG:\n                onDownloadSVGClick(e, fileNameInput);\n                break;\n            case FILE_TYPE_PNG:\n                onDownloadPNGClick(data, fileNameInput);\n                break;\n            default:\n                //jadn, json, html, md, gv, puml, jidl\n                onDownloadFileClick(e, ext);\n        }\n\n        setIsLoading(false);\n        setToggleDownloadDialog(false);\n    }\n\n    return (\n        <>\n            {isLoading ? <SBSpinner color={\"primary\"} /> :\n                <button id={buttonId || 'downloadBtn'} type='button' title={`Download ${ext} File`} className={'btn btn-sm btn-primary ' + customClass} onClick={onDownloadIconClick}>\n                    {icon}\n                </button>}\n\n            <div id=\"downloadFileModal\" className={`modal fade ${toggleDownloadDialog ? 'show d-block' : 'd-none'}`} tabIndex={-1} role='dialog'>\n                <div className={`modal-dialog modal-dialog-centered`} role='document'>\n                    <div className='modal-content'>\n                        <div className=\"modal-header\">\n                            <div className=\"form col\">\n                                <div className=\"form row\">\n                                    <h5 className='modal-title'>\n                                        Download As...\n                                    </h5>\n                                </div>\n                                <div className=\"form row\">\n                                    <small className=\"text-muted\"> {`Download file to local computer`}</small>\n                                </div>\n                            </div>\n                            <button type='button' className='btn-close' data-bs-dismiss='modal' aria-label='Close' title='Close' onClick={() => setToggleDownloadDialog(false)} />\n                        </div>\n                        <div className=\"modal-body\">\n                            <div className=\"row\">\n                                <label htmlFor=\"filenameDownload\" className=\"col-sm-4 col-label\">File name:</label>\n                                <div className=\"col-sm-8\">\n                                    <input id='filenameDownload' className=\"form-control\" type=\"text\" autoFocus={true} value={fileNameInput} onChange={onChange} />\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <label htmlFor=\"downloadFileAsType\" className=\"col-sm-4 col-label\">Save as type:</label>\n                                <div className=\"col-sm-8\">\n                                    <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"downloadFileAsType\" value={ext} />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type='button' className='btn btn-sm btn-success' onClick={(e) => onDownloadClick(e, ext)}>Download</button>\n                            <button type='button' className='btn btn-sm btn-secondary' onClick={() => { setIsLoading(false); setToggleDownloadDialog(false); }}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n                <div className={`modal-backdrop fade ${toggleDownloadDialog ? 'show' : ''}`} style={{\n                    zIndex: -1\n                }}>\n                </div>\n            </div>\n        </>\n    )\n}\nexport default SBDownloadBtn;","import React, { forwardRef } from \"react\";\nimport SBSaveFile from \"./SBSaveFile\";\nimport SBSelect, { Option } from \"./SBSelect\";\nimport { useDispatch } from \"react-redux\";\nimport { loadFile } from \"actions/util\";\nimport { sbToastError } from \"./SBToast\";\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { LANG_JADN } from \"components/utils/constants\";\n\ninterface SBFileLoaderProps {\n    customClass?: string;\n    opts: any[];\n    selectedOpt: Option | null;\n    setSelectedFile?: (fileOpt: Option | null) => void;\n    placeholder: string;\n    loc: 'schemas' | 'messages';\n    onCancelFileUpload: (e: React.MouseEvent<HTMLButtonElement> | React.ChangeEvent<HTMLInputElement> | null) => void;\n    onFileChange: (fileData?: string | ArrayBuffer | null, fileName?: Option | undefined) => void;\n    acceptableExt?: string | undefined;\n    isSaveable?: boolean;\n    loadedFileData?: any;\n    fileName?: {\n        name: string,\n        ext: string\n    };\n    fileExt?: string;\n}\n\nconst SBFileLoader = forwardRef(function SBLoadSchema(props: SBFileLoaderProps, ref) {\n    const dispatch = useDispatch();\n    const { customClass, opts, selectedOpt, loadedFileData,\n        setSelectedFile, placeholder, loc,\n        acceptableExt, onCancelFileUpload, onFileChange,\n        isSaveable, fileName, fileExt = LANG_JADN } = props;\n\n    const handleFileSelect = (e: Option) => {\n        if (e == null) {\n            onCancelFileUpload(null);\n            return;\n\n        } else if (e.value == \"file\") {\n            ref.current.value = '';\n            ref.current?.click();\n\n        } else {\n            dispatch(loadFile(loc, e.value))\n                .then(async (loadFileVal) => {\n                    if (loadFileVal.error) {\n                        sbToastError(loadFileVal.payload.response);\n                        return;\n                    }\n                    let dataObj = loadFileVal.payload.data;\n                    onFileChange(dataObj, e);\n                })\n                .catch((loadFileErr) => {\n                    sbToastError(loadFileErr.payload.data);\n                    onFileChange();\n                })\n        }\n    };\n\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        if (e.target.files && e.target.files.length != 0) {\n            const file = e.target.files[0];\n            const fileReader = new FileReader();\n            fileReader.onload = (ev: ProgressEvent<FileReader>) => {\n                if (ev.target) {\n                    let dataStr = ev.target.result;\n                    onFileChange(dataStr, { value: file.name, label: file.name });\n                }\n            };\n            fileReader.readAsText(file);\n        }\n    }\n\n    return (\n        <>\n            <div className={`d-flex + ${customClass}`}>\n                <SBSelect id={\"file-select\"}\n                    data={opts}\n                    onChange={handleFileSelect}\n                    placeholder={placeholder}\n                    loc={loc}\n                    value={selectedOpt}\n                    isGrouped\n                    isFileUploader\n                    isSmStyle\n                    isClearable\n                />\n                {isSaveable && <SBSaveFile buttonId=\"saveFile\" toolTip={'Save as..'} data={loadedFileData} loc={loc} customClass={\"float-end ms-1\"}\n                    filename={fileName?.name} ext={fileExt} setDropdown={setSelectedFile} />}\n            </div>\n            <div className='d-none'>\n                <input type=\"file\" id=\"file-input\" name=\"file-input\" accept={acceptableExt} onChange={handleFileChange} ref={ref} />\n                <button id=\"cancelFileUpload\" type='button' className=\"btn btn-sm btn-secondary ms-0\" onClick={() => onCancelFileUpload} style={{ display: 'inline' }}>\n                    <FontAwesomeIcon icon={faXmark}></FontAwesomeIcon>\n                </button>\n            </div >\n        </>\n    );\n});\n\nexport default SBFileLoader;","import { faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useState } from \"react\";\n\ninterface SBScrollToTopProps {\n    divID: string;\n}\n\nconst SBScrollToTop = (props: SBScrollToTopProps) => {\n\n    const { divID } = props;\n    const [isVisible, setIsVisible] = useState(false);\n\n    useEffect(() => {\n        document.getElementById(divID)?.addEventListener(\"scroll\", toggleVisibility, false);\n        return () =>\n            document.getElementById(divID)?.removeEventListener(\"scroll\", toggleVisibility, false);\n    }, [])\n\n    const toggleVisibility = () => {\n        if (divID && document.getElementById(divID)?.scrollTop) {\n            setIsVisible(true);\n        } else if (window.scrollY > 20 || document.body.scrollTop > 20 ||\n            document.documentElement.scrollTop > 20) {\n            setIsVisible(true);\n        } else {\n            setIsVisible(false);\n        }\n    }\n\n    const onScrollUp = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        document.getElementById(divID)?.scrollTo({\n            top: 0,\n            behavior: 'smooth',\n        });\n    }\n\n    return (\n        <button id=\"scrollToTopBtn\" className=\"btn btn-primary scroll-top-btn\"\n            title=\"Scroll to the top of the page\"\n            onClick={onScrollUp} style={{ opacity: isVisible ? '55' : '0' }}>\n            <FontAwesomeIcon icon={faArrowUp} />\n        </button >\n    );\n}\n\nexport default SBScrollToTop;","import { faCheck, faXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { setSchema } from \"actions/util\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { sbToastSuccess, dismissAllToast, sbToastError } from \"./SBToast\";\nimport { validateSchema } from \"actions/validate\";\nimport { LANG_JADN, LANG_JSON } from \"components/utils/constants\";\n\nconst SBValidateSchemaBtn = (props: any) => {\n\n    const { isValid, setIsValid, setIsValidating, schemaData, schemaFormat, customClass } = props;\n    const dispatch = useDispatch();\n\n    const onValidateClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        dismissAllToast();\n        setIsValid(false);\n\n        if (!schemaData) {\n            sbToastError('Validation Error: No Schema to validate');\n            setIsValidating(false);\n            return;\n        }\n\n        setIsValidating(true);\n\n        let jsonObj = schemaData;\n        if (typeof jsonObj == 'string') {\n            try {\n                jsonObj = JSON.parse(jsonObj);\n            } catch (err: any) {\n                sbToastError(`Invalid JSON: ${err.message}`)\n                setIsValidating(false);\n                return;\n            }\n        }\n\n        if (schemaFormat == LANG_JSON) {\n            validateJSONSchema(jsonObj);\n        } else {\n            validateJADNSchema(jsonObj);\n        }\n\n        setIsValidating(false);\n    }\n\n\n    const validateJADNSchema = (jsonObj: any) => {\n        try {\n            dispatch(validateSchema(jsonObj, LANG_JADN))\n                .then((validateSchemaVal: any) => {\n                    if (validateSchemaVal.payload.valid_bool == true) {\n                        setIsValid(true);\n                        dispatch(setSchema(jsonObj));\n                        sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                    } else {\n                        dispatch(setSchema(null));\n                        sbToastError(validateSchemaVal.payload.valid_msg);\n                    }\n                })\n                .catch((validateSchemaErr) => {\n                    dispatch(setSchema(null));\n                    sbToastError(validateSchemaErr.payload.valid_msg)\n                }).finally(() => {\n                    setIsValidating(false);\n                })\n\n        } catch (err) {\n            if (err instanceof Error) {\n                dispatch(setSchema(null));\n                setIsValidating(false);\n                sbToastError(err.message)\n            }\n        }\n    }\n\n    const validateJSONSchema = (jsonObj: any) => {\n        try {\n            dispatch(validateSchema(jsonObj, LANG_JSON))\n                .then((validateSchemaVal: any) => {\n                    if (validateSchemaVal.payload.valid_bool == true) {\n                        setIsValid(true);\n                        dispatch(setSchema(jsonObj));\n                        sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                    } else {\n                        dispatch(setSchema(null));\n                        sbToastError(validateSchemaVal.payload.valid_msg);\n                    }\n                })\n                .catch((validateSchemaErr) => {\n                    dispatch(setSchema(null));\n                    sbToastError(validateSchemaErr.payload.valid_msg)\n\n                }).finally(() => {\n                    setIsValidating(false);\n                })\n        } catch (err) {\n            if (err instanceof Error) {\n                sbToastError(err.message)\n                setIsValidating(false);\n                sbToastError(err.message)\n            }\n        }\n    }\n\n    return (\n        <>\n            <button id='validateJADNButton' type='button' className={`btn btn-sm btn-primary ms-1 me-1 + ${customClass}`} title={isValid ? \"Schema is valid\" : \"Click to validate Schema\"}\n                onClick={onValidateClick}>\n                <span className=\"m-1\">Valid</span>\n                {isValid ? (\n                    <span className=\"badge rounded-pill text-bg-success\">\n                        <FontAwesomeIcon icon={faCheck} />\n                    </span>) : (\n                    <span className=\"badge rounded-pill text-bg-danger\">\n                        <FontAwesomeIcon icon={faXmark} />\n                    </span>)\n                }\n            </button>\n        </>\n    );\n};\n\nexport default SBValidateSchemaBtn;","//For Binary, String, Array, ArrayOf, Map, MapOf, and Record types: if maxv is not present or is zero, it defaults to\nexport const $MAX_BINARY = 255;     //Maximum number of octets\nexport const $MAX_STRING = 255;     //Maximum number of characters\nexport const $MAX_ELEMENTS = 100;   //Maximum number of items/properties for Map, MapOf, Record, Array, ArrayOf,\nexport const $SYS = '$' // String{1..1} optional      // System character for TypeName\nexport const $TYPENAME = '^[A-Z][-$A-Za-z0-9]{0,63}$' // String{1..127} optional    // TypeName regex\nexport const $FIELDNAME = '^[a-z][_A-Za-z0-9]{0,63}$' // String{1..127} optional    // FieldName regex\nexport const $NSID = '^[A-Za-z][A-Za-z0-9]{0,7}$' // String{1..127} optional    // Namespace Identifier regex \n//For Binary, String, Array, ArrayOf, Map, MapOf, and Record types: if minv is not present, it defaults to zero.\nexport const $MINV = 0;\n\n/* Unimplemented defaults:\nif minc is not present, it defaults to 1.\nif maxc is not present, it defaults to the greater of 1 or minc.\nif maxc is 0, it defaults to the MaxElements\nif maxc is less than minc, the field definition MUST be considered invalid. \n*/\n\n//The default value of TypeOptions, Fields, and FieldOptions is the empty Array. \n//The default value of TypeDescription and FieldDescription is the empty String. \n//When serializing, default values MAY be included or omitted in the serialized document. \n//When deserializing, default values MUST be available from the API instance if not present in the document.","import { invertObject, objectFromTuple, safeGet } from '../../../../../utils';\n\n// Interfaces\nexport type Val = [k: string, v: any];\nexport type OptionChange = (v: Val, t: 'field' | 'type') => void;\n\n// Consts\nexport const TypeOptions = {\n  'id': '=',         // Enumerated type and Choice/Map/Record keys are ID not Name\n  'vtype': '*',      // Value type for ArrayOf and MapOf\n  'ktype': '+',      // Key type for MapOf\n  'enum': '#',       // enumeration derived from Array/Choice/Map/Record type\n  'pointer': '>',    // enumeration of pointers derived from Array/Choice/Map/Record type\n  'format': '/',     // semantic validation keyword, may affect serialization\n  'pattern': '%',    // regular expression that a string must match\n  'minf': 'y',       // minimum Number value\n  'maxf': 'z',       // maximum Number value\n  'minv': '{',       // minimum byte or text string length, Integer value, element count\n  'maxv': '}',       // maximum byte or text string length, Integer value, element count\n  'unique': 'q',     // ArrayOf instance must not contain duplicates\n  'set': 's',        // ArrayOf instance is unordered and unique\n  'unordered': 'b',  // ArrayOf instance is unordered and not unique (bag)\n  'extend': 'X',     // Type has an extension point where fields may be appended\n  'default': '!'     // Default value\n};\n\nexport const FieldOptions = {\n  'minc': '[',   // minimum cardinality, default = 1, 0 = field is optional\n  'maxc': ']',   // maximum cardinality, default = 1, 0 = inherited max, not 1 = array\n  'tagid': '&',  // field that specifies the type of this field\n  'dir': '<',    // pointer enumeration treats field as a collection\n  'key': 'K',    // field is a primary key for this type\n  'link': 'L'    // field is a link (foreign key) to an instance of FieldType\n};\n\nexport const OptionTypes = {\n  field: Object.keys(FieldOptions),\n  type: Object.keys(TypeOptions)\n};\n\nexport const OptionIds = invertObject({ ...FieldOptions, ...TypeOptions });\nexport const BoolOpts = ['dir', 'key', 'link', 'id', 'unique', 'set', 'unordered', 'extend'];\nexport const IntegerOpts = ['minc', 'maxc', 'tagid', 'minv', 'maxv'];\nexport const FloatOpts = ['minf', 'maxf'];\nexport const StringOpts = ['default', 'enum', 'format', 'ktype', 'pattern', 'pointer', 'tagid', 'vtype'];\nexport const EnumId = TypeOptions.enum;\nexport const PointerId = TypeOptions.pointer;\n\n// TODO: Use BT format_options\n/* export const ValidFormats: Array<string> = [\n  // JSON Formats\n  'date-time',              // RFC 3339 § 5.6\n  'date',                   // RFC 3339 § 5.6\n  'time',                   // RFC 3339 § 5.6\n  'email',                  // RFC 5322 § 3.4.1\n  'idn-email',              // RFC 6531, or email\n  'hostname',               // RFC 1034 § 3.1\n  'idn-hostname',           // RFC 5890 § 2.3.2.3, or hostname\n  'ipv4',                   // RFC 2673 § 3.2 'dotted-quad'\n  'ipv6',                   // RFC 4291 § 2.2 'IPv6 address'\n  'uri',                    // RFC 3986\n  'uri-reference',          // RFC 3986, or uri\n  'iri',                    // RFC 3987\n  'iri-reference',          // RFC 3987\n  'uri-template',           // RFC 6570\n  'json-pointer',           // RFC 6901 § 5\n  'relative-json-pointer',  // JSONP\n  'regex',                  // ECMA 262\n  // JADN Formats\n  'eui',        // IEEE Extended Unique Identifier (MAC Address), EUI-48 or EUI-64 specified in EUI\n  'ipv4-addr',  // IPv4 address as specified in RFC 791 § 3.1\n  'ipv6-addr',  // IPv6 address as specified in RFC 8200 § 3\n  'ipv4-net',   // Binary IPv4 address and Integer prefix length as specified in RFC 4632 §3.1\n  'ipv6-net',   // Binary IPv6 address and Integer prefix length as specified in RFC 4291 §2.3\n  'i8',         // Signed 8 bit integer, value must be between -128 and 127\n  'i16',        // Signed 16 bit integer, value must be between -32768 and 32767.\n  'i32',        // Signed 32 bit integer, value must be between ... and ...\n  'u\\\\d+',       // Unsigned integer or bit field of <n> bits, value must be between 0 and 2^<n> - 1\n  // Serialization\n  'x',          // Binary-JSON string containing Base16 (hex) encoding of a binary value as defined in RFC 4648 § 8\n  'ipv4-addr',  // Binary-JSON string containing a 'dotted-quad' as specified in RFC 2673 § 3.2.\n  'ipv6-addr',  // Binary-JSON string containing text representation of IPv6 address specified in RFC 4291 § 2.2\n  'ipv4-net',   // Array-JSON string containing text representation of IPv4 address range specified in RFC 4632 § 3.1\n  'ipv6-net'    // Array-JSON string containing text representation of IPv6 address range specified in RFC 4291 § 2.3\n]; */\n\nexport const RequiredOptions: Record<string, Array<string>> = {\n  // Primitives\n  Binary: [],\n  Boolean: [],\n  Integer: [],\n  Number: [],\n  String: [],\n  // Structures\n  Array: [],\n  ArrayOf: ['vtype'],\n  Choice: [],\n  Enumerated: [],\n  Map: [],\n  MapOf: ['ktype', 'vtype'],\n  Record: []\n};\n\nexport const ValidOptions: Record<string, Array<string>> = {\n  // Primitives\n  Binary: ['minv', 'maxv', 'format'],\n  Boolean: [],\n  Integer: ['minv', 'maxv', 'format'],\n  Number: ['minf', 'maxf', 'format'],\n  String: ['minv', 'maxv', 'format', 'pattern'],\n  // Structures\n  Array: ['extend', 'format', 'minv', 'maxv'],\n  ArrayOf: ['vtype', 'minv', 'maxv', 'unique', 'set', 'unordered'], //MUST NOT include more than one collection option (set, unique, or unordered)\n  Choice: ['id', 'extend'],\n  Enumerated: ['id', 'enum', 'pointer', 'extend'],\n  Map: ['id', 'extend', 'minv', 'maxv'],\n  MapOf: ['ktype', 'vtype', 'minv', 'maxv'],\n  Record: ['extend', 'minv', 'maxv']\n};\n\nexport const FieldOptionInputArgs: { [key: string]: any } = {\n  minc: {\n    type: 'number',\n    description: 'Minimum cardinality'\n  },\n  maxc: {\n    type: 'number',\n    description: 'Maximum cardinality'\n  },\n  tagid: {\n    // type: Enumerated\n    description: 'Field containing an explicit tag for this Choice type'\n  },\n  dir: {\n    type: 'checkbox',\n    description: 'Use FieldName as a qualifier for fields in FieldType'\n  },\n  key: {\n    type: 'checkbox',\n    description: 'Field is a primary key for this type'\n  },\n  link: {\n    type: 'checkbox',\n    description: 'Field is a relationship link to a type instance'\n  }\n};\n\nexport const TypeOptionInputArgs = {\n  id: {\n    type: 'checkbox',\n    description: 'If present, Enumerated values and fields of compound types are denoted by FieldID rather than FieldName'\n  },\n  vtype: {\n    type: 'SBCreatableSelect',\n    description: 'Value type for ArrayOf and MapOf. It may be any JADN type or Defined type.'\n  },\n  ktype: {\n    type: 'SBCreatableSelect',\n    description: 'Key type for MapOf. ktype SHOULD be a Defined type, either an enumeration or a type with constraints such as a pattern or semantic valuation keyword that specify a fixed subset of values that belong to a category'\n  },\n  enum: {\n    type: 'SBCreatableSelect',\n    description: 'Extension: Enumerated type derived from the specified Array, Choice, Map or Record type'\n  },\n  pointer: {\n    description: 'Extension: Enumerated type containing pointers derived from the specified Array, Choice, Map or Record type'\n  },\n  format: {\n    type: 'SBSelect',\n    description: '(optional) Semantic validation keyword'\n  },\n  pattern: {\n    type: 'WithRegex',\n    description: '(optional) Regular expression used to validate a String type'\n  },\n  minf: {\n    type: 'number',\n    description: '(optional) Minimum real number value'\n  },\n  maxf: {\n    type: 'number',\n    description: '(optional) Maximum real number value'\n  },\n  minv: {\n    type: 'number',\n    description: '(optional) Minimum numeric value, octet or character count, or element count'\n  },\n  maxv: {\n    type: 'number',\n    description: '(optional) Maximum numeric value, octet or character count, or element count'\n  },\n  unique: {\n    type: 'checkbox',\n    description: '(optional) If present, an ArrayOf instance must not contain duplicate values'\n  },\n  set: {\n    type: 'checkbox',\n    description: '(optional) If present, an ArrayOf instance is unordered and unique'\n  },\n  unordered: {\n    type: 'checkbox',\n    description: '(optional) If present, an ArrayOf instance is unordered'\n  },\n  extend: {\n    type: 'checkbox',\n    description: '(optional) Type has an extension point where fields may be added'\n  },\n  default: {\n    type: 'checkbox',\n    description: '(optional) Default value'\n  }\n};\n\n// Helper Functions\nexport const opts2obj = (opts: Array<string>): Record<string, boolean | number | string> => {\n  return objectFromTuple(...opts.map<[string, boolean | number | string] | []>(o => {\n    const opt = o.slice(0, 1);\n    let val = o.slice(1);\n\n    if (opt in OptionIds) {\n      const optKey = OptionIds[opt];\n      return [optKey, BoolOpts.includes(optKey) ? true : val];\n    }\n    return [opt, val];\n  }));\n};\n\nexport const opts2arr = (opts: Record<string, boolean | number | string>): Array<string> => {\n  const ids = invertObject(OptionIds);\n  // eslint-disable-next-line array-callback-return\n  return Object.keys(opts).map(opt => {\n    let val = safeGet(opts, opt) as boolean | number | string;\n    if (val !== null && val !== undefined) {\n      if (opt === 'vtype') {\n        val = val as string;\n        val = val.startsWith('_Enum') ? val.replace('_Enum-', EnumId) : val;\n        val = val.endsWith('$Enum') ? `${EnumId}${val.replace('$Enum', '')}` : val;\n      }\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      return `${ids[opt]}${BoolOpts.includes(opt) ? '' : val}`;\n    }\n    return '';\n  }).filter(t => t.length > 0);\n};\n"],"names":["props","icon","buttonId","data","customClass","filename","_props$ext","ext","LANG_JADN","_useState","useState","_useState2","_slicedToArray","fileNameInput","setFileNameInput","_useState3","_useState4","toggleDownloadDialog","setToggleDownloadDialog","_useState5","_useState6","isLoading","setIsLoading","FILE_TYPE_PDF","_FontAwesomeIcon","_jsx","FontAwesomeIcon","faFilePdf","FILE_TYPE_SVG","FILE_TYPE_PNG","_FontAwesomeIcon2","faFileImage","_FontAwesomeIcon3","faFileDownload","onDownloadClick","e","fmt","preventDefault","undefined","FILENAME_RULE","test","concat","fetch","method","headers","body","JSON","stringify","schema","then","rsp","blob","elem","document","createElement","href","URL","createObjectURL","download","appendChild","click","remove","revokeObjectURL","err","console","log","sbToastError","sbToastSuccess","onDownloadPDFClick","_document$getElementB","arguments","length","svg","getElementById","innerHTML","Blob","type","saveAs","onDownloadSVGClick","pumlURL","onDownloadPNGClick","formattedData","_typeof","FormatJADN","setTimeout","onDownloadFileClick","sbToastWarning","React","_SBSpinner","SBSpinner","color","id","title","className","onClick","tabIndex","role","_div","_label","htmlFor","autoFocus","value","onChange","target","_label2","readOnly","style","zIndex","forwardRef","ref","dispatch","useDispatch","opts","selectedOpt","loadedFileData","setSelectedFile","placeholder","loc","acceptableExt","onCancelFileUpload","onFileChange","isSaveable","fileName","_props$fileExt","fileExt","SBSelect","_ref$current","current","loadFile","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","loadFileVal","dataObj","_context","prev","next","error","payload","response","abrupt","stop","_x","apply","loadFileErr","isGrouped","isFileUploader","isSmStyle","isClearable","SBSaveFile","toolTip","name","setDropdown","accept","files","file","fileReader","FileReader","onload","ev","dataStr","result","label","readAsText","display","faXmark","divID","isVisible","setIsVisible","useEffect","addEventListener","toggleVisibility","_document$getElementB2","removeEventListener","_document$getElementB3","scrollTop","window","scrollY","documentElement","_document$getElementB4","scrollTo","top","behavior","opacity","faArrowUp","isValid","setIsValid","setIsValidating","schemaData","schemaFormat","validateJADNSchema","jsonObj","validateSchema","validateSchemaVal","valid_bool","setSchema","valid_msg","validateSchemaErr","Error","message","validateJSONSchema","LANG_JSON","dismissAllToast","parse","_span","_span2","faCheck","_span3","$MAX_BINARY","$MAX_STRING","$MAX_ELEMENTS","$SYS","$TYPENAME","$FIELDNAME","$NSID","$MINV","TypeOptions","FieldOptions","OptionTypes","field","Object","keys","OptionIds","invertObject","_objectSpread","BoolOpts","EnumId","RequiredOptions","Binary","Boolean","Integer","Number","String","Array","ArrayOf","Choice","Enumerated","Map","MapOf","Record","ValidOptions","FieldOptionInputArgs","minc","description","maxc","tagid","dir","key","link","TypeOptionInputArgs","vtype","ktype","enum","pointer","format","pattern","minf","maxf","minv","maxv","unique","set","unordered","extend","default","opts2obj","objectFromTuple","_toConsumableArray","map","o","opt","slice","val","optKey","includes","opts2arr","ids","safeGet","startsWith","replace","endsWith","filter","t"],"sourceRoot":""}