{"version":3,"file":"js/9.bundle.min.js","mappings":"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","sources":["webpack://client/./src/components/common/SBDownloadBtn.tsx","webpack://client/./src/components/common/SBFileLoader.tsx","webpack://client/./src/components/common/SBSubmitBtn.tsx","webpack://client/./src/components/common/SBValidateSchemaBtn.tsx","webpack://client/./src/components/common/SBFormatBtn.tsx","webpack://client/./src/components/common/SchemaLoader.tsx","webpack://client/./src/components/generate/ExampleCreator.tsx","webpack://client/./src/components/generate/ExampleGenerator.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { faFileDownload, faFileImage, faFilePdf } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { sbToastError, sbToastSuccess, sbToastWarning } from \"./SBToast\";\nimport SBSpinner from \"./SBSpinner\";\nimport { FormatJADN } from \"components/utils\";\nimport saveAs from \"file-saver\";\nimport { FILENAME_RULE, FILE_TYPE_PDF, FILE_TYPE_PNG, FILE_TYPE_SVG, LANG_JADN } from \"components/utils/constants\";\n\nexport const onDownloadPNGClick = (pumlURL: any, filename: string = \"plantuml\") => {\n    saveAs(pumlURL, `${filename}.png`);\n}\n\nexport const onDownloadSVGClick = (e: React.MouseEvent<HTMLButtonElement>, filename: string = \"graphviz\") => {\n    e.preventDefault();\n    const svg = document.getElementById(\"fullGV\")?.innerHTML;\n    if (svg) {\n        var blob = new Blob([svg], { type: \"image/svg+xml\" });\n        saveAs(blob, `${filename}.svg`);\n    } else {\n        sbToastError('Error: Unable to download GraphViz file.')\n    }\n}\n//TODO: Add ability to save in other extensions ? \nconst SBDownloadBtn = (props: any) => {\n\n    const { buttonId, data, customClass, filename, ext = LANG_JADN } = props;\n\n    const [fileNameInput, setFileNameInput] = useState(filename);\n    const [toggleDownloadDialog, setToggleDownloadDialog] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setFileNameInput(e.target.value);\n    }\n\n    const onDownloadIconClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        setToggleDownloadDialog(true);\n    }\n\n    const onDownloadFileClick = (e: React.MouseEvent<HTMLButtonElement>, fmt: string) => {\n        e.preventDefault();\n        if (!data) {\n            sbToastError('No data to download');\n            return;\n        }\n\n        setIsLoading(true);\n        try {\n            const filename = `${fileNameInput}.${fmt}`;\n            let formattedData = typeof data == \"object\" ? FormatJADN(data) : data;\n\n            const blob = new Blob([formattedData], { type: \"application/json\" });\n            //content: `data:application/json;charset=utf-8,${encodeURIComponent(FormatJADN(prevState.schema))}`\n            const elem = document.createElement('a');\n            elem.href = URL.createObjectURL(blob);\n            elem.download = filename;\n            document.body.appendChild(elem);\n            elem.click();\n\n            // To make this work on Firefox we need to wait\n            // a little while before removing it.\n            setTimeout(() => {\n                elem.remove();\n                URL.revokeObjectURL(elem.href);\n            }, 0);\n            sbToastSuccess('File downloaded')\n\n        } catch (err) {\n            console.log(err);\n            sbToastError(`File cannot be downloaded`);\n        }\n    }\n\n    const onDownloadPDFClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        const filename = `${fileNameInput}.pdf`;\n        setIsLoading(true);\n        try {\n            fetch('/api/convert/pdf', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    schema: data\n                })\n            }).then(\n                rsp => rsp.blob()\n            ).then(blob => {\n                const elem = document.createElement('a');\n                elem.href = URL.createObjectURL(blob);\n                elem.download = filename;\n                document.body.appendChild(elem);\n                elem.click();\n\n                elem.remove();\n                URL.revokeObjectURL(elem.href);\n            }).catch(err => {\n                console.log(err);\n                sbToastError(`PDF cannot be downloaded`);\n            });\n\n        } catch (err) {\n            console.log(err);\n            sbToastError(`PDF cannot be downloaded`);\n        }\n\n        sbToastSuccess('PDF downloaded successfully');\n    }\n\n\n    let icon;\n    if (ext == FILE_TYPE_PDF) {\n        icon = <FontAwesomeIcon icon={faFilePdf} />;\n    } else if (ext == FILE_TYPE_SVG || ext == FILE_TYPE_PNG) {\n        icon = <FontAwesomeIcon icon={faFileImage} />;\n    } else {\n        icon = <FontAwesomeIcon icon={faFileDownload} />;\n    }\n\n\n    const onDownloadClick = (e: React.MouseEvent<HTMLButtonElement>, fmt: string) => {\n        e.preventDefault();\n        if (fileNameInput == '' || fileNameInput == undefined) {\n            sbToastWarning('Please enter a file name.');\n            return;\n        } else if (!FILENAME_RULE.test(fileNameInput)) {\n            sbToastWarning(\"Please do not use special characters in file name.\");\n            return;\n        }\n\n        switch (fmt) {\n            case FILE_TYPE_PDF:\n                onDownloadPDFClick(e);\n                break;\n            case FILE_TYPE_SVG:\n                onDownloadSVGClick(e, fileNameInput);\n                break;\n            case FILE_TYPE_PNG:\n                onDownloadPNGClick(data, fileNameInput);\n                break;\n            default:\n                //jadn, json, html, md, gv, puml, jidl\n                onDownloadFileClick(e, ext);\n        }\n\n        setIsLoading(false);\n        setToggleDownloadDialog(false);\n    }\n\n    return (\n        <>\n            {isLoading ? <SBSpinner color={\"primary\"} /> :\n                <button id={buttonId || 'downloadBtn'} type='button' title={`Download ${ext} File`} className={'btn btn-sm btn-primary ' + customClass} onClick={onDownloadIconClick}>\n                    {icon}\n                </button>}\n\n            <div id=\"downloadFileModal\" className={`modal fade ${toggleDownloadDialog ? 'show d-block' : 'd-none'}`} tabIndex={-1} role='dialog'>\n                <div className={`modal-dialog modal-dialog-centered`} role='document'>\n                    <div className='modal-content'>\n                        <div className=\"modal-header\">\n                            <div className=\"form col\">\n                                <div className=\"form row\">\n                                    <h5 className='modal-title'>\n                                        Download As...\n                                    </h5>\n                                </div>\n                                <div className=\"form row\">\n                                    <small className=\"text-muted\"> {`Download file to local computer`}</small>\n                                </div>\n                            </div>\n                            <button type='button' className='btn-close' data-bs-dismiss='modal' aria-label='Close' title='Close' onClick={() => setToggleDownloadDialog(false)} />\n                        </div>\n                        <div className=\"modal-body\">\n                            <div className=\"row\">\n                                <label htmlFor=\"filenameDownload\" className=\"col-sm-4 col-label\">File name:</label>\n                                <div className=\"col-sm-8\">\n                                    <input id='filenameDownload' className=\"form-control\" type=\"text\" autoFocus={true} value={fileNameInput} onChange={onChange} />\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <label htmlFor=\"downloadFileAsType\" className=\"col-sm-4 col-label\">Save as type:</label>\n                                <div className=\"col-sm-8\">\n                                    <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"downloadFileAsType\" value={ext} />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type='button' className='btn btn-sm btn-success' onClick={(e) => onDownloadClick(e, ext)}>Download</button>\n                            <button type='button' className='btn btn-sm btn-secondary' onClick={() => { setIsLoading(false); setToggleDownloadDialog(false); }}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n                <div className={`modal-backdrop fade ${toggleDownloadDialog ? 'show' : ''}`} style={{\n                    zIndex: -1\n                }}>\n                </div>\n            </div>\n        </>\n    )\n}\nexport default SBDownloadBtn;","import React, { forwardRef } from \"react\";\nimport SBSaveFile from \"./SBSaveFile\";\nimport SBSelect, { Option } from \"./SBSelect\";\nimport { useDispatch } from \"react-redux\";\nimport { loadFile } from \"actions/util\";\nimport { sbToastError } from \"./SBToast\";\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { LANG_JADN } from \"components/utils/constants\";\n\ninterface SBFileLoaderProps {\n    customClass?: string;\n    opts: any[];\n    selectedOpt: Option | null;\n    setSelectedFile?: (fileOpt: Option | null) => void;\n    placeholder: string;\n    loc: 'schemas' | 'messages';\n    onCancelFileUpload: (e: React.MouseEvent<HTMLButtonElement> | React.ChangeEvent<HTMLInputElement> | null) => void;\n    onFileChange: (fileData?: string | ArrayBuffer | null, fileName?: Option | undefined) => void;\n    acceptableExt?: string | undefined;\n    isSaveable?: boolean;\n    loadedFileData?: any;\n    fileName?: {\n        name: string,\n        ext: string\n    };\n    fileExt?: string;\n}\n\nconst SBFileLoader = forwardRef(function SBLoadSchema(props: SBFileLoaderProps, ref) {\n    const dispatch = useDispatch();\n    const { customClass, opts, selectedOpt, loadedFileData,\n        setSelectedFile, placeholder, loc,\n        acceptableExt, onCancelFileUpload, onFileChange,\n        isSaveable, fileName, fileExt = LANG_JADN } = props;\n\n    const handleFileSelect = (e: Option) => {\n        if (e == null) {\n            onCancelFileUpload(null);\n            return;\n\n        } else if (e.value == \"file\") {\n            ref.current.value = '';\n            ref.current?.click();\n\n        } else {\n            dispatch(loadFile(loc, e.value))\n                .then(async (loadFileVal) => {\n                    if (loadFileVal.error) {\n                        sbToastError(loadFileVal.payload.response);\n                        return;\n                    }\n                    let dataObj = loadFileVal.payload.data;\n                    onFileChange(dataObj, e);\n                })\n                .catch((loadFileErr) => {\n                    sbToastError(loadFileErr.payload.data);\n                    onFileChange();\n                })\n        }\n    };\n\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        if (e.target.files && e.target.files.length != 0) {\n            const file = e.target.files[0];\n            const fileReader = new FileReader();\n            fileReader.onload = (ev: ProgressEvent<FileReader>) => {\n                if (ev.target) {\n                    let dataStr = ev.target.result;\n                    onFileChange(dataStr, { value: file.name, label: file.name });\n                }\n            };\n            fileReader.readAsText(file);\n        }\n    }\n\n    return (\n        <>\n            <div className={`d-flex + ${customClass}`}>\n                <SBSelect id={\"file-select\"}\n                    data={opts}\n                    onChange={handleFileSelect}\n                    placeholder={placeholder}\n                    loc={loc}\n                    value={selectedOpt}\n                    isGrouped\n                    isFileUploader\n                    isSmStyle\n                    isClearable\n                />\n                {isSaveable && <SBSaveFile buttonId=\"saveFile\" toolTip={'Save as..'} data={loadedFileData} loc={loc} customClass={\"float-end ms-1\"}\n                    filename={fileName?.name} ext={fileExt} setDropdown={setSelectedFile} />}\n            </div>\n            <div className='d-none'>\n                <input type=\"file\" id=\"file-input\" name=\"file-input\" accept={acceptableExt} onChange={handleFileChange} ref={ref} />\n                <button id=\"cancelFileUpload\" type='button' className=\"btn btn-sm btn-secondary ms-0\" onClick={() => onCancelFileUpload} style={{ display: 'inline' }}>\n                    <FontAwesomeIcon icon={faXmark}></FontAwesomeIcon>\n                </button>\n            </div >\n        </>\n    );\n});\n\nexport default SBFileLoader;","import React from \"react\";\nimport SBSpinner from \"./SBSpinner\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SBSubmitBtn = (props: any) => {\n\n    const { buttonId, buttonTxt, customClass, isLoading, isDisabled, buttonTitle, formId } = props;\n\n    return (\n        <>\n            {isLoading ? <SBSpinner color={\"success\"} /> :\n                <button \n                    id={buttonId || 'submitBtn'} \n                    type={'submit'} \n                    form={formId}\n                    title={buttonTitle || \"Submit\"} \n                    className={'btn btn-sm btn-success border-0 hoverSubmit ' + customClass} \n                    disabled={isDisabled}>\n                        <span>{buttonTxt || \"Submit\"}</span>\n                        <FontAwesomeIcon icon={faPaperPlane} />\n                </button>\n            }\n        </>\n    )\n}\nexport default SBSubmitBtn;","import { faCheck, faXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { setSchema } from \"actions/util\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { sbToastSuccess, dismissAllToast, sbToastError } from \"./SBToast\";\nimport { validateSchema } from \"actions/validate\";\nimport { LANG_JADN, LANG_JSON } from \"components/utils/constants\";\n\nconst SBValidateSchemaBtn = (props: any) => {\n\n    const { isValid, setIsValid, setIsValidating, schemaData, schemaFormat, customClass } = props;\n    const dispatch = useDispatch();\n\n    const onValidateClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        dismissAllToast();\n        setIsValid(false);\n\n        if (!schemaData) {\n            sbToastError('Validation Error: No Schema to validate');\n            setIsValidating(false);\n            return;\n        }\n\n        setIsValidating(true);\n\n        let jsonObj = schemaData;\n        if (typeof jsonObj == 'string') {\n            try {\n                jsonObj = JSON.parse(jsonObj);\n            } catch (err: any) {\n                sbToastError(`Invalid JSON: ${err.message}`)\n                setIsValidating(false);\n                return;\n            }\n        }\n\n        if (schemaFormat == LANG_JSON) {\n            validateJSONSchema(jsonObj);\n        } else {\n            validateJADNSchema(jsonObj);\n        }\n\n        setIsValidating(false);\n    }\n\n\n    const validateJADNSchema = (jsonObj: any) => {\n        try {\n            dispatch(validateSchema(jsonObj, LANG_JADN))\n                .then((validateSchemaVal: any) => {\n                    if (validateSchemaVal.payload.valid_bool == true) {\n                        setIsValid(true);\n                        dispatch(setSchema(jsonObj));\n                        sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                    } else {\n                        dispatch(setSchema(null));\n                        sbToastError(validateSchemaVal.payload.valid_msg);\n                    }\n                })\n                .catch((validateSchemaErr) => {\n                    dispatch(setSchema(null));\n                    sbToastError(validateSchemaErr.payload.valid_msg)\n                }).finally(() => {\n                    setIsValidating(false);\n                })\n\n        } catch (err) {\n            if (err instanceof Error) {\n                dispatch(setSchema(null));\n                setIsValidating(false);\n                sbToastError(err.message)\n            }\n        }\n    }\n\n    const validateJSONSchema = (jsonObj: any) => {\n        try {\n            dispatch(validateSchema(jsonObj, LANG_JSON))\n                .then((validateSchemaVal: any) => {\n                    if (validateSchemaVal.payload.valid_bool == true) {\n                        setIsValid(true);\n                        dispatch(setSchema(jsonObj));\n                        sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                    } else {\n                        dispatch(setSchema(null));\n                        sbToastError(validateSchemaVal.payload.valid_msg);\n                    }\n                })\n                .catch((validateSchemaErr) => {\n                    dispatch(setSchema(null));\n                    sbToastError(validateSchemaErr.payload.valid_msg)\n\n                }).finally(() => {\n                    setIsValidating(false);\n                })\n        } catch (err) {\n            if (err instanceof Error) {\n                sbToastError(err.message)\n                setIsValidating(false);\n                sbToastError(err.message)\n            }\n        }\n    }\n\n    return (\n        <>\n            <button id='validateJADNButton' type='button' className={`btn btn-sm btn-primary ms-1 me-1 + ${customClass}`} title={isValid ? \"Schema is valid\" : \"Click to validate Schema\"}\n                onClick={onValidateClick}>\n                <span className=\"m-1\">Valid</span>\n                {isValid ? (\n                    <span className=\"badge rounded-pill text-bg-success\">\n                        <FontAwesomeIcon icon={faCheck} />\n                    </span>) : (\n                    <span className=\"badge rounded-pill text-bg-danger\">\n                        <FontAwesomeIcon icon={faXmark} />\n                    </span>)\n                }\n            </button>\n        </>\n    );\n};\n\nexport default SBValidateSchemaBtn;","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faIndent } from \"@fortawesome/free-solid-svg-icons\";\nimport { LANG_JADN } from \"components/utils/constants\";\nimport { FormatJADN } from \"components/utils\";\nimport { sbToastError } from \"./SBToast\";\n\nconst SBFormatBtn = (props: any) => {\n\n    const { ext, data, customClass, handleFormatClick } = props;\n\n    const onFormatClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        if (!data) {\n            sbToastError('Format Error: No Schema to format');\n            return;\n        }\n\n        try {\n            let dataObj = data;\n            if (typeof data == 'string') {\n                dataObj = JSON.parse(dataObj);\n            }\n\n            if (ext == LANG_JADN) {\n                dataObj = FormatJADN(dataObj);\n            }\n\n            handleFormatClick(dataObj);\n\n        } catch {\n            sbToastError('Failed to format: Invalid JSON')\n            return;\n        }\n    }\n\n    return (\n        <>\n            <button\n                id='formatButton'\n                type='button'\n                className={'btn btn-sm btn-primary ' + customClass}\n                onClick={onFormatClick}\n                title='Format'>\n                <FontAwesomeIcon icon={faIndent} />\n            </button>\n        </>\n    );\n}\n\nexport default SBFormatBtn;","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllSchemas } from \"../../reducers/util\";\nimport { info, setSchema } from \"../../actions/util\";\nimport { getSchemaConversions } from \"reducers/convert\";\nimport { validateSchema } from \"actions/validate\";\nimport { LANG_JADN } from \"components/utils/constants\";\nimport { getFilenameExt, getFilenameOnly } from \"components/utils/general\";\nimport { dismissAllToast, sbToastError, sbToastSuccess } from \"./SBToast\";\nimport SBCopyToClipboard from \"./SBCopyToClipboard\";\nimport SBSelect, { Option } from \"./SBSelect\";\nimport SBSpinner from \"./SBSpinner\";\nimport SBFormatBtn from \"./SBFormatBtn\";\nimport SBEditor from \"./SBEditor\";\nimport SBValidateSchemaBtn from \"./SBValidateSchemaBtn\";\nimport SBFileLoader from \"./SBFileLoader\";\n\n//File Loader Note: User should be able to upload any JSON/JADN schema; \n//It does not need to be syntactically correct since the user can edit the schema in the code editor.\n\ninterface SchemaLoaderProps {\n    selectedFile: Option | null;\n    setSelectedFile: (selectedOpt: Option | null) => void;\n    loadedSchema: object | null;\n    setLoadedSchema: (schema: object | null) => void;\n    decodeMsg?: Option | null;\n    setDecodeMsg?: (msgType: Option | null) => void;\n    setDecodeSchemaTypes?: (obj: {\n        all: string[] | [],\n        exports: string[] | []\n    }) => void;\n    acceptFormat?: string[];\n    schemaFormat: Option | null;\n    setSchemaFormat: (fmtOpt: Option | null) => void;\n}\n\nconst SchemaLoader = (props: SchemaLoaderProps) => {\n    const dispatch = useDispatch();\n\n    const { selectedFile, setSelectedFile, loadedSchema, setLoadedSchema, decodeMsg, setDecodeMsg, setDecodeSchemaTypes, acceptFormat, schemaFormat, setSchemaFormat } = props;\n    const [isValid, setIsValid] = useState(false);\n    const [isValidating, setIsValidating] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [fileName, setFileName] = useState({\n        name: '',\n        ext: LANG_JADN\n    });\n    const schemaOpts = useSelector(getAllSchemas);\n    const validSchemaFormatOpt = useSelector(getSchemaConversions);\n    const ref = useRef<HTMLInputElement | null>(null);\n\n    useEffect(() => {\n        if (fileName.ext) {\n            setSchemaFormat({ value: fileName.ext, label: fileName.ext })\n        }\n    }, [fileName])\n\n    useEffect(() => {\n        if (!loadedSchema) {\n            setIsValid(false);\n            setSelectedFile(null);\n            setSchemaFormat(null);\n        }\n    }, [loadedSchema])\n\n    useEffect(() => {\n        dispatch(info());\n    }, [dispatch])\n\n    const loadDecodeTypes = (schemaObj: any) => {\n        let decodeTypes: { all: any[], exports: any[] } = {\n            all: [],\n            exports: []\n        };\n        let msgDecode = '';\n\n        if (typeof schemaObj == \"string\") {\n            try {\n                schemaObj = JSON.parse(schemaObj);\n            } catch {\n                schemaObj = schemaObj\n            }\n        }\n\n        if (schemaObj.info !== undefined) {\n            if (schemaObj.info.exports !== undefined) {\n                decodeTypes.exports = schemaObj.info.exports;\n            }\n        }\n        if (schemaObj.types !== undefined) {\n            decodeTypes.all = schemaObj.types.map((def: any[]) => def[0]);\n            decodeTypes.all = decodeTypes.all.filter(dt => !decodeTypes.exports.includes(dt));\n            decodeTypes.all.sort();\n        }\n        if (decodeMsg === null || !decodeTypes.all.includes(decodeMsg)) {\n            if (decodeTypes.exports.length >= 1) {\n                msgDecode = decodeTypes.exports[0];\n            } else if (decodeTypes.all.length >= 1) {\n                msgDecode = decodeTypes.all[0];\n            }\n        }\n        setDecodeSchemaTypes(decodeTypes);\n        setDecodeMsg({ value: msgDecode, label: msgDecode });\n    }\n\n    const onFormatClick = (formattedSchema: object) => {\n        if (formattedSchema) {\n            setLoadedSchema(formattedSchema);\n        }\n    }\n\n    const sbEditorOnChange = (data: string) => {\n        dismissAllToast();\n        setIsValid(false);\n        setLoadedSchema(data);\n        dispatch(setSchema(null));\n        try {\n            if (setDecodeSchemaTypes && setDecodeMsg) {\n                loadDecodeTypes(JSON.parse(data));\n            }\n        } catch {\n            return;\n        }\n    }\n\n    const onFileLoad = async (schemaObj?: any, fileStr?: Option) => {\n        setIsValid(false);\n        setIsLoading(true);\n        if (schemaObj && fileStr) {\n            setSelectedFile(fileStr);\n            const fileName = {\n                name: getFilenameOnly(fileStr.label),\n                ext: getFilenameExt(fileStr.label)\n            }\n            setFileName(fileName);\n            setLoadedSchema(schemaObj);\n            try {\n                dispatch(validateSchema(schemaObj, fileName.ext))\n                    .then((validateSchemaVal: any) => {\n                        if (validateSchemaVal.payload.valid_bool == true) {\n                            setIsValid(true);\n                            if (typeof schemaObj == \"string\") {\n                                schemaObj = JSON.parse(schemaObj);\n                            }\n                            dispatch(setSchema(schemaObj));\n                            sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                        } else {\n                            sbToastError(validateSchemaVal.payload.valid_msg);\n                            dispatch(setSchema(null));\n                        }\n                    })\n                    .catch((validateSchemaErr) => {\n                        sbToastError(validateSchemaErr.payload.valid_msg)\n                        dispatch(setSchema(null));\n                    }).finally(() => {\n                        setIsValidating(false);\n                    })\n            } catch (err) {\n                if (err instanceof Error) {\n                    setIsValidating(false);\n                    sbToastError(err.message)\n                }\n            }\n\n            if (setDecodeSchemaTypes && setDecodeMsg) {\n                loadDecodeTypes(schemaObj);\n            }\n        }\n        setIsLoading(false);\n    }\n\n    const onCancelFileUpload = (e: React.MouseEvent<HTMLButtonElement> | React.ChangeEvent<HTMLInputElement> | null) => {\n        if (e) {\n            e.preventDefault();\n        }\n        dismissAllToast();\n        setIsLoading(false);\n        setIsValidating(false);\n        setIsValid(false);\n        setLoadedSchema(null);\n        dispatch(setSchema(null));\n        setSelectedFile(null);\n        setFileName({\n            name: '',\n            ext: LANG_JADN\n        });\n        if (ref.current) {\n            ref.current.value = '';\n        }\n        if (setDecodeSchemaTypes && setDecodeMsg) {\n            setDecodeMsg(null);\n            setDecodeSchemaTypes([]);\n        }\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <div className=\"row no-gutters\">\n                    <div className=\"col-lg-6 align-self-center\">\n                        <SBFileLoader\n                            opts={schemaOpts}\n                            selectedOpt={selectedFile}\n                            loadedFileData={loadedSchema}\n                            fileName={fileName}\n                            fileExt={schemaFormat?.value}\n                            setSelectedFile={setSelectedFile}\n                            onCancelFileUpload={onCancelFileUpload}\n                            onFileChange={onFileLoad}\n                            acceptableExt={acceptFormat}\n                            ref={ref}\n                            placeholder={'Select a schema...'}\n                            loc={'schemas'}\n                            isSaveable\n                        />\n                    </div>\n                    {acceptFormat && <div className=\"col-lg-3 align-self-center\">\n                        <SBSelect id={\"schema-format-list\"}\n                            data={validSchemaFormatOpt}\n                            onChange={(e: Option) => setSchemaFormat(e)}\n                            value={schemaFormat}\n                            placeholder={'Schema format...'}\n                            isSmStyle\n                            isClearable />\n                    </div>}\n                    <div className=\"col text-end align-self-center nowrap\">\n                        {isValidating ? <SBSpinner action={\"Validating\"} color={\"primary\"} /> :\n                            <SBValidateSchemaBtn\n                                isValid={isValid}\n                                setIsValid={setIsValid}\n                                setIsValidating={setIsValidating}\n                                schemaData={loadedSchema}\n                                schemaFormat={schemaFormat?.value}\n                            />\n                        }\n                        <SBCopyToClipboard buttonId='copySchema' data={loadedSchema} customClass='me-1' />\n                        <SBFormatBtn customClass=\"me-1\" handleFormatClick={onFormatClick} ext={schemaFormat?.value} data={loadedSchema} />\n\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-body-page\">\n                {isLoading ? <SBSpinner action={'Loading'} isDiv /> :\n                    <SBEditor data={loadedSchema || \"\"} onChange={sbEditorOnChange}></SBEditor>}\n            </div>\n        </div>\n    )\n}\nexport default SchemaLoader;\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getSelectedSchema } from 'reducers/util'\nimport { LANG_JSON, LANG_JSON_UPPER, LANG_XML_UPPER } from 'components/utils/constants'\nimport SBDownloadBtn from 'components/common/SBDownloadBtn'\nimport SBCopyToClipboard from 'components/common/SBCopyToClipboard'\nimport SBEditor from 'components/common/SBEditor'\nimport SBSaveFile from 'components/common/SBSaveFile'\nimport SBSubmitBtn from 'components/common/SBSubmitBtn'\nimport SBSelect from 'components/common/SBSelect'\n\n\nexport interface Option {\n    readonly value: string | any;\n    readonly label: string;\n}\n\n//TODO: create messages in other languages ?\n//TODO: create messages with specific requirements - filter ?\nconst ExampleCreator = (props: any) => {\n    const { formId, generatedMessages, isLoading, numOfMsg, setNumOfMsg, langSel, setLangSel } = props;\n    const [toggle, setToggle] = useState<{ [key: string]: boolean }>({});\n\n    const jsonOpt = new Option(LANG_JSON_UPPER);\n    const xmlOpt = new Option(LANG_XML_UPPER);\n    const [langs, setLangs] = useState<Option[]>([jsonOpt, xmlOpt]);\n\n    const validSchema = useSelector(getSelectedSchema);\n\n    const onToggle = (index: number) => {\n        setToggle((prev) => ({ ...prev, [index]: !prev[index] }));\n    }\n\n    const onNumChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setNumOfMsg(e.target.value);\n    }\n\n    const onLangChange = (e: React.ChangeEvent<Option>) => {\n        console.log(e)\n        setLangSel(e);\n    }\n\n    const msgList = generatedMessages.map((message: string, i: number) => (\n        <div className=\"card\" key={i}>\n            <div className=\"card-header\">\n                <h5 className=\"mb-0 align-self-center\">\n                    <button className=\"btn btn-link\" id={`toggleMsg#${i}`} type=\"button\" onClick={() => onToggle(i)} >\n                        Data Example #{i + 1}\n                    </button>\n                    <SBCopyToClipboard buttonId={`copyMsgExample${i}`} data={message} customClass='float-end' />\n                    <SBSaveFile data={message} loc={'messages'} customClass={\"float-end me-1\"} filename={`MessageExample${i + 1}`} ext={LANG_JSON} />\n                    <SBDownloadBtn buttonId={`downloadMsgExample${i}`} customClass='me-1 float-end' filename={`MessageExample${i + 1}`} data={message} ext={LANG_JSON} />\n                </h5>\n            </div>\n\n            {toggle[i] == true ?\n                <div className=\"card-body\" key={i}>\n                    <SBEditor data={message} convertTo={langSel.value || \"JSON\"} isReadOnly={true} height={'35vh'}></SBEditor>\n                </div> : ''}\n        </div>\n    ));\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <div className='row no-gutters'>\n                    <div className='col-md-2'>\n                        <input id=\"numOfMsg\" type='number' className='form-control form-control-sm' value={numOfMsg} onChange={onNumChange}\n                            placeholder='Select number of examples...(1-5)' min={1} max={5} />\n                    </div>\n                    <div className='col-md-3'>\n                        <SBSelect id=\"langSel\" data={langs} value={langSel} onChange={onLangChange} isSmStyle={true}></SBSelect>   \n                    </div>\n                    <div className='col-md-7 align-self-center'>\n                        <SBSubmitBtn buttonId=\"generateSchema\"\n                            buttonTitle=\"Generate example messages based on selected schema\"\n                            buttonTxt=\"Generate\"\n                            customClass=\"me-1 float-end\"\n                            isLoading={isLoading}\n                            formId={formId}\n                            isDisabled={Object.keys(validSchema).length != 0 && numOfMsg > 0 && numOfMsg <= 5 ? false : true}>\n                        </SBSubmitBtn>\n                    </div>\n                </div>\n            </div>\n            <div className='card-body-page'>\n                {msgList}\n            </div>\n        </div >\n    )\n}\nexport default ExampleCreator ","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Helmet } from 'react-helmet-async'\nimport { getPageTitle } from 'reducers/util'\nimport { info, setSchema } from 'actions/util'\nimport { convertJsonSchema, convertSchema } from 'actions/convert'\nimport { LANG_JSON, LANG_JSON_UPPER } from 'components/utils/constants'\nimport SchemaLoader from 'components/common/SchemaLoader'\nimport { dismissAllToast, sbToastError, sbToastSuccess, sbToastWarning } from 'components/common/SBToast'\nimport { SchemaJADN } from 'components/create/schema/interface'\nimport ExampleCreator from './ExampleCreator'\n\n\nexport interface Option {\n    readonly value: string | any;\n    readonly label: string;\n}\n\nconst ExampleGenerator = () => {\n    const dispatch = useDispatch();\n\n    const [selectedFile, setSelectedFile] = useState<Option | null>(null);\n    const [schemaFormat, setSchemaFormat] = useState<Option | null>(null);\n    const [loadedSchema, setLoadedSchema] = useState<object | null>(null);\n    const [generatedMessages, setGeneratedMessages] = useState<any[]>([]);\n    const [numOfMsg, setNumOfMsg] = useState<number>(1);\n\n    const defaultLangOption = new Option(LANG_JSON_UPPER)\n    const [langSel, setLangSel] = useState<Option | null>(defaultLangOption);\n\n    const [isLoading, setIsLoading] = useState(false);\n\n    const meta_title = useSelector(getPageTitle) + ' | Data Generation'\n    const meta_canonical = `${window.location.origin}${window.location.pathname}`;\n    const formId = \"generation_form\";\n\n    useEffect(() => {\n        dispatch(info());\n        dismissAllToast();\n    }, [dispatch])\n\n    useEffect(() => {\n        setGeneratedMessages([]);\n    }, [loadedSchema])\n\n    const onReset = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        dismissAllToast();\n        setIsLoading(false);\n        setSelectedFile(null);\n        setLoadedSchema(null);\n        setNumOfMsg(1);\n        setLangSel(defaultLangOption);\n        setGeneratedMessages([]);\n        dispatch(setSchema(null));\n    }\n\n    const submitForm = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setIsLoading(true);\n\n        let schemaObj: SchemaJADN | string = loadedSchema;\n        // let schemaProps: any[] = [];\n\n        if (typeof schemaObj == 'string') {\n            try {\n                schemaObj = JSON.parse(loadedSchema);\n            } catch (err) {\n                if (err instanceof Error) {\n                    setIsLoading(false);\n                    sbToastError(err.message);\n                }\n            }\n        }\n\n        if (!numOfMsg || numOfMsg < 0) {\n            setIsLoading(false);\n            sbToastError(\"Error: Must select a number more than zero\");\n            return;\n        }\n\n        if (numOfMsg && numOfMsg > 10) {\n            setIsLoading(false);\n            sbToastError(\"Error: Must select a number less than ten\");\n            return;\n        }\n\n        //TODO? : allow user to provide reference data to resolve schema \n        if (schemaObj.info && Object.keys(schemaObj.info).includes('namespaces')) {\n            setIsLoading(false);\n            sbToastError(\"Error: Schema must be resolved\");\n            return;\n        }\n        if (schemaObj.info && !Object.keys(schemaObj.info).includes('exports')) {\n            setIsLoading(false);\n            sbToastWarning(\"Warning: Schema requires Exports in order to generate data\");\n            return;\n        }\n\n        // Convert to JSONSchema\n        dispatch(convertSchema(schemaObj, schemaFormat?.value, [LANG_JSON]))\n            .then((convertSchemaVal) => {\n                if (convertSchemaVal.error) {\n                    console.error(convertSchemaVal.payload.response);\n                    setIsLoading(false);\n                    sbToastError('Failed to generate examples: Invalid JSON data');\n                    return;\n                }\n\n                // Get JSONSchema\n                const schema = JSON.parse(convertSchemaVal.payload.schema.convert[0].schema);\n\n                // Generate Fake Data for Examples\n                dispatch(convertJsonSchema(schema, langSel.value, numOfMsg))\n                    .then((response) => {\n                        let gen_data = response.payload.data;\n\n                        if (gen_data.length != 0) {\n                            setIsLoading(false);\n                            sbToastSuccess('Examples generated successfully');\n                            setGeneratedMessages(gen_data)\n                        } else {\n                            setIsLoading(false);\n                            sbToastError('Failed to generate examples');\n                        }\n\n                    }).catch((err) => {\n                        setIsLoading(false);\n                        sbToastError('Error generating examples');\n                        console.error(err);\n                    });  \n\n            }).catch((convertSchemaErr) => {\n                setIsLoading(false);\n                sbToastError('Failed to generate examples: JADN TO JSON conversion failed');\n                console.error(convertSchemaErr);\n            });\n    }\n\n    return (\n        <div>\n            <Helmet>\n                <title>{meta_title}</title>\n                <link rel=\"canonical\" href={meta_canonical} />\n            </Helmet>\n            <div className='row'>\n                <div className='col-md-12'>\n                    <div className='card'>\n                        <div className='card-header bg-secondary p-2'>\n                            <h5 className='m-0' style={{ display: 'inline' }}><span className='align-middle'>Data Generation</span></h5>\n                            <button type='reset' className='btn btn-sm btn-danger float-end' onClick={onReset}>Reset</button>\n                        </div>\n                        <div className='card-body p-2'>\n                            <form id={formId} onSubmit={submitForm}>\n                                <div className='row'>\n                                    <div className='col-md-6 pr-1'>\n                                        <SchemaLoader\n                                            selectedFile={selectedFile} setSelectedFile={setSelectedFile}\n                                            schemaFormat={schemaFormat} setSchemaFormat={setSchemaFormat}\n                                            loadedSchema={loadedSchema} setLoadedSchema={setLoadedSchema} />\n                                    </div>\n                                    <div className='col-md-6 pl-1'>\n                                        <ExampleCreator\n                                            formId={formId} isLoading={isLoading}\n                                            generatedMessages={generatedMessages} setGeneratedMessages={setGeneratedMessages} \n                                            numOfMsg={numOfMsg} setNumOfMsg={setNumOfMsg} \n                                            langSel={langSel} setLangSel={setLangSel} \n                                        />\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\nexport default ExampleGenerator "],"names":["props","icon","buttonId","data","customClass","filename","_props$ext","ext","LANG_JADN","_useState","useState","_useState2","_slicedToArray","fileNameInput","setFileNameInput","_useState3","_useState4","toggleDownloadDialog","setToggleDownloadDialog","_useState5","_useState6","isLoading","setIsLoading","FILE_TYPE_PDF","_FontAwesomeIcon","_jsx","FontAwesomeIcon","faFilePdf","FILE_TYPE_SVG","FILE_TYPE_PNG","_FontAwesomeIcon2","faFileImage","_FontAwesomeIcon3","faFileDownload","onDownloadClick","e","fmt","preventDefault","undefined","FILENAME_RULE","test","concat","fetch","method","headers","body","JSON","stringify","schema","then","rsp","blob","elem","document","createElement","href","URL","createObjectURL","download","appendChild","click","remove","revokeObjectURL","err","console","log","sbToastError","sbToastSuccess","onDownloadPDFClick","_document$getElementB","arguments","length","svg","getElementById","innerHTML","Blob","type","saveAs","onDownloadSVGClick","pumlURL","onDownloadPNGClick","formattedData","_typeof","FormatJADN","setTimeout","onDownloadFileClick","sbToastWarning","React","_SBSpinner","SBSpinner","color","id","title","className","onClick","tabIndex","role","_div","_label","htmlFor","autoFocus","value","onChange","target","_label2","readOnly","style","zIndex","forwardRef","ref","dispatch","useDispatch","opts","selectedOpt","loadedFileData","setSelectedFile","placeholder","loc","acceptableExt","onCancelFileUpload","onFileChange","isSaveable","fileName","_props$fileExt","fileExt","SBSelect","_ref$current","current","loadFile","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","loadFileVal","dataObj","_context","prev","next","error","payload","response","abrupt","stop","_x","apply","loadFileErr","isGrouped","isFileUploader","isSmStyle","isClearable","SBSaveFile","toolTip","name","setDropdown","accept","files","file","fileReader","FileReader","onload","ev","dataStr","result","label","readAsText","display","faXmark","buttonTxt","isDisabled","buttonTitle","formId","form","disabled","faPaperPlane","isValid","setIsValid","setIsValidating","schemaData","schemaFormat","validateJADNSchema","jsonObj","validateSchema","validateSchemaVal","valid_bool","setSchema","valid_msg","validateSchemaErr","Error","message","validateJSONSchema","LANG_JSON","dismissAllToast","parse","_span","_span2","faCheck","_span3","handleFormatClick","_unused","faIndent","selectedFile","loadedSchema","setLoadedSchema","decodeMsg","setDecodeMsg","setDecodeSchemaTypes","acceptFormat","setSchemaFormat","isValidating","_useState7","_useState8","setFileName","schemaOpts","useSelector","getAllSchemas","validSchemaFormatOpt","getSchemaConversions","useRef","useEffect","info","loadDecodeTypes","schemaObj","decodeTypes","all","exports","msgDecode","types","map","def","filter","dt","includes","sort","onFileLoad","fileStr","_fileName","getFilenameOnly","getFilenameExt","_x2","SBFileLoader","action","SBValidateSchemaBtn","SBCopyToClipboard","SBFormatBtn","formattedSchema","_SBSpinner2","isDiv","SBEditor","_unused2","generatedMessages","numOfMsg","setNumOfMsg","langSel","setLangSel","toggle","setToggle","jsonOpt","Option","LANG_JSON_UPPER","xmlOpt","LANG_XML_UPPER","langs","validSchema","getSelectedSchema","msgList","i","index","_objectSpread","_defineProperty","SBDownloadBtn","convertTo","isReadOnly","height","min","max","SBSubmitBtn","Object","keys","setGeneratedMessages","_useState9","_useState10","defaultLangOption","_useState11","_useState12","_useState13","_useState14","meta_title","getPageTitle","meta_canonical","window","location","origin","pathname","Helmet","rel","onSubmit","convertSchema","convertSchemaVal","convert","convertJsonSchema","gen_data","convertSchemaErr","SchemaLoader","ExampleCreator"],"sourceRoot":""}