{"version":3,"file":"js/29.bundle.min.js","mappings":"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","sources":["webpack://client/./src/components/create/schema/structure/editors/options/ModalSize.ts","webpack://client/./src/components/common/SBConfirmModal.tsx","webpack://client/./src/components/create/schema/structure/editors/consts.ts","webpack://client/./src/components/create/schema/structure/editors/KeyValueEditor.tsx","webpack://client/./src/components/create/schema/structure/editors/ConfigObjectEditor.tsx","webpack://client/./src/components/create/schema/structure/types.tsx","webpack://client/./src/components/create/schema/structure/editors/KeyArrayEditor.tsx","webpack://client/./src/components/create/schema/structure/editors/KeyObjectEditor.tsx","webpack://client/./src/components/create/schema/structure/editors/options/TypeOptionsEditor.tsx","webpack://client/./src/components/create/schema/structure/editors/options/FieldOptionsEditor.tsx","webpack://client/./src/components/create/schema/structure/editors/options/OptionsModal.tsx","webpack://client/./src/components/create/schema/structure/editors/ParentEditor/withStructureEditor.tsx","webpack://client/./src/components/create/schema/structure/editors/ParentEditor/withFieldEditor.tsx","webpack://client/./src/components/create/schema/structure/editors/BtnStyle/FieldEditorBtn.tsx","webpack://client/./src/components/create/schema/structure/editors/BtnStyle/StructureEditorBtn.tsx","webpack://client/./src/components/create/schema/structure/editors/DragStyle/FieldEditorDnd.tsx","webpack://client/./src/components/create/schema/structure/editors/DragStyle/SBOutlineFields.tsx","webpack://client/./src/components/create/schema/structure/editors/DragStyle/StructureEditorDnd.tsx","webpack://client/./src/components/create/schema/structure/editors/ParentEditor/withPrimitiveEditor.tsx","webpack://client/./src/components/create/schema/structure/editors/BtnStyle/PrimitiveEditorBtn.tsx","webpack://client/./src/components/create/schema/structure/editors/DragStyle/PrimitiveEditorDnd.tsx","webpack://client/./src/components/create/schema/structure/info.tsx","webpack://client/./src/components/create/schema/structure/editors/ParentEditor/withSchemaCreator.tsx","webpack://client/./src/components/create/schema/structure/editors/BtnStyle/SBOutlineBtn.tsx","webpack://client/./src/components/create/schema/structure/editors/BtnStyle/AddToIndexDropDown.tsx","webpack://client/./src/components/create/schema/structure/editors/BtnStyle/SchemaCreatorBtn.tsx","webpack://client/./src/components/create/schema/structure/editors/DragStyle/SBOutlineCard.tsx","webpack://client/./src/components/create/schema/structure/editors/DragStyle/SBOutline.tsx","webpack://client/./src/components/create/schema/structure/editors/DragStyle/Droppable.tsx","webpack://client/./src/components/create/schema/structure/editors/DragStyle/DraggableKey.tsx","webpack://client/./src/components/create/schema/structure/editors/DragStyle/SchemaCreatorDnd.tsx","webpack://client/./src/components/create/schema/SchemaGenerator.tsx"],"sourcesContent":["export enum ModalSize {\n    sm = \"modal-sm\",\n    md = \"modal-md\",\n    lg = \"modal-lg\",\n    xl = \"modal-xl\"\n}","import React from \"react\";\nimport { createPortal } from 'react-dom';\nimport { ModalSize } from \"components/create/schema/structure/editors/options/ModalSize\";\n\nexport const SBConfirmModal = (props: any) => {\n    const {\n        isOpen,\n        title = 'Confirm',\n        message = 'Are you sure?',\n        modalSize = ModalSize.sm,\n        confirm_value,\n        onResponse } = props;\n\n    const onCloseClick = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        onResponse(false, confirm_value);\n    };\n\n    const onYesClick = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        onResponse(true, confirm_value);\n    };\n\n    const onNoClick = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        onResponse(false, confirm_value);\n    };\n\n    return (\n        <>\n            {createPortal(\n                <div id=\"confirmationModal\" className={`modal fade ${isOpen ? 'show d-block' : 'd-none'}`} tabIndex={-1} role='dialog'>\n                    <div className={`modal-dialog modal-dialog-centered ${modalSize}`} role='document'>\n                        <div className='modal-content'>\n                            <div className=\"modal-header\">\n                                <h5 className='modal-title'>\n                                    {title}\n                                </h5>\n                                <button type='button' className='btn-close' data-bs-dismiss='modal' aria-label='Close' title='Close' onClick={onCloseClick} />\n                            </div>\n                            <div className=\"modal-body\">\n                                <p>{message}</p>\n                            </div>\n                            <div className=\"modal-footer\">\n                                <button type='button' className='btn btn-sm btn-success' onClick={onYesClick}>Yes</button>\n                                <button type='button' className='btn btn-sm btn-secondary' onClick={onNoClick}>No</button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={`modal-backdrop fade ${isOpen ? 'show' : ''}`} style={{\n                        zIndex: -1\n                    }}></div>\n                </div>,\n                document.body)}\n        </>\n    )\n};\n\n","// Editor Constants\nimport {\n  EnumeratedFieldKey, FieldArray, PrimitiveTypeArray, StandardFieldKey, StandardTypeArray, TypeKey\n} from '../../interface';\nimport { zip } from '../../../../utils';\n\n// Interfaces\n// Fields\nexport interface EnumeratedFieldObject {\n  id: number;\n  value: number | string;\n  comment: string;\n}\nexport interface StandardFieldObject {\n  id: number;\n  name: string;\n  type: string;\n  options: Array<string>;\n  comment: string;\n}\nexport type FieldObject = EnumeratedFieldObject | StandardFieldObject;\n\n// Structures\nexport interface PrimitiveTypeObject {\n  name: string;\n  type: string;\n  options: Array<string>;\n  comment: string;\n}\nexport interface StandardTypeObject extends PrimitiveTypeObject {\n  fields: Array<FieldObject>;\n}\nexport type TypeObject = PrimitiveTypeObject | StandardTypeObject\n\n\n// Consts\nexport const TypeKeys: Array<TypeKey> = ['name', 'type', 'options', 'comment', 'fields'];\nexport const StandardFieldKeys: Array<StandardFieldKey> = ['id', 'name', 'type', 'options', 'comment'];\nexport const EnumeratedFieldKeys: Array<EnumeratedFieldKey> = ['id', 'value', 'comment'];\nexport const ConfigOptions = {\n  // $MaxBinary - Integer{1..*} optional\n  $MaxBinary: {\n    type: 'number',\n    description: 'Schema default maximum number of octets'\n  },\n  // $MaxString - Integer{1..*} optional,\n  $MaxString: {\n    type: 'number',\n    description: 'Schema default maximum number of characters'\n  },\n  // $MaxElements - Integer{1..*} optional,\n  $MaxElements: {\n    type: 'number',\n    description: 'Schema default maximum number of items/properties'\n  },\n  // $FS - String{1..1} optional,\n  /*   $FS: {\n      description: 'Field Separator character used in pathnames'\n    }, */\n  // $Sys - String{1..1} optional,\n  $Sys: {\n    description: 'System character for TypeName'\n  },\n  // $TypeName - String{1..127} optional,\n  $TypeName: {\n    description: 'TypeName regex'\n  },\n  // $FieldName - String{1..127} optional,\n  $FieldName: {\n    description: 'FieldName regex'\n  },\n  // $NSID - String{1..127} optional\n  $NSID: {\n    description: 'Namespace Identifier regex'\n  }\n};\n\n// Helper Functions\nexport const FieldArr2Object = (values: FieldArray): FieldObject => {\n  if (values.length === StandardFieldKeys.length) {\n    return zip(StandardFieldKeys, values) as StandardFieldObject;\n  }\n  if (values.length === EnumeratedFieldKeys.length) {\n    return zip(EnumeratedFieldKeys, values) as EnumeratedFieldObject;\n  }\n  throw new Error('Cannot create Field object, array shoud contain 3 or 5 values');\n};\n\nexport const TypeArr2Object = (values: PrimitiveTypeArray | StandardTypeArray): TypeObject => {\n  let obj: Record<string, any> = {};\n  if (values.length >= 4 && values.length <= 5) {\n    obj = zip(TypeKeys, values);\n  } else {\n    throw new Error('Cannot create Type object, array shoud contain 3 or 5 values');\n  }\n  obj.fields = (obj.fields || []).map((f: FieldArray) => FieldArr2Object(f));\n  return obj as TypeObject;\n};\n","import React, { memo, useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faMinusSquare, faQuestion, faXmark } from '@fortawesome/free-solid-svg-icons';\nimport SBSelect, { Option } from 'components/common/SBSelect';\nimport { sbToastError, sbToastSuccess } from 'components/common/SBToast';\n\n// Interface\ninterface KeyValueEditorProps {\n  id: string;\n  name: string;\n  description?: string;\n  placeholder?: string;\n  value: boolean | number | string;\n  type?: string;\n  options?: Array<string>; // only for type='select'\n  change: (v: boolean | number | string) => void;\n  remove: (id: string) => void;\n  required: boolean;\n  removable?: boolean;\n  labelColumns?: number;\n  fieldColumns?: number;\n}\n\n// Key Value Editor\nconst KeyValueEditor = memo(function KeyValueEditor(props: KeyValueEditorProps) {\n  const {\n    id,\n    name,\n    value = '',\n    description = '',\n    options = [],\n    placeholder,\n    type = 'text',\n    change,\n    remove,\n    required,\n    removable,\n    labelColumns = 2,\n    fieldColumns = 10\n  } = props;\n  const [valueData, setValueData] = useState(value);\n  const [isRegex, setIsRegex] = useState(false);\n  const [isChecked, setIsChecked] = useState(false);\n\n  useEffect(() => {\n    if (!value) {\n      if (type == \"checkbox\") {\n        setValueData(false)\n      }\n      else if (type == \"SBSelect\" || type == \"SBCreatableSelect\") {\n        setVal(value ? { value: value, label: value } : '')\n      }\n      else {\n        setValueData(value)\n      }\n    }\n  }, [value])\n\n  const [val, setVal] = useState(value ? { value: value, label: value } : ''); //for select\n  \n  const inputArgs: Record<string, any> = {\n    value: valueData,\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => {setValueData(e.target.value); setIsChecked(false)},\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => { setValueData(e.target.value); change(e.target.value); }\n  };\n\n  const onSelectChange = (e: Option) => {\n    if (e == null) {\n      setVal('');\n      change('');\n    } else {\n      setVal(e);\n      change(e.value);\n    }\n  }\n\n  const onECMACheck = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n\n    try {\n      new RegExp(valueData.toString());\n      sbToastSuccess(\"Valid regex\");\n      setIsRegex(true);\n      setIsChecked(true);\n    } catch (err: any) {\n      sbToastError(`Invalid ECMAScript Regex: ${err.message}`);\n      setIsRegex(false);\n      setIsChecked(true);\n      return;\n    }\n  }  \n\n  if (type === 'SBCreatableSelect' && options) {\n    return (\n      <>\n        {removable ?\n          <div className=\"row form-group\" id={`${name}-${id}`}>\n            <div className={`col-md-${labelColumns}`}>\n              <label htmlFor={`editor-${placeholder}`} className={`pl-2 col-form-label font-weight-bold`}>\n                <span title={description}>{name}{required ? '*' : ''}</span>\n              </label>\n            </div>\n            <div className={`col-md-${fieldColumns}`}>\n              <div className=\"input-group\">\n                <SBSelect id={`editor-${placeholder}-${id}`}\n                  placeholder={`Please select a ${placeholder}...`}\n                  data={options}\n                  onChange={onSelectChange}\n                  value={val}\n                  isGrouped={Array.isArray(options) ? false : true}\n                  isCreatable\n                  isClearable />\n                <button type=\"button\" title={`Remove ${placeholder}`} className='btn btn-sm btn-danger ' onClick={() => remove(name)}><FontAwesomeIcon icon={faMinusSquare} /></button>\n              </div>\n            </div>\n          </div>\n          :\n          <div className=\"row form-group\" id={`${name}-${id}`}>\n            <label htmlFor={`editor-${placeholder}`} className={`col-md-${labelColumns} col-form-label font-weight-bold`}>\n              <span title={description}>{name}{required ? '*' : ''}</span>\n            </label>\n            <div className={`col-md-${fieldColumns}`}>\n              <SBSelect id={`editor-${placeholder}-${id}`}\n                placeholder={`Please select a ${placeholder}...`}\n                data={options}\n                onChange={onSelectChange}\n                value={val}\n                isGrouped={Array.isArray(options) ? false : true}\n                isCreatable\n                isClearable />\n            </div>\n          </div>\n        }\n      </>\n    );\n  }\n\n  if (type === 'SBSelect' && options) {\n    return (\n      <>\n        {removable ?\n\n          <div className=\"row form-group\" id={`${name}-${id}`}>\n            <div className={`col-md-${labelColumns}`}>\n              <label htmlFor={`editor-${placeholder}`} className={`pl-2 col-form-label font-weight-bold`}>\n                <span title={description}>{name}{required ? '*' : ''}</span>\n              </label>\n            </div>\n            <div className={`col-md-${fieldColumns}`}>\n              <div className=\"input-group\">\n                <SBSelect id={`editor-${placeholder}-${id}`}\n                  placeholder={`Please select a ${placeholder}...`}\n                  data={options}\n                  onChange={onSelectChange}\n                  value={val}\n                  isGrouped={Array.isArray(options) ? false : true}\n                  isClearable />\n                <button type=\"button\" title={`Remove ${placeholder}`} className='btn btn-sm btn-danger' onClick={() => remove(name)}><FontAwesomeIcon icon={faMinusSquare} /></button>\n              </div>\n            </div>\n          </div>\n          :\n          <div className=\"row form-group\" id={`${name}-${id}`}>\n            <label htmlFor={`editor-${placeholder}`} className={`col-md-${labelColumns} col-form-label font-weight-bold`}>\n              <span title={description}>{name}{required ? '*' : ''}</span>\n            </label>\n            <div className={`col-md-${fieldColumns}`}>\n              <SBSelect id={`editor-${placeholder}-${id}`}\n                placeholder={`Please select a ${placeholder}...`}\n                data={options}\n                onChange={onSelectChange}\n                value={val}\n                isGrouped={Array.isArray(options) ? false : true}\n                isClearable />\n            </div>\n          </div>\n        }\n      </>\n    );\n  }\n\n  if (type === 'WithRegex' && options) {\n      return (\n          <div className=\"row form-group\" id={`${name}-${id}`}>\n            <div className={`col-md-${labelColumns}`}>\n              <label htmlFor={`editor-${placeholder}`} className={`pl-2 col-form-label font-weight-bold`}>\n                <span title={description}>{name}{required ? '*' : ''}</span>\n              </label>\n            </div>\n            <div className={`col-md-${fieldColumns}`}>\n              <div className=\"input-group\">\n                <input id={id + \"_input\"} name={id + \"_input\"} type={type} className=\"form-control\" {...inputArgs} placeholder='Enter regex string' />\n                <button id=\"check_regex\" type=\"button\" title='check pattern validity' className=\"btn btn-sm btn-primary\" onClick={onECMACheck}>\n                {isChecked ?\n                  isRegex ? \n                        <FontAwesomeIcon icon={faCheck} /> : \n                        <FontAwesomeIcon icon={faXmark} />\n                  :\n                  <FontAwesomeIcon icon={faQuestion} /> \n  }\n                </button>\n              </div>\n            </div>\n          </div>\n    );\n  }; \n\n  if (['checkbox', 'radio'].includes(type)) {\n    inputArgs.checked = type && valueData,\n      inputArgs.onChange = (e: React.ChangeEvent<HTMLInputElement>) => { setValueData(e.target.checked); },\n      inputArgs.onBlur = (e: React.FocusEvent<HTMLInputElement>) => { setValueData(e.target.value); change(e.target.checked); }\n    return (\n      <>\n        {removable ?\n          <div className=\"row\" id={`${name}-${id}`}>\n            <div className=\"col-md-12\">\n              <div className=\"row\">\n                <label htmlFor={`editor-${placeholder}`} className={`col-md-${labelColumns} col-form-label font-weight-bold`}>\n                  <span title={description}>{name} {required ? '*' : ''}</span>\n                </label>\n                <div className={`col-md-${fieldColumns} col-form-label d-flex align-items-start`}>\n                  <input type={type} id={`editor-${placeholder}-${id}`} className={'w-auto'} {...inputArgs} />\n                  <button type=\"button\" title={`Remove ${placeholder}`} className=\"btn btn-sm btn-danger ms-2\" onClick={() => remove(name)}><FontAwesomeIcon icon={faMinusSquare} /></button>\n                </div>\n              </div>\n            </div>\n          </div>\n          :\n          <div className=\"row\" id={`${name}-${id}`}>\n            <div className=\"col-md-12\">\n              <div className=\"row\">\n                <label htmlFor={`editor-${placeholder}`} className={`col-md-${labelColumns} col-form-label font-weight-bold`}>\n                  <span title={description}>{name} {required ? '*' : ''}</span>\n                </label>\n                <div className={`col-md-${fieldColumns} col-form-label d-flex align-items-start`}>\n                  <input type={type} id={`editor-${placeholder}-${id}`} className={'w-auto'} {...inputArgs} />\n                </div>\n              </div>\n            </div>\n          </div>\n        }\n      </>\n    );\n  }\n\n  return (\n    <>\n      {removable ?\n        <div className=\"row form-group\" id={`${name}-${id}`}>\n          <div className={`col-md-${labelColumns}`}>\n            <label htmlFor={`editor-${placeholder}`} className={`pl-2 col-form-label font-weight-bold`}>\n              <span title={description}>{name}{required ? '*' : ''}</span>\n            </label>\n          </div>\n          <div className={`col-md-${fieldColumns}`}>\n            <div className=\"input-group\">\n              <input type={type} className=\"form-control\" id={`editor-${placeholder}-${id}`} {...inputArgs} />\n              <button type=\"button\" title={`Remove ${placeholder}`} className='btn btn-sm btn-danger' onClick={() => remove(name)}><FontAwesomeIcon icon={faMinusSquare} /></button>\n            </div>\n          </div>\n        </div>\n        :\n        <div className=\"row form-group\" id={`${name}-${id}`}>\n          <label htmlFor={`editor-${placeholder}`} className={`col-md-${labelColumns} col-form-label font-weight-bold`}>\n            <span title={description}>{name}{required ? '*' : ''}</span>\n          </label>\n          <div className={`col-md-${fieldColumns}`}>\n            <input type={type} className=\"form-control\" id={`editor-${placeholder}-${id}`} {...inputArgs} />\n          </div>\n        </div>\n      }\n    </>\n  );\n});\n\nexport default KeyValueEditor;\n","import React, { memo, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { InfoConfig } from '../../interface';\nimport { ConfigOptions } from './consts';\nimport { sbToastInfo } from 'components/common/SBToast';\nimport KeyValueEditor from './KeyValueEditor';\nimport { SBConfirmModal } from 'components/common/SBConfirmModal';\n\n// Interfaces\ninterface ConfigObjectEditorProps {\n  id: string;\n  name: string;\n  placeholder?: string;\n  description?: string;\n  value: Record<string, any>;\n  change: (_v: Record<string, any>) => void;\n  remove: (_id: string) => void;\n  config: InfoConfig;\n}\n\n// Config Editor\nconst ConfigObjectEditor = memo(function ConfigObjectEditor(props: ConfigObjectEditorProps) {\n  const { name, description = '', value, change, remove, config } = props;\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n\n  const onChange = (k: string, v: any) => {\n    const tmpValues = { ...value };\n    //if value is empty, reset to default\n    if (v === '') {\n      tmpValues[k] = config[k];\n      sbToastInfo('Resetting config value ' + k + ' to default');\n      change(tmpValues);\n    } else {\n      const parsedVal = /\\d+$/.test(v) ? parseInt(v) : v;\n      tmpValues[k] = parsedVal;\n      change(tmpValues);\n    }\n  }\n\n  const onRemoveItemClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    setIsConfirmModalOpen(true);\n  };\n\n  const removeAll = (response: boolean) => {\n    setIsConfirmModalOpen(false);\n    if (response == true) {\n      remove(name.toLowerCase());\n    }\n  }\n\n  const keys = Object.keys(ConfigOptions).map(k => {\n    const key = k as keyof typeof ConfigOptions;\n    const keyProps = {\n      ...ConfigOptions[key],\n      placeholder: key,\n      value: value[key],\n      change: (v: any) => onChange(k, v),\n      removable: false,\n      required: false,\n      id: 'config-props',\n      labelColumns: 2,\n      fieldColumns: 10\n    };\n    return <KeyValueEditor key={k} name={k} {...keyProps} />;\n  });\n\n  return (\n    <>\n      <div className=\"card mb-2\" id={name.toLowerCase()}>\n        <div className=\"card-header px-2 py-2\">\n          <div className='row no-gutters'>\n            <div className='col'>\n              <span>{name} <small style={{ fontSize: '10px' }}> {description} </small></span>\n            </div>\n            <div className='col'>\n              <button type=\"button\" className=\"btn btn-sm btn-danger float-end\" onClick={onRemoveItemClick} >\n                <FontAwesomeIcon\n                  icon={faMinusCircle}\n                />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"card-body px-2 py-2\">\n          <div className=\"row m-0\">\n            <div className=\"col-12 m-0\">\n              {keys}\n            </div>\n          </div>\n        </div>\n      </div>\n      <SBConfirmModal\n        isOpen={isConfirmModalOpen}\n        title={`Remove Config`}\n        message={`Are you sure you want to remove the configuration values for this module?`}\n        onResponse={removeAll}>\n      </SBConfirmModal>\n    </>\n  );\n});\n\nexport default ConfigObjectEditor;\n\n","import React from 'react';\nimport { PrimitiveEditorBtnStyle, PrimitiveEditorDndStyle, StructureEditorBtnStyle, StructureEditorDndStyle } from './editors/editors';\nimport { PrimitiveDef, StructureDef } from './interfaces';\nimport { InfoConfig, StandardTypeArray } from '../interface';\nimport { TypeObject } from './editors/consts';\n\ninterface EditorProps {\n  key?: number | string | undefined;  // eslint-disable-line react/require-default-props\n  dataIndex: number;\n  value: StandardTypeArray;\n  customStyle: any;\n  setRowHeight: (i: number, height: number) => void;\n  change: (v: TypeObject, i: number) => void;  // eslint-disable-line react/require-default-props\n  remove: (i: number) => void;  // eslint-disable-line react/require-default-props\n  changeIndex?: (v: string | Record<string, any>, dataIndex: number, i: number) => void;  // eslint-disable-line react/require-default-props\n  setIsVisible: (i: number) => void;\n  config: InfoConfig;\n  fieldCollapse: boolean;\n  setFieldCollapse: (bool: boolean, idx: number) => void;\n}\n\nexport const typeDef = (props: StructureDef) => {\n  const {\n    name = '',\n    type = '',\n    options = [],\n    comment = '',\n    fields = []\n  } = props;\n  return [name, type, options, comment, fields];\n};\n\nexport const primDef = (props: PrimitiveDef) => {\n  const {\n    name = '',\n    type = '',\n    options = [],\n    comment = ''\n  } = props;\n  return [name, type, options, comment];\n};\n\n// JADN Types Structure\nexport default {\n  // Structured Types\n  record: {\n    key: 'Record',\n    edit: (props: StructureDef) => typeDef({ ...props, type: 'Record' }),\n    btneditor: (props: EditorProps) => <StructureEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <StructureEditorDndStyle {...props} />,\n    type: 'structure'\n  },\n  enumerated: {\n    key: 'Enumerated',\n    edit: (props: StructureDef) => typeDef({ ...props, type: 'Enumerated' }),\n    btneditor: (props: EditorProps) => <StructureEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <StructureEditorDndStyle {...props} />,\n    type: 'structure'\n  },\n  choice: {\n    key: 'Choice',\n    edit: (props: StructureDef) => typeDef({ ...props, type: 'Choice' }),\n    btneditor: (props: EditorProps) => <StructureEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <StructureEditorDndStyle {...props} />,\n    type: 'structure'\n  },\n  map: {\n    key: 'Map',\n    edit: (props: StructureDef) => typeDef({ ...props, type: 'Map' }),\n    btneditor: (props: EditorProps) => <StructureEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <StructureEditorDndStyle {...props} />,\n    type: 'structure'\n  },\n  array: {\n    key: 'Array',\n    edit: (props: StructureDef) => typeDef({ ...props, type: 'Array' }),\n    btneditor: (props: EditorProps) => <StructureEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <StructureEditorDndStyle {...props} />,\n    type: 'structure'\n  },\n  mapof: {\n    key: 'MapOf',\n    edit: (props: StructureDef) => primDef({ ...props, type: 'MapOf' }),\n    btneditor: (props: EditorProps) => <PrimitiveEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <PrimitiveEditorDndStyle {...props} />,\n    type: 'structure'\n  },\n  arrayof: {\n    key: 'ArrayOf',\n    edit: (props: StructureDef) => primDef({ ...props, type: 'ArrayOf' }),\n    btneditor: (props: EditorProps) => <PrimitiveEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <PrimitiveEditorDndStyle {...props} />,\n    type: 'structure'\n  },\n  // Primitive Types\n  binary: {\n    key: 'Binary',\n    edit: (props: PrimitiveDef) => primDef({ ...props, type: 'Binary' }),\n    btneditor: (props: EditorProps) => <PrimitiveEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <PrimitiveEditorDndStyle {...props} />,\n    type: 'primitive'\n  },\n  boolean: {\n    key: 'Boolean',\n    edit: (props: PrimitiveDef) => primDef({ ...props, type: 'Boolean' }),\n    btneditor: (props: EditorProps) => <PrimitiveEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <PrimitiveEditorDndStyle {...props} />,\n    type: 'primitive'\n  },\n  integer: {\n    key: 'Integer',\n    edit: (props: PrimitiveDef) => primDef({ ...props, type: 'Integer' }),\n    btneditor: (props: EditorProps) => <PrimitiveEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <PrimitiveEditorDndStyle {...props} />,\n    type: 'primitive'\n  },\n  number: {\n    key: 'Number',\n    edit: (props: PrimitiveDef) => primDef({ ...props, type: 'Number' }),\n    btneditor: (props: EditorProps) => <PrimitiveEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <PrimitiveEditorDndStyle {...props} />,\n    type: 'primitive'\n  },\n  string: {\n    key: 'String',\n    edit: (props: PrimitiveDef) => primDef({ ...props, type: 'String' }),\n    btneditor: (props: EditorProps) => <PrimitiveEditorBtnStyle {...props} />,\n    dndeditor: (props: EditorProps) => <PrimitiveEditorDndStyle {...props} />,\n    type: 'primitive'\n  }\n};","import React, { memo, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle, faMinusSquare, faPlusCircle, faPlusSquare } from '@fortawesome/free-solid-svg-icons';\nimport { SBConfirmModal } from 'components/common/SBConfirmModal';\nimport SBSelect, { Option } from 'components/common/SBSelect';\nimport { shallowEqual } from 'react-redux';\nimport { useAppSelector } from 'reducers';\nimport { ModalSize } from './options/ModalSize';\nimport { PrimitiveTypeObject, StandardTypeObject, TypeKeys } from './consts';\nimport { zip } from 'components/utils';\nimport { Types } from '../structure';\nimport { typeDef } from '../types';\nimport { dismissAllToast, sbToastError } from 'components/common/SBToast';\nimport { InfoConfig } from '../../interface';\n\n// Interface\ninterface KeyArrayEditorProps {\n  id: string;\n  name: string;\n  description: string;\n  placeholder?: string;\n  value: Array<any>;\n  addTypeChange: (v: any) => void;\n  change: (_v: Record<string, any>) => void;\n  remove: (_id: string) => void;\n  config: InfoConfig;\n}\n\n// Key Array Editor: Exports\nconst KeyArrayEditor = memo(function KeyArrayEditor(props: KeyArrayEditorProps) {\n  const { name, description, placeholder, value, config, change, addTypeChange, remove } = props;\n  const [dataArr, setDataArr] = useState(value);\n  const [newExportType, setNewExportType] = useState<Option | null>(null);\n  const [addTypeName, setAddTypeName] = useState<string>('');\n\n  const schemaTypes = useAppSelector((state) => (Object.keys(state.Util.types.schema)), shallowEqual) //TODO: keep state after validation \n  const types = useAppSelector((state) => ({\n    base: (state.Util.types.base)\n  }), shallowEqual);\n  const validExports = dataArr.length != 0 ? schemaTypes.filter(type => !dataArr.includes(type)) : schemaTypes;\n\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n  const [toggleAddToTypesModal, setToggleAddToTypesModal] = useState(false);\n\n  const onChange = (e: Option, idx: number) => {\n    dismissAllToast();\n    const tmpValues = [...dataArr];\n    const regex = new RegExp(config.$TypeName, \"g\");\n    const baseTypes = types.base.map(type => type.toLowerCase());\n    if (e == null) {\n      tmpValues[idx] = \"\";\n      //Check Config \n    } else if (baseTypes.includes(e.value.toLowerCase())) {\n      sbToastError('Error: Export TypeName MUST NOT be a JADN predefined type');\n      return;\n    } else if (e.value.length >= 64) {\n      sbToastError('Error: Export Character Max length reached');\n      return;\n    } else if (e.value.includes(config.$Sys)) { //TODO empty\n      sbToastError('Error: Export TypeNames SHOULD NOT contain the System character');\n      return;\n    } else if (!regex.test(e.value)) {\n      sbToastError('Error: Export TypeName format is not permitted');\n      return;\n      //Check if export exists\n    } else if (tmpValues.includes(e.value)) {\n      sbToastError(`Export ${e.value} already exists.`);\n      return;\n    } else {\n      tmpValues[idx] = e.value;\n    }\n    setDataArr(tmpValues);\n    change(tmpValues);\n  }\n\n  const onRemoveItemClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    setIsConfirmModalOpen(true);\n  };\n\n  const removeAll = (response: boolean) => {\n    setIsConfirmModalOpen(false);\n    if (response == true) {\n      remove(name.toLowerCase());\n    }\n  }\n\n  const removeIndex = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (dataArr.length > 1) {\n      const { dataset } = e.currentTarget;\n      const index = parseInt(dataset.index || '', 10);\n      const tmpValues = [...dataArr];\n      tmpValues.splice(index, 1);\n      setDataArr(tmpValues);\n      change(tmpValues);\n    } else {\n      setDataArr([]);\n      change([]);\n    }\n  }\n\n  const addIndex = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    setDataArr([...dataArr, '']);\n  }\n\n  const addToTypes = (val: string) => {\n    setToggleAddToTypesModal(true);\n    setAddTypeName(val);\n  }\n\n  const onSelectChange = (e: Option) => {\n    if (e == null) {\n      setNewExportType(null);\n    } else {\n      setNewExportType(e);\n    }\n  }\n\n  const onCloseClick = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    dismissAllToast();\n    setToggleAddToTypesModal(false)\n  };\n\n  const onCreateTypeClick = (e: React.MouseEvent<HTMLElement>, newExportType: Option | null) => {\n    e.preventDefault();\n    const exportType: string = newExportType?.value;\n    if (newExportType == null) {\n      sbToastError('Please select a type');\n      return;\n    }\n\n    let typeArr;\n    if (Types[exportType.toLowerCase()].type == 'structure') {\n      const typeVal = typeDef({\n        type: exportType,\n        name: addTypeName,\n        options: [],\n        comment: ''\n      })\n      typeArr = zip(TypeKeys, typeVal) as StandardTypeObject\n\n    } else {\n      const typeVal = typeDef({\n        type: exportType,\n        name: addTypeName,\n        options: [],\n        comment: ''\n      })\n      typeArr = zip(TypeKeys, typeVal) as PrimitiveTypeObject;\n    }\n\n    addTypeChange(typeArr);\n    setToggleAddToTypesModal(false)\n  };\n\n  const indices = dataArr.map((val, i) => (\n    <div className=\"input-group mb-1\" key={i}>\n      <SBSelect\n        id={`keyArrayEditor-${i}`}\n        placeholder={placeholder}\n        value={val ? { value: val, label: val } : null}\n        onChange={(e: Option) => onChange(e, i)}\n        data={validExports}\n        isSmStyle\n        isCreatable\n        customNoOptionMsg={'Begin typing to add an Export...'}\n      />\n      <button type='button' className='btn btn-sm btn-danger' onClick={removeIndex} data-index={i}>\n        <FontAwesomeIcon icon={faMinusSquare} />\n      </button>\n      {val && !schemaTypes.includes(val) &&\n        <button type='button' className='btn btn-sm btn-primary' onClick={() => addToTypes(val)} data-index={i}\n          title={'Add Export to Types'}>\n          <FontAwesomeIcon icon={faPlusSquare} />\n        </button>\n      }\n    </div>\n  ))\n\n  return (\n    <>\n      <div className=\"card mb-2\" id={name.toLowerCase()}>\n        <div className=\"card-header px-2 py-2\">\n          <div className='row no-gutters'>\n            <div className='col'>\n              <span>{name} <small style={{ fontSize: '10px' }}> {description} </small></span>\n            </div>\n            <div className='col'>\n              <div className=\"btn-group float-end\" role=\"group\" aria-label=\"button group\">\n                <button type='button' className='btn btn-sm btn-primary' onClick={addIndex} >\n                  <FontAwesomeIcon icon={faPlusCircle} />\n                </button>\n                <button type='button' className='btn btn-sm btn-danger' onClick={onRemoveItemClick} >\n                  <FontAwesomeIcon icon={faMinusCircle} />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"card-body px-2 py-2\">\n          <div className=\"row m-0\">\n            <div className=\"col-12 m-0\">\n              {indices}\n            </div>\n          </div>\n        </div>\n      </div>\n      <SBConfirmModal\n        isOpen={isConfirmModalOpen}\n        title={`Remove ${name}`}\n        message={`Are you sure you want to remove ${name}?`}\n        onResponse={removeAll}>\n      </SBConfirmModal>\n      <div id='addtoTypesModal' className={`modal fade ${toggleAddToTypesModal ? 'show d-block' : 'd-none'}`} tabIndex={-1} role='dialog'>\n        <div className={`modal-dialog modal-dialog-centered ${ModalSize.sm}`} role='document'>\n          <div className='modal-content'>\n            <div className=\"modal-header\">\n              <h5 className='modal-title'>\n                Add Export {addTypeName}  to Types\n              </h5>\n              <button type='button' className='btn-close' data-bs-dismiss='modal' aria-label='Close' title='Close' onClick={onCloseClick} />\n            </div>\n            <div className=\"modal-body\">\n              <p>Please specify Type</p>\n              <SBSelect id={`newExportType`}\n                name=\"type\"\n                value={newExportType}\n                onChange={onSelectChange}\n                data={types}\n                isGrouped\n                isCreatable\n                isClearable />\n            </div>\n            <div className=\"modal-footer\">\n              <button type='button' className='btn btn-sm btn-success' onClick={(e) => onCreateTypeClick(e, newExportType)}>Create</button>\n              <button type='button' className='btn btn-sm btn-secondary' onClick={onCloseClick}>Cancel</button>\n            </div>\n          </div>\n        </div>\n        <div className={`modal-backdrop fade ${toggleAddToTypesModal ? 'show' : ''}`} style={{\n          zIndex: -1\n        }}></div>\n      </div>\n    </>\n  );\n})\n\nexport default KeyArrayEditor;\n","import React, { memo, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle, faMinusSquare, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { InfoConfig } from '../../interface';\nimport { sbToastError } from 'components/common/SBToast';\nimport { SBConfirmModal } from 'components/common/SBConfirmModal';\n\n// Interface\ninterface KeyObjectEditorProps {\n  id: string;\n  name: string;\n  description: string;\n  placeholder?: string;\n  value: Record<string, any>;\n  change: (_v: Record<string, any>) => void;\n  remove: (_id: string) => void;\n  config: InfoConfig;\n}\n\ntype Pair = { key: string, value: any };\n\n// Key Object Editor : NSID/Namespace\nconst KeyObjectEditor = memo(function KeyObjectEditor(props: KeyObjectEditorProps) {\n  const { value, description, name, change, config } = props;\n  let valueObjInit = Object.keys(value).map(k => ({ key: k, value: value[k] }));\n  const [valueObj, setValueObj] = useState(valueObjInit);\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { dataset, value } = e.target;\n    const idx = parseInt(dataset.index || '', 10);\n    const type = dataset.type as keyof Pair;\n\n    const tmpvalue = [...valueObj];\n    tmpvalue[idx][type] = value;\n    setValueObj(tmpvalue);\n  }\n\n  const onBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const { dataset, value } = e.target;\n    const idx = parseInt(dataset.index || '', 10);\n    const type = dataset.type as keyof Pair;\n\n    if (type == 'key' && value) {\n      const regex = new RegExp(config.$NSID, \"g\");\n      if (!regex.test(value)) {\n        sbToastError('Error: Namespace Identifier format is not permitted');\n      }\n    }\n\n    const tmpvalue = [...valueObj];\n    tmpvalue[idx][type] = value;\n    if (JSON.stringify(valueObjInit) == JSON.stringify(tmpvalue)) {\n      return;\n    }\n    setValueObj(tmpvalue);\n    change(toObject(tmpvalue));\n  }\n\n  const toObject = (val: Array<Pair>) => {\n    return (val || valueObj).reduce((obj, row) => ({\n      ...obj,\n      [row.key]: row.value\n    }), {});\n  }\n\n  const onRemoveItemClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    if (name == \"Namespaces\") {\n      setIsConfirmModalOpen(true);\n    } else {\n      const { name, remove } = props;\n      remove(name.toLowerCase());\n    }\n\n  };\n\n  const removeAll = (response: boolean) => {\n    setIsConfirmModalOpen(false);\n    if (response == true) {\n      const { name, remove } = props;\n      remove(name.toLowerCase());\n    }\n  }\n\n  const removeIndex = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (valueObj.length > 1) {\n      const { dataset } = e.currentTarget;\n      const idx = parseInt(dataset.index || '', 10);\n\n      const tmpvalue = [...valueObj.filter((_row, i) => i !== idx)];\n      setValueObj(tmpvalue);\n      change(toObject(tmpvalue));\n\n    } else {\n      removeAll(true);\n    }\n  }\n\n  const addIndex = () => {\n    if (valueObjInit.some(v => v.key === '')) {\n      sbToastError('Cannot add more: Enter namespace');\n      return;\n    }\n\n    const tmpvalue = [...valueObj, { key: '', value: '' }];\n    setValueObj(tmpvalue);\n    change(toObject(tmpvalue));\n  }\n\n  const indices = valueObj.map((obj, i) => (\n    <div className=\"input-group mb-1 p-0\" key={i}>\n      <input\n        id={`keyObjectEditorKey-${i}`}\n        type=\"text\"\n        className=\"form-control\"\n        data-index={i}\n        data-type=\"key\"\n        placeholder={'NSID'}\n        value={obj.key}\n        onChange={onChange}\n        onBlur={onBlur}\n      />\n      <input\n        id={`keyObjectEditorValue-${i}`}\n        type=\"text\"\n        className=\"form-control\"\n        data-index={i}\n        data-type=\"value\"\n        placeholder={'Namespace'}\n        value={obj.value}\n        onChange={onChange}\n        onBlur={onBlur}\n      />\n      <button type='button' className='btn btn-sm btn-danger' onClick={removeIndex} data-index={i}>\n        <FontAwesomeIcon icon={faMinusSquare} />\n      </button>\n    </div>\n  ));\n\n  return (\n    <>\n      <div className=\"card mb-2\" id={name.toLowerCase()}>\n        <div className=\"card-header px-2 py-2\">\n          <div className='row no-gutters'>\n            <div className='col'>\n              <span>{name} <small style={{ fontSize: '10px' }}> {description} </small></span>\n            </div>\n            <div className='col'>\n              <div className=\"btn-group float-end\" role=\"group\" aria-label=\"button group\">\n                <button type='button' className='btn btn-sm btn-primary' onClick={addIndex} >\n                  <FontAwesomeIcon icon={faPlusCircle} />\n                </button>\n                <button type='button' className='btn btn-sm btn-danger' onClick={onRemoveItemClick} >\n                  <FontAwesomeIcon icon={faMinusCircle} />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"card-body px-2 py-2\">\n          <div className=\"row m-0\">\n            <div className=\"col-12 m-0\">\n              {indices}\n            </div>\n          </div>\n        </div>\n      </div>\n      <SBConfirmModal\n        isOpen={isConfirmModalOpen}\n        title={`Remove ${name}`}\n        message={`Are you sure you want to remove ${name}?`}\n        onResponse={removeAll}>\n      </SBConfirmModal>\n    </>\n  );\n});\nexport default KeyObjectEditor;","import React, { memo } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { safeGet } from '../../../../../utils';\nimport { useAppSelector } from 'reducers';\nimport { getFormatOptions } from 'reducers/format';\nimport { OptionChange, RequiredOptions, TypeOptionInputArgs, ValidOptions } from './consts';\nimport KeyValueEditor from '../KeyValueEditor';\n\ninterface TypeOptionsEditorProps {\n  id?: string;\n  placeholder?: string;\n  change: OptionChange;\n  deserializedState: Record<string, any>;\n  optionType?: string;\n}\n\nconst TypeOptionsEditor = memo(function TypeOptionsEditor(props: TypeOptionsEditorProps) {\n  const { change, deserializedState, id, optionType = '' } = props;\n  const baseTypes = useAppSelector((state) => (state.Util.types.base), shallowEqual);\n  const schemaTypesObject = useAppSelector((state) => (state.Util.types.schema), shallowEqual);\n  const formatTypes = useSelector(getFormatOptions);\n  const schemaTypes = Object.keys(schemaTypesObject);\n  const types = {\n    base: baseTypes,\n    schema: schemaTypes\n  };\n\n  const getOptions = (key: string) => {\n    switch (key) {\n      case 'ktype':\n        //SHOULD be a Defined type, \n        //either an enumeration or a type with constraints such as a pattern \n        //or semantic valuation keyword that specify a fixed subset of values that belong to a category.\n        const schemaTypesArr = Object.values(schemaTypesObject);\n        const keyTypesArr = schemaTypesArr.filter((arr) => arr[1].toLowerCase() == \"enumerated\" || arr[1].toLowerCase() == \"string\");\n        const keyTypes = keyTypesArr.map(arr => arr[0]);\n        return keyTypes;\n      case 'vtype':\n        return types;\n      case 'enum':\n        //An Enumerated type defined with the enum option has fields copied \n        //from the type referenced in the option rather than being listed individually in the definition. \n        const filtered = Object.values(schemaTypesObject).filter((type) => {\n          return (type.length == 5 && Array.isArray(type[4]) && type[4].length != 0)\n        }).map((type) => {\n          return type[0]\n        })\n        return filtered;\n      case 'format':\n        //get only applicable formats based on type \n        let formats_returned = [];\n        for (const format of formatTypes) {\n          if (format.type.toLowerCase() == optionType?.toLowerCase()) {\n            formats_returned.push(format.name)\n          }\n        }\n        return formats_returned;\n      default:\n        return [];\n    }\n  };\n\n  const validOptions = () => {\n    return safeGet(ValidOptions, optionType, []).map((key: string) => {\n      return (\n        <KeyValueEditor\n          key={key}\n          id={id}\n          name={key}\n          labelColumns={2}\n          fieldColumns={10}\n          placeholder={key}\n          removable={false}\n          options={getOptions(key)}\n          change={val => change([key, val], 'type')}\n          value={deserializedState[key]}\n          required={RequiredOptions[optionType].includes(key) ? true : false}\n          {...TypeOptionInputArgs[key]}\n        />\n      );\n    });\n  };\n\n  if (validOptions().length != 0) {\n    return (\n      <>\n        {validOptions()}\n      </>\n    );\n  } else if (optionType == \"Boolean\") {\n    return (\n      <>\n        No type options available\n      </>);\n  }\n  return '';\n});\n\nexport default TypeOptionsEditor;","import React, { memo } from 'react';\nimport { FieldOptionInputArgs, OptionChange } from './consts';\nimport KeyValueEditor from '../KeyValueEditor';\n\ninterface FieldOptionsEditorProps {\n  id?: string;\n  deserializedState: Record<string, any>;\n  placeholder?: string;\n  fieldOptions: boolean;\n  change: OptionChange;\n}\n\nconst FieldOptionsEditor = memo(function FieldOptionsEditor(props: FieldOptionsEditorProps) {\n  const { id, change, deserializedState, fieldOptions } = props;\n\n  const validOptions = () => {\n    return Object.keys(FieldOptionInputArgs).map((key: string) => {\n      return (\n        <KeyValueEditor\n          key={key}\n          id={id}\n          name={key}\n          {...FieldOptionInputArgs[key]}\n          placeholder={key}\n          removable={false}\n          change={val => change([key, val], 'field')}\n          value={deserializedState[key]}\n        />\n      );\n    });\n  };\n\n  if (fieldOptions) {\n    return (\n      <>\n        {validOptions()}\n      </>\n    );\n  }\n  return '';\n});\n\nexport default FieldOptionsEditor;","import React, { memo, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport {\n  OptionTypes, Val, opts2arr, opts2obj, RequiredOptions\n} from './consts';\nimport { objectFromTuple } from '../../../../../utils';\nimport { ModalSize } from './ModalSize';\nimport { sbToastError } from 'components/common/SBToast';\nimport TypeOptionsEditor from './TypeOptionsEditor';\nimport FieldOptionsEditor from './FieldOptionsEditor';\n\n// Interface\ninterface OptionsModalProps {\n  id: string;\n  toggleModal: () => void;\n  saveModal: (_v: Array<string>) => void;\n  isOpen: boolean;\n  fieldOptions?: boolean;\n  optionValues: Array<string>;\n  optionType?: string;\n  modalSize?: string;\n}\n\n// convert array into options data state object\nconst deserializeOptions = (options: Array<string>) => {\n  const opts = opts2obj(options);\n  const fieldOpts = OptionTypes.field.filter(opt => opt in opts).map<[string, string | number | boolean]>(opt => [opt, opts[opt]]);\n  const typeOpts = OptionTypes.type.filter(opt => opt in opts).map<[string, string | number | boolean]>(opt => [opt, opts[opt]]);\n  return {\n    field: objectFromTuple(...fieldOpts),\n    type: objectFromTuple(...typeOpts)\n  };\n}\n\n// convert options data state object into formatted array\nconst serializeOptions = (type: Record<string | number, string | number | boolean>, field: Record<string | number, string | number | boolean>) => {\n  return [\n    ...opts2arr(type),  // Type Options\n    ...opts2arr(field)  // Field Options\n  ];\n}\n\n// Component\nconst OptionsModal = memo(function OptionsModal(props: OptionsModalProps) {\n\n  const { id, optionValues, saveModal, fieldOptions = false, isOpen, optionType = '', toggleModal, modalSize = ModalSize.md } = props;\n  const [data, setData] = useState(deserializeOptions(optionValues));\n  const tmpData = { ...deserializeOptions(optionValues) };\n\n  const saveOptions = (state: Val, type: 'field' | 'type') => {\n    let typeOptVal: string | undefined;\n    state[1] == '' ? typeOptVal = undefined : typeOptVal = state[1];\n\n    //TODO: remove key from data if undefined\n    const updatedData = {\n      ...data,\n      [type]: {\n        ...data[type],\n        [state[0]]: typeOptVal\n      }\n    }\n\n    setData(updatedData);\n  }\n\n  const saveData = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    //check for required fields\n    let errCount = 0;\n\n    if (RequiredOptions[optionType] && optionType in RequiredOptions) {\n      for (let i = 0; i < RequiredOptions[optionType].length; i++) {\n        if ((!Object.keys(data['type']).includes(RequiredOptions[optionType][i])) || (Object.keys(data['type']).includes(RequiredOptions[optionType][i]) && data['type'][RequiredOptions[optionType][i]] == undefined)) {\n          sbToastError(RequiredOptions[optionType][i] + ' is required');\n          errCount += 1;\n        }\n      }\n    }\n    if (errCount >= 1) {\n      return;\n    }\n\n    //MUST NOT include more than one collection option (set, unique, or unordered)\n    const collectionType = ['unique', 'set', 'unordered'];\n    let collectionCount = 0;\n    if (optionType == 'ArrayOf') {\n      for (let i = 0; i < collectionType.length; i++) {\n        if (collectionType[i] in data['type'] && data['type'][collectionType[i]] == true) {\n          collectionCount += 1;\n          if (collectionCount > 1) {\n            sbToastError('MUST NOT include more than one collection option (set, unique, or unordered)');\n            return;\n          }\n        }\n      }\n    }\n\n    //do not allow user to select regex format if pattern exists\n    if (Object.keys(data['type']).includes('format') && Object.keys(data['type']).includes('pattern') &&\n      (data['type']['pattern'] != undefined) && (data['type']['format'] == 'regex')) {\n      sbToastError('May only allow one of the following type options: pattern or format of regex.');\n      return;\n    }\n\n    saveModal(serializeOptions(data['type'], data['field']))\n  }\n\n  const toggleModalhere = () => {\n    setData(tmpData);\n    toggleModal();\n  }\n\n  const clearData = () => {\n    setData(deserializeOptions([]));\n    const test = deserializeOptions([]);\n    const test2 = data;\n    console.log(\"8888\");\n  }\n\n  return (\n    <>\n      {createPortal(<div id=\"optionsModal\" className={`modal fade ${isOpen ? 'show d-block' : 'd-none'}`} tabIndex={-1} role='dialog'>\n        <div className={`modal-dialog modal-dialog-centered ${modalSize}`} role='document'>\n          <div className='modal-content p-2'>\n            <div className=\"modal-header\">\n              <h5 className='modal-title'>\n                {fieldOptions ? 'Field' : 'Type'} Options\n              </h5>\n              <button type='button' className='btn-close' data-bs-dismiss='modal' aria-label='Close' title='Close' onClick={toggleModalhere} />\n            </div>\n            <div className=\"modal-body\">\n              <FieldOptionsEditor\n                id={id}\n                deserializedState={data['field']}\n                change={saveOptions}\n                fieldOptions={fieldOptions}\n              />\n              <TypeOptionsEditor\n                id={id}\n                deserializedState={data['type']}\n                change={saveOptions}\n                optionType={optionType}\n              />\n            </div>\n            <hr />\n            <div className='row'>\n              <div className='col-sm-12 p2'>\n                <button type=\"button\" className='btn btn-secondary float-start' onClick={clearData}>Clear</button>\n                <button type='button' className='btn btn-success float-end' onClick={saveData}>Save</button>\n                <button type='button' className='btn btn-secondary float-end mx-2' data-bs-dismiss='modal' onClick={toggleModalhere}>Close</button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className={`modal-backdrop fade ${isOpen ? 'show' : ''}`} style={{\n          zIndex: -1\n        }}></div>\n      </div>,\n        document.body)}\n    </>\n  );\n});\n\nexport default OptionsModal;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { shallowEqual } from 'react-redux';\nimport { flushSync } from 'react-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { useInView } from 'react-intersection-observer';\nimport { useAppSelector } from 'reducers';\nimport { zip } from '../../../../../utils';\nimport {\n  EnumeratedFieldArray, FieldArray, InfoConfig, StandardFieldArray, TypeArray\n} from '../../../interface';\nimport { StandardTypeObject, TypeKeys } from '../consts';\nimport OptionsModal from '../options/OptionsModal';\nimport { ModalSize } from '../options/ModalSize';\nimport { dismissAllToast, sbToastError } from 'components/common/SBToast';\nimport { SBConfirmModal } from 'components/common/SBConfirmModal';\n\nexport interface StructureEditorProps {\n  dataIndex: number; //index changes based on obj in arr (tracks the parent index)\n  value: TypeArray;\n  customStyle: any;\n  setRowHeight: (i: number, height: number) => void;\n  change: (v: StandardTypeObject, i: number) => void;\n  remove: (i: number) => void;\n  setIsVisible: (i: number) => void;\n  config: InfoConfig;\n  fieldCollapse: boolean;\n  setFieldCollapse: (bool: boolean, idx: number) => void;\n}\n\nexport default function withStructureEditor(StructureWrapper: React.ComponentType<any>) {\n  function WithStructureEditor(props: StructureEditorProps) {\n\n    const { value, dataIndex, config, setFieldCollapse, customStyle, setRowHeight, change, remove, setIsVisible } = props;\n    const predefinedTypes = useAppSelector((state) => [...state.Util.types.base], shallowEqual);\n\n    //TODO: may need to add polyfill -- support for Safari\n    const { ref: inViewRef, inView, entry } = useInView({\n      fallbackInView: true,\n      threshold: 1\n    });\n\n    const [modal, setModal] = useState(false);\n    const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n\n    const valueObjInit = zip(TypeKeys, value) as StandardTypeObject;\n    const [valueObj, setValueObj] = useState(valueObjInit);\n    const isEditableID = valueObj.type == 'Record' || valueObj.type == 'Array' ? false : true;\n    let SBConfirmModalValName = valueObj.name;\n\n    const rowRef = useRef<any>();\n\n    useEffect(() => {\n      if (rowRef.current && rowRef.current.getBoundingClientRect().height != 0) {\n        setRowHeight(dataIndex, rowRef.current.getBoundingClientRect().height + 5);\n      }\n    }, []);\n\n    useEffect(() => {\n      if (inView) {\n        setIsVisible(dataIndex);\n      }\n    }, [entry])\n\n    const getFieldPropValue = (field: JSX.Element, propPos: number) => {\n      let propValue: any = null;\n      if (field.props &&\n        field.props.item &&\n        field.props.item.props &&\n        field.props.item.props.value &&\n        field.props.item.props.value[propPos]) {\n        propValue = field.props.item.props.value[propPos];\n        //fields.filter(field => field.props.value[1] == val[1]);\n      }\n      return propValue;\n    }\n\n    const sortFields = (e: React.MouseEvent<HTMLAnchorElement>) => {\n      e.preventDefault();\n      let tmpFields = [...valueObj.fields];\n      //sort fields\n      tmpFields.sort(function (a, b) {\n        return a[0] - b[0];\n      });\n\n      const updatevalue = { ...valueObj, fields: tmpFields };\n      setValueObj(updatevalue);\n      change(updatevalue, dataIndex);\n    }\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const { placeholder, value } = e.target;\n      const key = placeholder.toLowerCase();\n      setValueObj({ ...valueObj, [key]: value });\n    }\n\n    const onBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n      e.preventDefault();\n      const { placeholder, value } = e.target;\n\n      //VALIDATE NAME\n      if (placeholder == \"Name\") {\n        if (predefinedTypes.includes(value.toLowerCase())) {\n          sbToastError('Error: TypeName MUST NOT be a JADN predefined type');\n        }\n        if (value.length >= 64) {\n          sbToastError('Error: Max length reached');\n          return;\n        }\n        if (value.includes(config.$Sys)) {\n          sbToastError('Error: TypeNames SHOULD NOT contain the System character');\n        }\n        const regex = new RegExp(config.$TypeName, \"g\");\n        if (!regex.test(value)) {\n          sbToastError('Error: TypeName format is not permitted');\n        }\n      }\n\n      const key = placeholder.toLowerCase();\n      const updatevalue = { ...valueObj, [key]: value };\n      if (JSON.stringify(valueObjInit) == JSON.stringify(updatevalue)) {\n        return;\n      }\n      setValueObj(updatevalue);\n      change(updatevalue, dataIndex);\n    }\n\n    const onRemoveItemClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault();\n      setIsConfirmModalOpen(true);\n    };\n\n    const removeAll = (response: boolean, confirm_value: number) => {\n      setIsConfirmModalOpen(false);\n      if (response == true) {\n        remove(confirm_value);\n      }\n    }\n\n    const onAddField = (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault();\n      let field: EnumeratedFieldArray | StandardFieldArray;\n      //check field count\n      if (config.$MaxElements && valueObj.fields?.length > config.$MaxElements) {\n        sbToastError(`Error: Field count exceeds $MaxElements. Please remove ${valueObj.fields?.length - config.$MaxElements} field(s).`);\n        return;\n      } else if (config.$MaxElements && valueObj.fields?.length == config.$MaxElements) {\n        sbToastError('Error: Field count meets $MaxElements. Cannot add more fields.');\n        return;\n      }\n\n      let f_count = valueObj.fields?.length + 1;\n      const listOfIDs = valueObj.fields.map((field) => { return field[0]; })\n      if (listOfIDs.includes(f_count)) {\n        //Create Unique ID\n        const currMaxID = Math.max(...listOfIDs);\n        f_count = currMaxID + 1;\n      }\n\n      const fieldName = 'field_value_' + f_count;\n      if (valueObj.type.toLowerCase() === 'enumerated') {\n        field = [f_count, fieldName, ''] as EnumeratedFieldArray;\n      } else {\n        //default field type is String\n        field = [f_count, fieldName, 'String', [], ''] as StandardFieldArray;\n      }\n\n      const tmpFieldValues = [...valueObj.fields, field];\n      const updatevalue = { ...valueObj, fields: tmpFieldValues };\n\n      flushSync(() => {\n        setValueObj(updatevalue);\n      });\n\n      change(updatevalue, dataIndex);\n      setFieldCollapse(false, dataIndex);\n    }\n\n    const fieldChange = (val: FieldArray, idx: number) => {\n      //check field ID and field name\n      const fieldIDsFound = valueObj.fields.filter(field => {\n        const fieldPropValID = getFieldPropValue(field, 0);\n        if (fieldPropValID) {\n          return fieldPropValID == val[0]\n        } else {\n          return null;\n        }\n      });\n\n      if (fieldIDsFound.length > 1) {\n        sbToastError('Error: FieldID must be unique');\n        return;\n      }\n\n      const fieldNamesFound = valueObj.fields.filter(field => {\n        const fieldPropValName = getFieldPropValue(field, 1);\n        if (fieldPropValName) {\n          return fieldPropValName == val[1]\n        } else {\n          return null;\n        }\n      });\n\n      if (fieldNamesFound.length > 1) {\n        sbToastError('Error: FieldName must be unique');\n        return;\n      }\n\n      if (typeof val[0] != 'number') {\n        val[0] = parseInt(val[0]); //force index to type number\n      }\n\n      const tmpFieldValues = [...valueObj.fields];\n      tmpFieldValues[idx] = val;\n\n      const updatevalue = { ...valueObj, fields: tmpFieldValues };\n      setValueObj(updatevalue);\n      change(updatevalue, dataIndex);\n    };\n\n    const onFieldRemoval = (idx: number) => {\n      let tmpFieldValues = [...valueObj.fields];\n\n      if (idx + 1 == valueObj.fields?.length) {\n        tmpFieldValues.pop();\n      } else {\n        tmpFieldValues.splice(idx, 1);\n      }\n\n      //If BaseType is Array or Record, FieldID MUST be the ordinal position of the field within the type, numbered consecutively starting at 1.\n      if (!isEditableID) {\n        tmpFieldValues = tmpFieldValues.map((item, index) => {\n          item[0] = index + 1;\n          return item;\n        });\n      }\n\n      const updatevalue = { ...valueObj, fields: tmpFieldValues };\n      setValueObj(updatevalue);\n      change(updatevalue, dataIndex);\n    };\n\n    const saveModal = (modalData: Array<string>) => {\n      toggleModal();\n      dismissAllToast();\n      const prevState = [...valueObj.options];\n      if (JSON.stringify(prevState) === JSON.stringify(modalData)) {\n        return;\n      }\n      var updatevalue = { ...valueObj, options: modalData }\n      // if EnumeratedField && enum || pointer, remove fields \n      if (updatevalue.type == \"Enumerated\" && (updatevalue.options.find(str => str.startsWith('#'))) || (updatevalue.options.find(str => str.startsWith('>')))) {\n        updatevalue = { ...updatevalue, fields: [] }\n      }\n      setValueObj(updatevalue);\n      change(updatevalue, dataIndex);\n    }\n\n    const toggleModal = () => {\n      setModal(modal => !modal);\n    }\n\n    // If the Derived Enumerations or Pointers extensions are present in type options, the Fields array MUST be empty.\n    // TODO: Is this used?\n    if (valueObj.options && ((valueObj.options.find(str => str.startsWith('#'))) || (valueObj.options.find(str => str.startsWith('>'))))) {\n      return (\n        <>\n          <div className=\"card mb-3\" ref={rowRef} style={customStyle}>\n            <div className=\"card-header px-2 py-2\" ref={inViewRef}>\n              <span id={valueObj.name} className=\"col-sm-10 px-1 my-1\">{`${valueObj.name} (${valueObj.type})`}</span>\n              <button type='button' className='btn btn-sm btn-danger float-end' onClick={onRemoveItemClick} >\n                <FontAwesomeIcon icon={faMinusCircle} />\n              </button>\n            </div>\n            <div className=\"card-body px-2 py-2\">\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <div className='row'>\n                    <div className='col-md-4'>\n                      <label htmlFor={`name-${dataIndex}`} className='mb-0'>Name</label>\n                    </div>\n                    <div className='col-md-6 offset-md-2'>\n                      <label htmlFor={`comment-${dataIndex}`} className='mb-0'>Comment</label>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-4\">\n                      <input id={`name-${dataIndex}`} name=\"name\" type=\"text\" placeholder=\"Name\" className='form-control' maxLength={64} value={valueObj.name}\n                        onChange={onChange} onBlur={onBlur} />\n                    </div>\n                    <div className=\"col-md-2 text-center px-0\">\n                      <button type='button' className='btn btn-primary btn-sm p-2' data-bs-toggle=\"modal\" data-bs-target=\"#optionsModal\" onClick={toggleModal}>Type Options</button>\n                      <OptionsModal\n                        id={`${dataIndex}`}\n                        optionValues={valueObj.options}\n                        isOpen={modal}\n                        optionType={valueObj.type}\n                        toggleModal={toggleModal}\n                        saveModal={saveModal}\n                        modalSize={ModalSize.lg}\n                      />\n                    </div>\n                    <div className=\"col-md-6\">\n                      <input id={`comment-${dataIndex}`} name=\"comment\" type=\"textarea\" placeholder=\"Comment\" className='form-control text-area-w100'\n                        value={valueObj.comment} onChange={onChange} onBlur={onBlur} />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      );\n    }\n\n    return (\n      <>\n        <StructureWrapper\n          isEditableID={isEditableID}\n          rowRef={rowRef}\n          inViewRef={inViewRef}\n          valueObj={valueObj}\n          setValueObj={setValueObj}\n          onRemoveItemClick={onRemoveItemClick}\n          onChange={onChange}\n          onBlur={onBlur}\n          modal={modal}\n          toggleModal={toggleModal}\n          saveModal={saveModal}\n          sortFields={sortFields}\n          fieldChange={fieldChange}\n          onFieldRemoval={onFieldRemoval}\n          onAddField={onAddField}\n          {...props}\n          structureEditor\n        />\n        < SBConfirmModal\n          isOpen={isConfirmModalOpen}\n          title={`Remove ${SBConfirmModalValName}`}\n          message={`Are you sure you want to remove ${SBConfirmModalValName}?`}\n          confirm_value={dataIndex}\n          onResponse={removeAll} >\n        </SBConfirmModal>\n      </>\n    );\n  };\n  const wrappedComponentName = StructureWrapper.displayName\n    || StructureWrapper.name\n    || 'Component';\n\n  WithStructureEditor.displayName = `withStructureEditor(${wrappedComponentName})`;\n  return WithStructureEditor;\n};\n","import React, { useState } from 'react';\nimport { shallowEqual } from 'react-redux';\nimport {\n    FieldObject, EnumeratedFieldKeys, StandardFieldKeys\n} from '../consts';\nimport { useAppSelector } from '../../../../../../reducers';\nimport { objectValues, zip } from '../../../../../utils';\nimport { EnumeratedFieldArray, FieldArray, InfoConfig, StandardFieldArray } from '../../../interface';\nimport { dismissAllToast, sbToastError } from 'components/common/SBToast';\nimport { Option } from 'components/common/SBSelect';\nimport { SBConfirmModal } from 'components/common/SBConfirmModal';\nimport { DragItem } from '../DragStyle/SBOutlineFields';\nimport { Types } from '../../structure';\n\ninterface FieldEditorProps {\n    id: any;\n    enumerated?: boolean;\n    parentIndex: number;\n    dataIndex: number;\n    value: EnumeratedFieldArray | StandardFieldArray;\n    change: (_v: EnumeratedFieldArray | StandardFieldArray, _i: number) => void;\n    remove: (_i: number) => void;\n    config: InfoConfig;\n    editableID: boolean;\n\n    isDragging?: boolean;\n    moveCard?: (dragCardValue: EnumeratedFieldArray | StandardFieldArray, newIndex: number) => void;\n    dropCard?: (arg: DragItem) => void;\n    acceptableType?: string;\n\n    changeIndex?: (_v: FieldArray, _i: number, _j: number) => void;\n    isFirst?: boolean;\n    isLast?: boolean;\n}\n\n\nexport default function withFieldEditor(FieldWrapper: React.ComponentType<any>) {\n    function WithFieldEditor(props: FieldEditorProps) {\n        const { enumerated, value, dataIndex, change, config, remove } = props;\n\n        const schemaTypes = useAppSelector((state) => (Object.keys(state.Util.types.schema)), shallowEqual);\n        //FieldType MUST be a Primitive type, ArrayOf, MapOf, or a model-defined type.\n        const baseTypes = useAppSelector((state) => state.Util.types.base).filter((type) => {\n            if (Types[type.toLowerCase()].type == \"primitive\" || Types[type.toLowerCase()].key == \"ArrayOf\" || Types[type.toLowerCase()].key == \"MapOf\") {\n                return true;\n            } else {\n                return false;\n            }\n        });\n        const types = {\n            base: baseTypes,\n            schema: schemaTypes\n        };\n\n        const [modal, setModal] = useState(false);\n        const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n\n        const fieldKeys = enumerated ? EnumeratedFieldKeys : StandardFieldKeys;\n        const valueObjInit = zip(fieldKeys, value) as FieldObject;\n        const [valueObj, setValueObj] = useState<FieldObject>(valueObjInit);\n        const [valType, setValType] = useState({ value: valueObj.type, label: valueObj.type });\n        const SBConfirmModalValName = enumerated ? valueObj.value : valueObj.name;\n\n        const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            const { placeholder, value } = e.target;\n            if (enumerated) {\n                if (!value) {\n                    sbToastError('Value required for Enum');\n                }\n            }\n            const key = placeholder.toLowerCase();\n            setValueObj({ ...valueObj, [key]: value });\n        }\n\n        const onBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n            const { placeholder, value } = e.target;\n\n            if (placeholder == \"Name\") {\n                if (value.includes('/')) {\n                    sbToastError('Error: FieldNames MUST NOT contain the JSON Pointer field separator \"/\", which is reserved for use in the Pointers extension.');\n                    return;\n                }\n                if (value.length >= 64) {\n                    sbToastError('Error: Max length reached');\n                    return;\n                }\n                const regex = new RegExp(config.$FieldName, \"g\");\n                if (!regex.test(value)) {\n                    sbToastError('Error: FieldName format is not permitted');\n                }\n            }\n\n            const key = placeholder.toLowerCase();\n            const updatevalue = { ...valueObj, [key]: value }\n            if (JSON.stringify(valueObjInit) == JSON.stringify(updatevalue)) {\n                return;\n            }\n            setValueObj(updatevalue);\n            change(objectValues(updatevalue as Record<string, any>) as FieldArray, dataIndex);\n        }\n\n        const onSelectChange = (e: Option) => {\n            var updatevalue\n            //clear type options \n            if (e == null) {\n                //default field type is String\n                setValType({ value: 'String', label: 'String' });\n                updatevalue = { ...valueObj, options: [], ['type']: 'String' };\n\n            } else {\n                setValType(e);\n                updatevalue = { ...valueObj, options: [], ['type']: e.value };\n            }\n\n            setValueObj(updatevalue);\n            change(objectValues(updatevalue as Record<string, any>) as FieldArray, dataIndex);\n        }\n\n        const onRemoveItemClick = (e: React.MouseEvent<HTMLAnchorElement> | React.MouseEvent<HTMLButtonElement>) => {\n            e.preventDefault();\n            setIsConfirmModalOpen(true);\n        };\n\n        const removeAll = (response: boolean, confirm_value: number) => {\n            setIsConfirmModalOpen(false);\n            if (response == true) {\n                remove(confirm_value);\n            }\n        }\n\n        const saveModal = (modalData: Array<string>) => {\n            toggleModal();\n            dismissAllToast();\n            const prevState = [...valueObj.options];\n            if (JSON.stringify(prevState) === JSON.stringify(modalData)) {\n                return;\n            }\n            const updatevalue = { ...valueObj, options: modalData }\n            setValueObj(updatevalue);\n            // change(updatevalue, dataIndex);\n            change(objectValues(updatevalue as Record<string, any>) as FieldArray, dataIndex);\n        }\n\n        const toggleModal = () => {\n            setModal(!modal);\n        }\n\n        return (\n            <>\n                <FieldWrapper\n                    onBlur={onBlur}\n                    onSelectChange={onSelectChange}\n                    onChange={onChange}\n                    onRemoveItemClick={onRemoveItemClick}\n                    modal={modal}\n                    saveModal={saveModal}\n                    toggleModal={toggleModal}\n                    valueObj={valueObj}\n                    valType={valType}\n                    types={types}\n                    enumerated={enumerated}\n                    {...props}\n                />\n                <SBConfirmModal\n                    isOpen={isConfirmModalOpen}\n                    title={`Remove ${SBConfirmModalValName}`}\n                    message={`Are you sure you want to remove ${SBConfirmModalValName}?`}\n                    confirm_value={dataIndex}\n                    onResponse={removeAll}></SBConfirmModal>\n            </>\n        );\n    };\n    const wrappedComponentName = FieldWrapper.displayName\n        || FieldWrapper.name\n        || 'Component';\n\n    WithFieldEditor.displayName = `withFieldEditor(${wrappedComponentName})`;\n    return WithFieldEditor;\n};\n","import React, { memo } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle, faSquareCaretDown, faSquareCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport { EnumeratedFieldArray, FieldArray, InfoConfig, StandardFieldArray } from '../../../interface';\nimport SBSelect, { Option } from 'components/common/SBSelect';\nimport { EnumeratedFieldObject, StandardFieldObject } from '../consts';\nimport { ModalSize } from '../options/ModalSize';\nimport OptionsModal from '../options/OptionsModal';\nimport withFieldEditor from '../ParentEditor/withFieldEditor';\n\ninterface FieldEditorProps {\n    id: any;\n    enumerated?: boolean;\n    parentIndex: number;\n    dataIndex: number;\n    value: EnumeratedFieldArray | StandardFieldArray;\n    change: (_v: EnumeratedFieldArray | StandardFieldArray, _i: number) => void;\n    remove: (_i: number) => void;\n    config: InfoConfig;\n    changeIndex: (_v: FieldArray, _i: number, _j: number) => void;\n    editableID: boolean;\n    isFirst: boolean;\n    isLast: boolean;\n    valueObj: EnumeratedFieldObject | StandardFieldObject;\n    valType: Option;\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\n    onSelectChange: (e: Option) => void;\n    modal: boolean;\n    saveModal: (modalData: Array<string>) => void;\n    toggleModal: () => void;\n    onRemoveItemClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    types: { base: string[]; schema: string[]; };\n}\n\n\nconst FieldEditorBtn = memo(function FieldEditorBtn(props: FieldEditorProps) {\n    const { enumerated, valueObj, valType, value, parentIndex, dataIndex, isFirst, isLast,\n        changeIndex, onChange, onBlur, onSelectChange, editableID, types,\n        modal, saveModal, toggleModal, onRemoveItemClick } = props;\n\n    const makeOptions = () => {\n        if (enumerated) {\n            return (\n                <div className=\"row m-0\">\n                    <div className='col-md-2'>\n                        <label htmlFor={`id-${parentIndex}-${dataIndex}`}>ID</label>\n                        <input id={`id-${parentIndex}-${dataIndex}`} name=\"id\" type=\"number\" placeholder=\"ID\" className='form-control' value={valueObj.id}\n                            onChange={onChange} onBlur={onBlur} />\n                    </div>\n                    <div className=\"col-md-4\">\n                        <label htmlFor={`value-${parentIndex}-${dataIndex}`} >Value</label>\n                        <input id={`value-${parentIndex}-${dataIndex}`} name=\"value\" type=\"text\" placeholder=\"Value\" className='form-control' value={valueObj.value}\n                            onChange={onChange} onBlur={onBlur} />\n                    </div>\n                    <div className='col-md-6'>\n                        <label htmlFor={`comment-${parentIndex}-${dataIndex}`}>Comment</label>\n                        <input\n                            id={`comment-${parentIndex}-${dataIndex}`}\n                            name=\"comment\"\n                            type=\"textarea\"\n                            className='form-control'\n                            placeholder=\"Comment\"\n                            value={valueObj.comment}\n                            onChange={onChange}\n                            onBlur={onBlur}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <div className=\"row\">\n                    <div className=\"col-md-2\">\n                        <label htmlFor={`id-${parentIndex}-${dataIndex}`} className='mb-0'>ID</label>\n                        <input id={`id-${parentIndex}-${dataIndex}`}\n                            name=\"id\"\n                            type=\"number\"\n                            placeholder=\"ID\"\n                            className={editableID ? 'form-control' : 'form-control-plaintext'}\n                            value={valueObj.id}\n                            onChange={onChange}\n                            onBlur={onBlur}\n                            readOnly={!editableID}\n                            title={`${editableID ? '' : 'If BaseType is Array or Record, FieldID MUST be the ordinal position of the field within the type, numbered consecutively starting at 1.'}`} />\n                    </div>\n                    <div className=\"col-md-4\">\n                        <label htmlFor={`name-${parentIndex}-${dataIndex}`} className='mb-0'>Name</label>\n                        <input id={`name-${parentIndex}-${dataIndex}`}\n                            name=\"name\"\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            className='form-control'\n                            maxLength={64}\n                            value={valueObj.name}\n                            onChange={onChange}\n                            onBlur={onBlur} />\n                    </div>\n                    <div className=\"col-md-4\">\n                        <label htmlFor={`type-${parentIndex}-${dataIndex}`} className='mb-0'>Type</label>\n                        <SBSelect id={`type-${parentIndex}-${dataIndex}`}\n                            name=\"type\"\n                            value={valType}\n                            onChange={onSelectChange}\n                            data={types}\n                            isGrouped\n                            isCreatable\n                            isClearable />\n                    </div>\n                    <div className=\"col-md-2 d-flex\">\n                        <button type='button' className='btn btn-primary btn-sm p-2 mt-auto' data-bs-toggle=\"modal\" data-bs-target=\"#optionsModal\" onClick={toggleModal}>Field Options</button>\n                        <OptionsModal\n                            id={`${parentIndex}-${dataIndex}`}\n                            optionValues={valueObj.options || []}\n                            isOpen={modal}\n                            saveModal={saveModal}\n                            toggleModal={toggleModal}\n                            optionType={valueObj.type}\n                            modalSize={ModalSize.lg}\n                            fieldOptions={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className='col-md-12'>\n                        <label htmlFor={`comment-${parentIndex}-${dataIndex}`} className='mb-0'>Comment</label>\n                        <input\n                            id={`comment-${parentIndex}-${dataIndex}`}\n                            name=\"comment\"\n                            type=\"textarea\"\n                            placeholder=\"Comment\"\n                            className='form-control'\n                            value={valueObj.comment}\n                            onChange={onChange}\n                            onBlur={onBlur}\n                        />\n                    </div>\n                </div>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <div className=\"card mb-2\">\n                <div className=\"card-body px-2 py-2\">\n                    <div className=\"btn-group float-end\" role=\"group\" aria-label=\"first button group\">\n                        {!isFirst &&\n                            <button type='button' className='btn btn-sm btn-primary' onClick={() => changeIndex(value, dataIndex, dataIndex - 1)}\n                                title={`Move Field Up`}>\n                                <FontAwesomeIcon icon={faSquareCaretUp} />\n                            </button>}\n                        {!isLast && <button type='button' className='btn btn-sm btn-primary' onClick={() => changeIndex(value, dataIndex, dataIndex + 1)}\n                            title={`Move Field Down`} >\n                            <FontAwesomeIcon icon={faSquareCaretDown} />\n                        </button>}\n                    </div>\n                    <button type='button' className='btn btn-danger btn-sm float-end'\n                        onClick={onRemoveItemClick}\n                        title={`Delete Field`}>\n                        <FontAwesomeIcon icon={faMinusCircle} />\n                    </button>\n\n                    {makeOptions()}\n                </div>\n            </div>\n        </>\n    );\n});\n\nexport const FieldEditorBtnStyle = withFieldEditor(FieldEditorBtn);\n","import React, { memo } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowDown19, faCircleChevronDown, faCircleChevronUp, faMinusCircle, faPlusSquare } from '@fortawesome/free-solid-svg-icons';\nimport {\n    FieldArray, InfoConfig\n} from '../../../interface';\nimport { StandardTypeObject } from '../consts';\nimport OptionsModal from '../options/OptionsModal';\nimport { sbToastError } from 'components/common/SBToast';\nimport withStructureEditor from '../ParentEditor/withStructureEditor';\nimport { FieldEditorBtnStyle } from './FieldEditorBtn';\n\ninterface StructureEditorProps {\n    dataIndex: number; //index changes based on obj in arr (tracks the parent index)\n    customStyle: any;\n    change: (v: StandardTypeObject, i: number) => void;\n    config: InfoConfig;\n    isEditableID: boolean;\n    rowRef: any;\n    inViewRef: any;\n    valueObj: StandardTypeObject;\n    setValueObj: (value: StandardTypeObject) => void;\n    onRemoveItemClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\n    modal: boolean;\n    toggleModal: () => void;\n    saveModal: (modalData: Array<string>) => void;\n    fieldCollapse: boolean;\n    setFieldCollapse: (fieldCollapse: boolean, idx: number) => void;\n    sortFields: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n    fieldChange: (val: FieldArray, idx: number) => void;\n    onAddField: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    onFieldRemoval: (idx: number) => void;\n}\n\nconst StructureEditorBtn = memo(function StructureEditorBtn(props: StructureEditorProps) {\n    const { dataIndex, config, customStyle, change, valueObj, setValueObj, isEditableID, fieldChange, onFieldRemoval, onAddField,\n        rowRef, inViewRef, saveModal, toggleModal, modal, onRemoveItemClick, onChange, onBlur, fieldCollapse, setFieldCollapse, sortFields } = props;\n    const moveField = (val: FieldArray, oldIndex: number, newIndex: number) => {\n        let tmpFieldValues = [...valueObj.fields];\n\n        if (newIndex < 0) {\n            sbToastError('Error: Cannot move Type up anymore')\n            return;\n        } else if (newIndex >= tmpFieldValues.length) {\n            sbToastError('Error: Cannot move Type down anymore')\n            return;\n        }\n        //get other field to be moved\n        const prevField = tmpFieldValues[newIndex];\n\n        //If BaseType is Array or Record, FieldID MUST be the ordinal position of the field within the type, numbered consecutively starting at 1.\n        if (!isEditableID) {\n            //switch IDs\n            const valID = val[0];\n            const prevID = prevField[0];\n            prevField[0] = valID;\n            val[0] = prevID;\n        }\n\n        //switch fields\n        tmpFieldValues[oldIndex] = prevField;\n        tmpFieldValues[newIndex] = val;\n\n        const updatevalue = { ...valueObj, fields: tmpFieldValues };\n        setValueObj(updatevalue);\n        change(updatevalue, dataIndex);\n    }\n\n    const fields: any[] = [];\n    if (valueObj.fields) {\n        for (let i = 0; i < valueObj.fields.length; ++i) {\n            fields.push(<FieldEditorBtnStyle\n                key={valueObj.fields[i][0]}\n                enumerated={valueObj.type.toLowerCase() === 'enumerated'}\n                parentIndex={dataIndex}\n                dataIndex={i}\n                value={valueObj.fields[i]}\n                change={fieldChange}\n                remove={onFieldRemoval}\n                config={config}\n                editableID={isEditableID}\n\n                changeIndex={moveField}\n                isFirst={i == 0}\n                isLast={i == valueObj.fields.length - 1}\n            />);\n        }\n    }\n\n    return (\n        <div className=\"card mb-3\" id={`${dataIndex}`} ref={rowRef} style={customStyle}>\n            <div className=\"card-header px-2 py-2\" ref={inViewRef} >\n                <div className='row'>\n                    <div className='col'>\n                        <span className=\"badge rounded-pill text-bg-secondary me-2\" title='index'>\n                            {dataIndex}\n                        </span>\n                        <span id={valueObj.name} className=\"card-title pt-1\">{`${valueObj.name} (${valueObj.type})`}</span>\n                    </div>\n                    <div className='col'>\n                        <button type='button' className=\"btn btn-danger btn-sm float-end\" onClick={onRemoveItemClick}\n                            title={`Delete ${valueObj.type}`}>\n                            <FontAwesomeIcon icon={faMinusCircle} />\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-body px-2 py-2\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <label htmlFor={`name-${dataIndex}`} className='mb-0'>Name</label>\n                        <input id={`name-${dataIndex}`} name=\"name\" type=\"text\" placeholder=\"Name\" maxLength={64} className='form-control' value={valueObj.name} onChange={onChange} onBlur={onBlur} />\n                    </div>\n                    <div className=\"col-md-2 mt-4 text-center\">\n                        <button type='button' className='btn btn-primary btn-sm p-2' data-bs-toggle=\"modal\" data-bs-target=\"#optionsModal\" onClick={toggleModal}>Type Options</button>\n                        <OptionsModal\n                            id={`${dataIndex}`}\n                            optionValues={valueObj.options}\n                            isOpen={modal}\n                            optionType={valueObj.type}\n                            toggleModal={toggleModal}\n                            saveModal={saveModal}\n                        />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <label htmlFor={`comment-${dataIndex}`} className='mb-0'>Comment</label>\n                        <input id={`comment-${dataIndex}`} name=\"comment\" type=\"textarea\" placeholder=\"Comment\" className='form-control' value={valueObj.comment} onChange={onChange} onBlur={onBlur} />\n                    </div>\n                </div>\n                <div className=\"row pt-2\">\n                    <div className=\"col-12\">\n                        <span>\n                            {valueObj.type == 'Enumerated' ? 'Items' : 'Fields'} <span className=\"badge rounded-pill text-bg-secondary\">{fields.length}</span>\n\n                            <span\n                                className=\"badge rounded-pill text-bg-primary cursor-pointer\"\n                                title='Add Field'\n                                onClick={onAddField}>\n                                <FontAwesomeIcon icon={faPlusSquare} />\n                            </span>\n\n                            <a href=\"#\" role=\"button\"\n                                onClick={() => setFieldCollapse(!fieldCollapse, dataIndex)}>\n                                <FontAwesomeIcon icon={fieldCollapse ? faCircleChevronDown : faCircleChevronUp}\n                                    className='float-end btn btn-sm'\n                                    title={fieldCollapse ? ' Show Fields' : ' Hide Fields'} />\n                            </a>\n\n                            {isEditableID ? <a href=\"#\" role=\"button\" onClick={sortFields}>\n                                <FontAwesomeIcon icon={faArrowDown19}\n                                    className='float-end btn btn-sm'\n                                    title={'Sort Fields by ID'} />\n                            </a> : ''}\n\n                        </span>\n\n                        <div>\n                            {!fieldCollapse && fields}\n                        </div>\n\n                        {!fieldCollapse && fields.length == 0 ? <p className='mb-2'> No fields to show</p> : ''}\n\n                        {!fieldCollapse &&\n                            <button type='button' onClick={onAddField} className='btn btn-sm btn-primary btn-block rounded-pill'\n                                title='Add Field'>\n                                <FontAwesomeIcon icon={faPlusSquare} />\n                            </button>}\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n});\n\nexport const StructureEditorBtnStyle = withStructureEditor(StructureEditorBtn);","import React, { memo, useMemo, useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport type { XYCoord } from 'dnd-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGrip, faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { EnumeratedFieldArray, InfoConfig, StandardFieldArray } from '../../../interface';\nimport { DragItem } from './SBOutlineFields';\nimport SBSelect, { Option } from 'components/common/SBSelect';\nimport { EnumeratedFieldObject, StandardFieldObject } from '../consts';\nimport { ModalSize } from '../options/ModalSize';\nimport OptionsModal from '../options/OptionsModal';\nimport withFieldEditor from '../ParentEditor/withFieldEditor';\n\ninterface FieldEditorProps {\n  id: any;\n  enumerated?: boolean;\n  parentIndex: number;\n  dataIndex: number;\n  value: EnumeratedFieldArray | StandardFieldArray;\n  change: (_v: EnumeratedFieldArray | StandardFieldArray, _i: number) => void;\n  remove: (_i: number) => void;\n  config: InfoConfig;\n  editableID: boolean;\n  isDragging: boolean;\n  moveCard: (dragCardValue: EnumeratedFieldArray | StandardFieldArray, newIndex: number) => void;\n  dropCard: (arg: DragItem) => void;\n  acceptableType: string;\n  valueObj: EnumeratedFieldObject | StandardFieldObject;\n  valType: Option;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onSelectChange: (e: Option) => void;\n  modal: boolean;\n  saveModal: (modalData: Array<string>) => void;\n  toggleModal: () => void;\n  onRemoveItemClick: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n  types: { base: string[]; schema: string[]; };\n}\n\n\nconst FieldEditorDnd = memo(function FieldEditorDnd(props: FieldEditorProps) {\n  const { editableID, enumerated, value, parentIndex, dataIndex, acceptableType, moveCard, id, dropCard, isDragging,\n    valueObj, valType, onChange, onBlur, onSelectChange,\n    modal, saveModal, toggleModal, onRemoveItemClick, types } = props;\n\n  const dragRef = useRef<HTMLDivElement>(null)\n  const previewRef = useRef<HTMLDivElement>(null)\n  const originalIndex = dataIndex;\n\n  const [{ handlerId }, drag, preview] = useDrag(\n    () => ({\n      type: acceptableType,\n      item: () => { return { id, originalIndex, dataIndex, value } },\n      collect: (monitor) => ({\n        item: monitor.getItem(),\n        handlerId: monitor.getHandlerId(),\n      }),\n      end: (item, monitor) => {\n        const didDrop = monitor.didDrop()\n        if (!didDrop) {\n          moveCard(item.value, item.originalIndex)\n        } else {\n          dropCard(item);\n        }\n      },\n    }), [acceptableType, id, originalIndex, dataIndex, value]\n  )\n\n  const [, drop] = useDrop<\n    DragItem,\n    void>({\n      accept: acceptableType,\n      collect(monitor) {\n        return {\n          handlerId: monitor.getHandlerId(),\n        }\n      },\n      hover(draggedItem: DragItem, monitor) {\n        if (!previewRef.current) {\n          return\n        }\n        const dragIndex = draggedItem.dataIndex\n        const hoverIndex = dataIndex\n\n        // Don't replace items with themselves\n        if (dragIndex === hoverIndex) {\n          return\n        }\n\n        // Determine rectangle on screen\n        const hoverBoundingRect = previewRef.current?.getBoundingClientRect()\n\n        // Get vertical middle\n        const hoverMiddleY =\n          (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n\n        // Determine mouse position\n        const clientOffset = monitor.getClientOffset()\n\n        // Get pixels to the top\n        const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top\n\n        // Only perform the move when the mouse has crossed half of the items height\n        // When dragging downwards, only move when the cursor is below 50%\n        // When dragging upwards, only move when the cursor is above 50%\n\n        // Dragging downwards\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n          return\n        }\n\n        // Dragging upwards\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n          return\n        }\n\n        // Time to actually perform the action\n        moveCard(draggedItem.value, hoverIndex)\n\n        // Note: we're mutating the monitor item here!\n        // Generally it's better to avoid mutations,\n        // but it's good here for the sake of performance\n        // to avoid expensive index searches.\n        draggedItem.dataIndex = hoverIndex\n      },\n    })\n\n  drag(dragRef)\n  drop(preview(previewRef))\n\n  const containerStyle = useMemo(\n    () => ({\n      opacity: isDragging ? 0.4 : 1,\n    }),\n    [isDragging],\n  )\n\n  const makeOptions = () => {\n    if (enumerated) {\n      return (\n        <div className=\"row m-0\">\n          <div className='col-md-2'>\n            <label htmlFor={`id-${parentIndex}-${dataIndex}`}>ID</label>\n            <input id={`id-${parentIndex}-${dataIndex}`} name=\"id\" type=\"number\" placeholder=\"ID\" className='form-control' value={valueObj.id}\n              onChange={onChange} onBlur={onBlur} />\n          </div>\n          <div className=\"col-md-4\">\n            <label htmlFor={`value-${parentIndex}-${dataIndex}`} >Value</label>\n            <input id={`value-${parentIndex}-${dataIndex}`} name=\"value\" type=\"text\" placeholder=\"Value\" className='form-control' value={valueObj.value}\n              onChange={onChange} onBlur={onBlur} />\n          </div>\n          <div className='col-md-6'>\n            <label htmlFor={`comment-${parentIndex}-${dataIndex}`}>Comment</label>\n            <input\n              id={`comment-${parentIndex}-${dataIndex}`}\n              name=\"comment\"\n              type=\"textarea\"\n              className='form-control'\n              placeholder=\"Comment\"\n              value={valueObj.comment}\n              onChange={onChange}\n              onBlur={onBlur}\n            />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <div className=\"row\">\n          <div className=\"col-md-2\">\n            <label htmlFor={`id-${parentIndex}-${dataIndex}`} className='mb-0'>ID</label>\n            <input id={`id-${parentIndex}-${dataIndex}`}\n              name=\"id\"\n              type=\"number\"\n              placeholder=\"ID\"\n              className={editableID ? 'form-control' : 'form-control-plaintext'}\n              value={valueObj.id}\n              onChange={onChange}\n              onBlur={onBlur}\n              readOnly={!editableID}\n              title={`${editableID ? '' : 'If BaseType is Array or Record, FieldID MUST be the ordinal position of the field within the type, numbered consecutively starting at 1.'}`} />\n          </div>\n          <div className=\"col-md-4\">\n            <label htmlFor={`name-${parentIndex}-${dataIndex}`} className='mb-0'>Name</label>\n            <input id={`name-${parentIndex}-${dataIndex}`}\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"Name\"\n              className='form-control'\n              maxLength={64}\n              value={valueObj.name}\n              onChange={onChange}\n              onBlur={onBlur} />\n          </div>\n          <div className=\"col-md-4\">\n            <label htmlFor={`type-${parentIndex}-${dataIndex}`} className='mb-0'>Type</label>\n            <SBSelect id={`type-${parentIndex}-${dataIndex}`}\n              name=\"type\"\n              value={valType}\n              onChange={onSelectChange}\n              data={types}\n              isGrouped\n              isCreatable\n              isClearable />\n          </div>\n          <div className=\"col-md-2 d-flex\">\n            <button type='button' className='btn btn-primary btn-sm p-2 mt-auto' data-bs-toggle=\"modal\" data-bs-target=\"#optionsModal\" onClick={toggleModal}>Field Options</button>\n            <OptionsModal\n              id={`${parentIndex}-${dataIndex}`}\n              optionValues={valueObj.options || []}\n              isOpen={modal}\n              saveModal={saveModal}\n              toggleModal={toggleModal}\n              optionType={valueObj.type}\n              modalSize={ModalSize.lg}\n              fieldOptions={true}\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className='col-md-12'>\n            <label htmlFor={`comment-${parentIndex}-${dataIndex}`} className='mb-0'>Comment</label>\n            <input\n              id={`comment-${parentIndex}-${dataIndex}`}\n              name=\"comment\"\n              type=\"textarea\"\n              placeholder=\"Comment\"\n              className='form-control'\n              value={valueObj.comment}\n              onChange={onChange}\n              onBlur={onBlur}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className={`card mb-2`} ref={previewRef} data-handler-id={handlerId} style={containerStyle}>\n        <div className=\"card-body px-2 py-2\">\n          <div ref={dragRef} style={{ cursor: 'move' }}>\n            <FontAwesomeIcon className='float-end pt-1 pl-2 m-1' title={'Drag and drop to reorder'} icon={faGrip}></FontAwesomeIcon>\n            <a href=\"#\" role=\"button\" onClick={onRemoveItemClick}>\n              <FontAwesomeIcon className='float-end pt-1 m-1' color='red' title={`Delete Field`} icon={faMinusCircle}></FontAwesomeIcon>\n            </a>\n          </div>\n          {makeOptions()}\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport const FieldEditorDndStyle = withFieldEditor(FieldEditorDnd);","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Unsubscribe } from 'redux';\nimport { useDragDropManager, useDragLayer, useDrop } from 'react-dnd';\nimport update from 'immutability-helper'\nimport { EnumeratedFieldArray, FieldArray, InfoConfig, StandardFieldArray } from 'components/create/schema/interface';\nimport { FieldEditorDndStyle } from \"./FieldEditorDnd\";\n\nexport interface CardStateItem {\n    id: any;\n    value: EnumeratedFieldArray | StandardFieldArray;\n}\nexport interface DragItem {\n    id: any;\n    originalIndex: number;\n    dataIndex: number;\n    value: FieldArray;\n}\nexport interface OutlineContainerState {\n    cards: DragItem[]\n}\n\nexport interface SBOutlineProps {\n    id: string;\n    items: any[];\n    onDrop: (arg: DragItem) => void;\n    onClick?: (e: React.MouseEvent<HTMLElement>, text: string) => void;\n    isEnumerated: boolean;\n    fieldChange: any;\n    fieldRemove: any;\n    config: InfoConfig;\n    editableID: boolean;\n    acceptableType: string;\n    parentIndex: number;\n}\n\nconst SBOutlineFields = (props: SBOutlineProps) => {\n    const { id, items = [], fieldChange, fieldRemove, onDrop, acceptableType, isEnumerated } = props;\n    const [cardsState, setCardsState] = useState<CardStateItem[]>(items.map((item) => ({ id: self.crypto.randomUUID(), value: item })));\n\n    const [dragValue, setDragValue] = useState<boolean>(false);\n    const dragDropManager = useDragDropManager();\n    const monitor = dragDropManager.getMonitor();\n    const timerRef = useRef<NodeJS.Timer>();\n    const unsubscribeRef = useRef<Unsubscribe>();\n\n    const setScrollIntervall = (speed: number, container: HTMLElement) => {\n        timerRef.current = setInterval(() => {\n            container.scrollBy(0, speed);\n        }, 1);\n    };\n\n    useEffect(() => {\n        if (dragValue) {\n            unsubscribeRef.current = monitor.subscribeToOffsetChange(() => {\n                const offset = monitor.getClientOffset();\n                // it can be html, body, div, any container that have scroll\n                const container = document.getElementById(id);\n\n                if (!offset || !container) return;\n\n                if (offset.y < container.clientHeight / 2 - 200) {\n                    if (timerRef.current) clearInterval(timerRef.current);\n                    setScrollIntervall(-5, container);\n                } else if (offset.y > container.clientHeight / 2 + 200) {\n                    if (timerRef.current) clearInterval(timerRef.current);\n                    setScrollIntervall(5, container);\n                } else if (\n                    offset.y > container.clientHeight / 2 - 200 &&\n                    offset.y < container.clientHeight / 2 + 200\n                ) {\n                    if (timerRef.current) clearInterval(timerRef.current);\n                }\n            });\n        } else if (unsubscribeRef.current) {\n            if (timerRef.current) clearInterval(timerRef.current);\n            unsubscribeRef.current();\n        }\n    }, [dragValue, monitor]);\n\n    useEffect(() => {\n        const unsubscribe = monitor.subscribeToStateChange(() => {\n            if (monitor.isDragging()) setDragValue(() => true);\n            else if (!monitor.isDragging()) setDragValue(() => false);\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, [monitor]);\n\n    const dropCard = useCallback((item: DragItem) => {\n        onDrop(item)\n    }, [cardsState]);\n\n    const moveCard = useCallback((card: EnumeratedFieldArray | StandardFieldArray, hoverIndex: number,) => {\n        const drag = cardsState.findIndex((item) => item.value == card)\n        setCardsState((prevCards: CardStateItem[]) =>\n            update(prevCards, {\n                $splice: [\n                    [drag, 1],\n                    [hoverIndex, 0, prevCards[drag] as DragItem],\n                ],\n            }),\n        )\n\n    }, [cardsState, setCardsState]);\n\n    const { isDragging, item } = useDragLayer((monitor) => ({\n        isDragging: monitor.isDragging(),\n        item: monitor.getItem()\n    }));\n\n    const [{ canDrop, isOver }, drop] = useDrop(\n        () => ({\n            accept: acceptableType,\n            collect: (monitor) => ({\n                canDrop: monitor.canDrop(),\n                isOver: monitor.isOver()\n            }),\n        }), [])\n\n    const renderCard = useCallback(\n        (card: any, index: number) => {\n            return (\n                <FieldEditorDndStyle\n                    key={card.id}\n                    dataIndex={index}\n                    value={card.value}\n                    change={fieldChange}\n                    remove={fieldRemove}\n                    isDragging={item && item.dataIndex == index}\n                    moveCard={moveCard}\n                    dropCard={dropCard}\n                    enumerated={isEnumerated}\n                    {...props}\n                />\n            )\n        },\n        [isDragging, item, cardsState]\n    );\n\n    return (\n        <div id={id} className=\"sb-outline mt-2\" ref={drop}\n            style={{\n                backgroundColor: canDrop ? (isOver ? 'lightgreen' : 'rgba(0,0,0,.5)') : 'inherit',\n                padding: '5px',\n            }}>\n            {cardsState.map((card, i) => renderCard(card, i))}\n        </div>\n    );\n}\nexport default SBOutlineFields;","import React, { memo } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowDown19, faCircleChevronDown, faCircleChevronUp, faMinusCircle, faPlusSquare } from '@fortawesome/free-solid-svg-icons';\nimport {\n    FieldArray,\n    InfoConfig\n} from '../../../interface';\nimport { StandardTypeObject } from '../consts';\nimport OptionsModal from '../options/OptionsModal';\nimport { ModalSize } from '../options/ModalSize';\nimport withStructureEditor from '../ParentEditor/withStructureEditor';\nimport SBOutlineFields, { DragItem } from './SBOutlineFields';\n\ninterface StructureEditorProps {\n    dataIndex: number; //index changes based on obj in arr (tracks the parent index)\n    customStyle: any;\n    change: (v: StandardTypeObject, i: number) => void;\n    config: InfoConfig;\n    isEditableID: boolean;\n    rowRef: any;\n    inViewRef: any;\n    valueObj: StandardTypeObject;\n    setValueObj: (value: StandardTypeObject) => void;\n    onRemoveItemClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\n    modal: boolean;\n    toggleModal: () => void;\n    saveModal: (modalData: Array<string>) => void;\n    fieldCollapse: boolean;\n    setFieldCollapse: (fieldCollapse: boolean, idx: number) => void;\n    sortFields: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n    fieldChange: (val: FieldArray, idx: number) => void;\n    onAddField: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    onFieldRemoval: (idx: number) => void;\n}\n\nconst StructureEditorDnd = memo(function StructureEditorDnd(props: StructureEditorProps) {\n    const { dataIndex, config, customStyle, change, valueObj, setValueObj, isEditableID,\n        fieldChange, onFieldRemoval, onAddField, rowRef, inViewRef,\n        saveModal, toggleModal, modal, onRemoveItemClick, onChange, onBlur,\n        fieldCollapse, setFieldCollapse, sortFields } = props;\n\n    const onOutlineDrop = (item: DragItem) => {\n        let reordered_types: any[] = [...valueObj.fields];\n        reordered_types.splice(item.originalIndex, 1);\n        reordered_types.splice(item.dataIndex, 0, item.value);\n\n        //If BaseType is Array or Record, FieldID MUST be the ordinal position of the field within the type, numbered consecutively starting at 1.\n        if (!isEditableID) {\n            reordered_types = reordered_types.map((item, index) => {\n                item[0] = index + 1;\n                return item;\n            });\n        }\n\n        let updatedData = {\n            ...valueObj,\n            fields: reordered_types\n        };\n        setValueObj(updatedData);\n        change(updatedData, dataIndex);\n    };\n\n    return (\n        <div className={`card mb-2`} id={`${dataIndex}`} ref={rowRef} style={customStyle} >\n            <div className=\"card-header px-2 py-2\" ref={inViewRef} >\n                <div className='row' >\n                    <div className='col' >\n                        <span id={valueObj.name} className=\"card-title\" > {`${valueObj.name} (${valueObj.type})`}</span>\n                    </div>\n                    < div className='col' >\n                        <button type='button' className=\"float-end btn btn-danger btn-sm\" onClick={onRemoveItemClick} title={`Delete ${valueObj.type}`}>\n                            <FontAwesomeIcon icon={faMinusCircle} />\n                        </button>\n                    </div>\n                </div>\n            </div>\n            < div className=\"card-body px-2 pt-2 pb-3\" >\n                <div className=\"row\" >\n                    <div className=\"col-md-12\" >\n                        <div className='row' >\n                            <div className='col-md-4' >\n                                <label htmlFor={`name-${dataIndex}`} className='mb-0' > Name </label>\n                            </div>\n                            < div className='col-md-6 offset-md-2' >\n                                <label htmlFor={`comment-${dataIndex}`} className='mb-0' > Comment </label>\n                            </div>\n                        </div>\n                        < div className=\"row\" >\n                            <div className=\"col-md-4\" >\n                                <input id={`name-${dataIndex}`} name=\"name\" type=\"text\" className='form-control' placeholder=\"Name\" maxLength={64} value={valueObj.name}\n                                    onChange={onChange} onBlur={onBlur} />\n                            </div>\n                            < div className=\"col-md-2 text-center px-0\" >\n                                <button type='button' className='btn btn-primary btn-sm p-2' data-bs-toggle=\"modal\" data-bs-target=\"#optionsModal\" onClick={toggleModal} > Type Options </button>\n                                < OptionsModal\n                                    id={`${dataIndex}`}\n                                    optionValues={valueObj.options}\n                                    isOpen={modal}\n                                    optionType={valueObj.type}\n                                    toggleModal={toggleModal}\n                                    saveModal={saveModal}\n                                    modalSize={ModalSize.lg}\n                                />\n                            </div>\n                            < div className=\"col-md-6\" >\n                                <input id={`comment-${dataIndex}`} name=\"comment\" type=\"textarea\" placeholder=\"Comment\" className='form-control' value={valueObj.comment}\n                                    onChange={onChange} onBlur={onBlur} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                < div className=\"row pt-2\" >\n                    <div className=\"col-12\" >\n                        <span>\n                            {valueObj.type == 'Enumerated' ? 'Items' : 'Fields'} < span className=\"badge rounded-pill text-bg-secondary\" > {valueObj.fields?.length} </span>\n\n                            < span\n                                className=\"badge rounded-pill text-bg-primary ms-1 cursor-pointer\"\n                                title='Add Field'\n                                onClick={onAddField} >\n                                <FontAwesomeIcon icon={faPlusSquare} />\n                            </span>\n\n                            < a href=\"#\" role=\"button\"\n                                onClick={() => setFieldCollapse(!fieldCollapse, dataIndex)}>\n                                <FontAwesomeIcon icon={fieldCollapse ? faCircleChevronDown : faCircleChevronUp}\n                                    className='float-end btn btn-sm'\n                                    title={fieldCollapse ? ' Show Fields' : ' Hide Fields'} />\n                            </a>\n\n                            {\n                                isEditableID ? <a href=\"#\" role=\"button\" onClick={sortFields} >\n                                    <FontAwesomeIcon icon={faArrowDown19}\n                                        className='float-end btn btn-sm'\n                                        title={'Sort Fields by ID'} />\n                                </a> : <></>}\n\n                        </span>\n\n                        {\n                            !fieldCollapse ? valueObj.fields?.length == 0 ? <p>No fields to show </p> :\n                                <div>\n                                    <SBOutlineFields\n                                        id={'fields-outline'}\n                                        items={valueObj.fields}\n                                        onDrop={onOutlineDrop}\n                                        isEnumerated={valueObj.type.toLowerCase() === 'enumerated'}\n                                        fieldChange={fieldChange}\n                                        fieldRemove={onFieldRemoval}\n                                        editableID={isEditableID}\n                                        config={config}\n                                        acceptableType={`${dataIndex}`}\n                                        parentIndex={dataIndex}\n                                    />\n                                </div>\n                                : <></>\n                        }\n\n                        {\n                            !fieldCollapse ?\n                                <button type='button' onClick={onAddField} className='btn btn-sm btn-primary btn-block rounded-pill'\n                                    title='Add Field' >\n                                    <FontAwesomeIcon icon={faPlusSquare} />\n                                </button>\n                                : <></>\n                        }\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n});\n\nexport const StructureEditorDndStyle = withStructureEditor(StructureEditorDnd);","import React, { useEffect, useRef, useState } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport { zip } from '../../../../../utils';\nimport { InfoConfig } from '../../../interface';\nimport { StandardFieldKeys, StandardFieldObject, PrimitiveTypeObject, TypeKeys } from '../consts';\nimport { dismissAllToast, sbToastError } from 'components/common/SBToast';\nimport { SBConfirmModal } from 'components/common/SBConfirmModal';\n\ninterface PrimitiveEditorProps {\n    dataIndex: number;\n    value: Array<any>;\n    customStyle: any;\n    setRowHeight: (i: number, height: number) => void;\n    change: (v: PrimitiveTypeObject, i: number) => void;\n    remove: (i: number) => void;\n    setIsVisible: (i: number) => void;\n    config: InfoConfig;\n}\n\nexport default function withPrimitiveEditor(PrimitiveWrapper: React.ComponentType<any>) {\n    function WithPrimitiveEditor(props: PrimitiveEditorProps) {\n\n        const { value, dataIndex, config, setRowHeight, change, setIsVisible } = props;\n\n        //TODO: may need to add polyfill -- support for Safari\n        const { ref: inViewRef, inView, entry } = useInView({\n            fallbackInView: true,\n            threshold: 1\n        });\n\n        const [modal, setModal] = useState(false);\n        const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n\n        let valueObjInit: StandardFieldObject | PrimitiveTypeObject;\n        if (Number.isInteger(value[0])) {\n            valueObjInit = zip(StandardFieldKeys, value) as StandardFieldObject;\n        } else {\n            valueObjInit = zip(TypeKeys, value) as PrimitiveTypeObject;\n        }\n        const [valueObj, setValueObj] = useState(valueObjInit);\n        let SBConfirmModalValName = valueObjInit.name;\n\n        const rowRef = useRef<any>();\n\n        useEffect(() => {\n            if (rowRef.current && rowRef.current.getBoundingClientRect().height != 0) {\n                setRowHeight(dataIndex, rowRef.current.getBoundingClientRect().height + 5)\n            }\n        }, []);\n\n        useEffect(() => {\n            if (inView) {\n                setIsVisible(dataIndex);\n            }\n        }, [entry])\n\n        const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            const { placeholder, value } = e.target;\n            const key = placeholder.toLowerCase();\n            setValueObj({ ...valueObj, [key]: value });\n        }\n\n        const onBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n            const { placeholder, value } = e.target;\n\n            if (placeholder == \"Name\") {\n                if (value.length >= 64) {\n                    sbToastError('Error: Max length reached');\n                    return;\n                }\n                if (value.includes(config.$Sys)) {\n                    sbToastError('Error: TypeNames SHOULD NOT contain the System character');\n                }\n                const regex = new RegExp(config.$TypeName, \"g\");\n                if (!regex.test(value)) {\n                    sbToastError('Error: TypeName format is not permitted');\n                }\n            }\n\n            const key = placeholder.toLowerCase();\n            const updatevalue = { ...valueObj, [key]: value };\n            if (JSON.stringify(valueObjInit) == JSON.stringify(updatevalue)) {\n                return;\n            }\n            setValueObj(updatevalue);\n            change(updatevalue, dataIndex);\n        }\n\n        const onRemoveItemClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n            e.preventDefault();\n            setIsConfirmModalOpen(true);\n        };\n\n        const removeAll = (response: boolean) => {\n            setIsConfirmModalOpen(false);\n            if (response == true) {\n                const { dataIndex, remove } = props;\n                remove(dataIndex);\n            }\n        }\n\n        const saveModal = (modalData: Array<string>) => {\n            toggleModal();\n            dismissAllToast();\n            const prevState = [...valueObj.options];\n            if (JSON.stringify(prevState) === JSON.stringify(modalData)) {\n                return;\n            }\n            const updatevalue = { ...valueObj, options: modalData }\n            setValueObj(updatevalue);\n            change(updatevalue, dataIndex);\n        }\n\n        const toggleModal = () => {\n            setModal(modal => !modal);\n        }\n\n        return (\n            <>\n                <PrimitiveWrapper\n                    valueObj={valueObj}\n                    rowRef={rowRef}\n                    inViewRef={inViewRef}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    modal={modal}\n                    saveModal={saveModal}\n                    toggleModal={toggleModal}\n                    onRemoveItemClick={onRemoveItemClick}\n                    {...props}\n                    primitiveEditor\n                />\n                <SBConfirmModal\n                    isOpen={isConfirmModalOpen}\n                    title={`Remove ${SBConfirmModalValName}`}\n                    message={`Are you sure you want to remove ${SBConfirmModalValName}?`}\n                    confirm_value={dataIndex}\n                    onResponse={removeAll}>\n                </SBConfirmModal>\n            </>\n        );\n    };\n    const wrappedComponentName = PrimitiveWrapper.displayName\n        || PrimitiveWrapper.name\n        || 'Component';\n\n    WithPrimitiveEditor.displayName = `withPrimitiveEditor(${wrappedComponentName})`;\n    return WithPrimitiveEditor;\n};\n","import React, { memo } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport OptionsModal from '../options/OptionsModal';\nimport { PrimitiveTypeObject, StandardTypeObject } from '../consts';\nimport withPrimitiveEditor from '../ParentEditor/withPrimitiveEditor';\n\ninterface PrimitiveEditorProps {\n    dataIndex: number;\n    valueObj: PrimitiveTypeObject | StandardTypeObject;\n    customStyle: any;\n    rowRef: any;\n    inViewRef: any;\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\n    modal: boolean;\n    saveModal: (modalData: Array<string>) => void;\n    toggleModal: () => void;\n    onRemoveItemClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst PrimitiveEditorBtn = memo(function PrimitiveEditorBtn(props: PrimitiveEditorProps) {\n    const { valueObj, dataIndex, customStyle, rowRef, inViewRef, onChange, onBlur, modal, toggleModal, saveModal, onRemoveItemClick } = props;\n\n    return (\n        <div className=\"card mb-3\" id={`${dataIndex}`} ref={rowRef} style={customStyle}>\n            <div className=\"card-header px-2 py-2\" ref={inViewRef} >\n                <div className='row'>\n                    <div className='col'>\n                        <span className=\"badge rounded-pill text-bg-secondary me-2\" title='index'>\n                            {dataIndex}\n                        </span>\n                        <span id={valueObj.name} className=\"card-title pt-1\">{`${valueObj.name} (${valueObj.type})`}</span>\n                    </div>\n                    <div className='col'>\n                        <button type='button' className='btn btn-sm btn-danger float-end' onClick={onRemoveItemClick} title={`Delete ${valueObj.type}`}>\n                            <FontAwesomeIcon icon={faMinusCircle} />\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-body px-2 py-2\">\n                <div className=\"row m-0\">\n                    <div className=\"col-md-4\">\n                        <label htmlFor={`name-${dataIndex}`} className='mb-0'>Name</label>\n                        <input\n                            id={`name-${dataIndex}`}\n                            name=\"name\"\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            maxLength={64}\n                            className='form-control'\n                            value={valueObj.name}\n                            onChange={onChange}\n                            onBlur={onBlur}\n                        />\n                    </div>\n                    <div className=\"col-md-2 mt-4 text-center\">\n                        <button type='button' className='btn btn-primary btn-sm p-2' data-bs-toggle=\"modal\" data-bs-target=\"#optionsModal\" onClick={toggleModal}>Type Options</button>\n                        <OptionsModal\n                            id={`${dataIndex}`}\n                            optionValues={valueObj.options}\n                            isOpen={modal}\n                            optionType={valueObj.type}\n                            toggleModal={toggleModal}\n                            saveModal={saveModal}\n                        />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <label htmlFor={`comment-${dataIndex}`} className='mb-0'>Comment</label>\n                        <input\n                            id={`comment-${dataIndex}`}\n                            name=\"comment\"\n                            type=\"textarea\"\n                            placeholder=\"Comment\"\n                            className='form-control'\n                            value={valueObj.comment}\n                            onChange={onChange}\n                            onBlur={onBlur}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n});\n\nexport const PrimitiveEditorBtnStyle = withPrimitiveEditor(PrimitiveEditorBtn);\n","import React, { memo } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport OptionsModal from '../options/OptionsModal';\nimport { PrimitiveTypeObject, StandardTypeObject } from '../consts';\nimport withPrimitiveEditor from '../ParentEditor/withPrimitiveEditor';\n\ninterface PrimitiveEditorProps {\n  dataIndex: number;\n  valueObj: PrimitiveTypeObject | StandardTypeObject;\n  customStyle: any;\n  rowRef: any;\n  inViewRef: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\n  modal: boolean;\n  saveModal: (modalData: Array<string>) => void;\n  toggleModal: () => void;\n  onRemoveItemClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst PrimitiveEditorDnd = memo(function PrimitiveEditorDnd(props: PrimitiveEditorProps) {\n  const { valueObj, dataIndex, customStyle, rowRef, inViewRef, onChange, onBlur, modal, toggleModal, saveModal, onRemoveItemClick } = props;\n\n  return (\n    <>\n      <div className={`card mb-3`} id={`${dataIndex}`} ref={rowRef} style={customStyle}>\n        <div className=\"card-header px-2 py-2\" ref={inViewRef}>\n          <div className='row'>\n            <div className='col'>\n              <span id={valueObj.name} className=\"card-title\">{`${valueObj.name} (${valueObj.type})`}</span>\n            </div>\n            <div className='col'>\n              <button type='button' className=\"float-end btn btn-danger btn-sm\" onClick={onRemoveItemClick} title={`Delete ${valueObj.type}`}>\n                <FontAwesomeIcon icon={faMinusCircle} />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"card-body px-2 pt-2 pb-3\">\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <div className='row'>\n                <div className='col-md-4'>\n                  <label htmlFor={`name-${dataIndex}`} className='mb-0'>Name</label>\n                </div>\n                <div className='col-md-6 offset-md-2'>\n                  <label htmlFor={`comment-${dataIndex}`} className='mb-0'>Comment</label>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-md-4\">\n                  <input id={`name-${dataIndex}`} name=\"name\" type=\"text\" className='form-control' placeholder=\"Name\" maxLength={64} value={valueObj.name}\n                    onChange={onChange} onBlur={onBlur} />\n                </div>\n                <div className=\"col-md-2 text-center px-0\">\n                  <button type='button' className='btn btn-primary btn-sm p-2' data-bs-toggle=\"modal\" data-bs-target=\"#optionsModal\" onClick={toggleModal}>Type Options</button>\n                  <OptionsModal\n                    id={`${dataIndex}`}\n                    optionValues={valueObj.options}\n                    isOpen={modal}\n                    optionType={valueObj.type}\n                    toggleModal={toggleModal}\n                    saveModal={saveModal}\n                  />\n                </div>\n                <div className=\"col-md-6\">\n                  <input id={`comment-${dataIndex}`} name=\"comment\" type=\"textarea\" placeholder=\"Comment\" className='form-control'\n                    value={valueObj.comment} onChange={onChange} onBlur={onBlur} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport const PrimitiveEditorDndStyle = withPrimitiveEditor(PrimitiveEditorDnd);\n","import React from 'react';\nimport {\n  ConfigObjectEditor, KeyArrayEditor, KeyObjectEditor, KeyValueEditor\n} from './editors/editors';\nimport { InfoDef } from './interfaces';\nimport { InfoConfig } from '../interface';\n\ninterface EditorProps {\n  key?: number | string | undefined;  // eslint-disable-line react/require-default-props\n  value: any;\n  name?: string;\n  dataIndex: number;\n  description?: string;  // eslint-disable-line react/require-default-props\n  placeholder: string;\n  change: (val: any) => void;  // eslint-disable-line react/require-default-props\n  remove: (idx: string) => void;  // eslint-disable-line react/require-default-props\n  addTypeChange: (val: any) => void;\n  config: InfoConfig; //defaults for Config Object Editor\n}\n\nconst metaDef = ({ k = 'key', v = '' }: InfoDef) => ({ [k]: v } as Record<string, any>);\n\n// JADN Info Structure\nexport default {\n  package: {\n    key: 'Package*',\n    edit: (val: string) => metaDef({ k: 'package', v: val }),\n    editor: (props: EditorProps) => (\n      <KeyValueEditor\n        {...props}\n        id=\"Package\"\n        name=\"Package\"\n        description=\"Unique name/version\"\n        fieldColumns={10}\n        required={true}\n        removable={true}\n      />\n    )\n  },\n  version: {\n    key: 'Version',\n    edit: (val: string) => metaDef({ k: 'version', v: val }),\n    editor: (props: EditorProps) =>\n      <KeyValueEditor\n        {...props}\n        id=\"Version\"\n        name=\"Version\"\n        fieldColumns={10}\n        required={false}\n        removable={true}\n      />\n  },\n  title: {\n    key: 'Title',\n    edit: (val: string) => metaDef({ k: 'title', v: val }),\n    editor: (props: EditorProps) =>\n      <KeyValueEditor\n        {...props}\n        id=\"Title\"\n        name=\"Title\"\n        fieldColumns={10}\n        required={false}\n        removable={true}\n      />\n  },\n  description: {\n    key: 'Description',\n    edit: (val: string) => metaDef({ k: 'description', v: val }),\n    editor: (props: EditorProps) =>\n      <KeyValueEditor\n        {...props}\n        id=\"Description\"\n        name=\"Description\"\n        fieldColumns={10}\n        required={false}\n        removable={true}\n      />\n  },\n  comment: {\n    key: 'Comment',\n    edit: (val: string) => metaDef({ k: 'comment', v: val }),\n    editor: (props: EditorProps) =>\n      <KeyValueEditor\n        {...props}\n        id=\"Comment\"\n        name=\"Comment\"\n        fieldColumns={10}\n        required={false}\n        removable={true}\n      />\n  },\n  copyright: {\n    key: 'Copyright',\n    edit: (val: string) => metaDef({ k: 'copyright', v: val }),\n    editor: (props: EditorProps) =>\n      <KeyValueEditor {...props}\n        id=\"Copyright\"\n        name=\"Copyright\"\n        fieldColumns={10}\n        required={false}\n        removable={true}\n      />\n  },\n  license: {\n    key: 'License',\n    edit: (val: string) => metaDef({ k: 'license', v: val }),\n    editor: (props: EditorProps) =>\n      <KeyValueEditor {...props}\n        id=\"License\"\n        name=\"License\"\n        fieldColumns={10}\n        required={false}\n        removable={true}\n      />\n  },\n  namespaces: {\n    key: 'Namespaces',\n    edit: (val: Record<string, string> = {}) => metaDef({ k: 'namespaces', v: val }),\n    editor: (props: EditorProps) => (\n      <KeyObjectEditor\n        {...props}\n        id=\"Namespaces\"\n        name=\"Namespaces\"\n        description=\"Referenced packages\"\n      />\n    )\n  },\n  exports: {\n    key: 'Exports',\n    edit: (val: Array<string> = []) => metaDef({ k: 'exports', v: val }),\n    editor: (props: EditorProps) => (\n      <KeyArrayEditor\n        {...props}\n        id=\"Exports\"\n        name=\"Exports\"\n        description=\"Type definitions exported by this module\"\n      />\n    )\n  },\n  config: {\n    key: 'Config',\n    edit: (val: Record<string, string> = {}) => metaDef({ k: 'config', v: val }),\n    editor: (props: EditorProps) => (\n      <ConfigObjectEditor\n        {...props}\n        id=\"Config\"\n        name=\"Config\"\n        description=\"Configuration values for this module\"\n      />\n    )\n  }\n};\n","import React, { useEffect, useRef, useState, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { flushSync } from 'react-dom';\nimport { setSchema } from 'actions/util';\nimport { validateSchema } from 'actions/validate';\nimport { getAllSchemas } from 'reducers/util';\nimport { getFilenameExt, getFilenameOnly } from 'components/utils/general';\nimport { LANG_JADN } from 'components/utils/constants';\nimport { $MAX_BINARY, $MAX_STRING, $MAX_ELEMENTS, $SYS, $TYPENAME, $FIELDNAME, $NSID } from '../../../../consts';\nimport { Types } from '../../structure';\nimport { dismissAllToast, sbToastError, sbToastSuccess } from 'components/common/SBToast';\nimport SBCopyToClipboard from 'components/common/SBCopyToClipboard';\nimport SBSpinner from 'components/common/SBSpinner';\nimport SBValidateSchemaBtn from 'components/common/SBValidateSchemaBtn';\nimport SBDownloadBtn from 'components/common/SBDownloadBtn';\nimport SBFileLoader from 'components/common/SBFileLoader';\nimport { Option } from 'components/common/SBSelect';\n\n\nexport const configInitialState = {\n    $MaxBinary: $MAX_BINARY,\n    $MaxString: $MAX_STRING,\n    $MaxElements: $MAX_ELEMENTS,\n    $Sys: $SYS,\n    $TypeName: $TYPENAME,\n    $FieldName: $FIELDNAME,\n    $NSID: $NSID\n}\n\nexport default function withSchemaCreator(SchemaWrapper: React.ComponentType<any>) {\n    function WithSchemaCreator(props: any) {\n        const dispatch = useDispatch();\n        const { selectedFile, setSelectedFile, generatedSchema, setGeneratedSchema, setCardsState,\n            fieldCollapseState, setFieldCollapseState,\n            allFieldsCollapse, setAllFieldsCollapse, fieldCollapseStateRef } = props;\n\n        useEffect(() => {\n            if (!generatedSchema) {\n                setIsValidJADN(false);\n                setFieldCollapseState([]);\n            }\n            dispatch(setSchema(generatedSchema));\n            listRef.current?.resetAfterIndex(0, true);\n        }, [generatedSchema])\n\n        const [configOpt, setConfigOpt] = useState(configInitialState);\n        const [fileName, setFileName] = useState({\n            name: '',\n            ext: LANG_JADN\n        });\n        const schemaOpts = useSelector(getAllSchemas);\n        const ref = useRef<HTMLInputElement | null>(null);\n\n        const [isValidJADN, setIsValidJADN] = useState(false);\n        const [isValidating, setIsValidating] = useState(false);\n        const [isLoading, setIsLoading] = useState(false);\n\n        const [activeView, setActiveView] = useState('creator');\n        const [activeOpt, setActiveOpt] = useState('info');\n\n        const listRef = useRef<any>(null);\n        const rowHeight = useRef({});\n        const setRowHeight = useCallback((index: number, size: number) => {\n            rowHeight.current = { ...rowHeight.current, [index]: size };\n            listRef.current?.resetAfterIndex(0, false);\n        }, []);\n\n        const getItemSize = (index: number) => {\n            return rowHeight.current[index] || 0\n        };\n\n        useEffect(() => {\n            fieldCollapseStateRef.current = fieldCollapseState;\n        }, [fieldCollapseState]);\n\n        useEffect(() => {\n            //if all Fields Collapsed, set collapseAllFields = true\n            fieldCollapseStateRef.current = fieldCollapseState;\n            listRef.current?.resetAfterIndex(0, true);\n\n            if (fieldCollapseState.length > 0) {\n                let count = 0;\n                let tracker = 0;\n                for (let i in fieldCollapseState) {\n                    if (fieldCollapseState[i] == true || fieldCollapseState[i] == false) {\n                        count++;\n                        if (fieldCollapseState[i] == true) {\n                            tracker++;\n                        }\n                    }\n                }\n\n                if (tracker == 0 && allFieldsCollapse != false) {\n                    setAllFieldsCollapse(false)\n                } else if (tracker != 0 && tracker == count && allFieldsCollapse != true) {\n                    setAllFieldsCollapse(true);\n                }\n            }\n        }, [fieldCollapseState])\n\n        const onCollapseAllFields = (e: React.MouseEvent<HTMLElement>) => {\n            e.preventDefault();\n            if (!allFieldsCollapse == true && fieldCollapseState.length > 0) {\n                const updatedFieldCollapseState = fieldCollapseState.map((bool) => {\n                    if (bool === false) {\n                        return true;\n                    } else {\n                        return bool;\n                    }\n                });\n                setFieldCollapseState(updatedFieldCollapseState);\n\n            } else if (!allFieldsCollapse == false && fieldCollapseState.length > 0) {\n                const updatedFieldCollapseState = fieldCollapseState.map((bool) => {\n                    if (bool === true) {\n                        return false;\n                    } else {\n                        return bool;\n                    }\n                });\n                setFieldCollapseState(updatedFieldCollapseState);\n            }\n            setAllFieldsCollapse(!allFieldsCollapse)\n        }\n\n        const onFileLoad = async (schemaObj?: any, fileStr?: Option) => {\n            if (schemaObj && fileStr) {\n                if (typeof schemaObj == \"string\") {\n                    try {\n                        schemaObj = JSON.parse(schemaObj);\n                    } catch (err) {\n                        sbToastError(`Schema cannot be loaded: Invalid JSON`);\n                        return;\n                    }\n                }\n                const validJADNSyntax = await validateJADNSyntax(schemaObj);\n                if (validJADNSyntax == true) {\n                    setIsLoading(true);\n                    setSelectedFile(fileStr);\n                    const fileName = {\n                        name: getFilenameOnly(fileStr.label),\n                        ext: getFilenameExt(fileStr.label)\n                    }\n                    setFileName(fileName);\n\n                    flushSync(() => {\n                        setGeneratedSchema(schemaObj);\n                        if (schemaObj.types) {\n                            setCardsState(schemaObj.types.map((item: any[], i: number) => ({\n                                id: self.crypto.randomUUID(),\n                                index: i,\n                                text: item[0],\n                                value: item,\n                                isStarred: false,\n                                isVisibleInOutline: true\n                            })));\n                            setFieldCollapseState(schemaObj.types.map((def: any[]) => {\n                                let type = def[1].toLowerCase() as keyof typeof Types;\n                                if (Types[type].type == 'structure') {\n                                    return false;\n                                } else {\n                                    return undefined;\n                                }\n                            }))\n                        } else {\n                            setCardsState([]);\n                            setFieldCollapseState([]);\n                        }\n                    });\n                } else {\n                    sbToastError(`Schema cannot be loaded: Invalid JADN`);\n                }\n            } else {\n                sbToastError(`Schema cannot be loaded: Empty File`);\n            }\n            setIsLoading(false);\n        }\n\n        const onCancelFileUpload = (e: React.MouseEvent<HTMLButtonElement> | React.ChangeEvent<HTMLInputElement> | null) => {\n            if (e) {\n                e.preventDefault();\n            }\n            dismissAllToast();\n            setIsValidJADN(false);\n            setIsValidating(false);\n            setIsLoading(false);\n            setFileName({\n                name: '',\n                ext: LANG_JADN\n            });\n            setSelectedFile(null);\n            setGeneratedSchema('');\n            setCardsState([]);\n            setFieldCollapseState([]);\n            if (ref.current) {\n                ref.current.value = '';\n            }\n        }\n\n        const validateJADNSyntax = (jsonObj: any) => {\n            dismissAllToast();\n            setIsValidJADN(false);\n            if (!jsonObj) {\n                sbToastError('Validation Error: No Schema to validate');\n                return false;\n            }\n\n            setIsValidating(true);\n\n            return dispatch(validateSchema(jsonObj, LANG_JADN))\n                .then((validateSchemaVal: any) => {\n                    setIsValidating(false);\n                    if (validateSchemaVal.payload.valid_bool == true) {\n                        dispatch(setSchema(jsonObj));\n                        setIsValidJADN(true);\n                        sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                        return true;\n                    } else {\n                        sbToastError(validateSchemaVal.payload.valid_msg);\n                        return validateSchemaVal.payload.valid_syntax;\n                    }\n                })\n                .catch((validateSchemaErr) => {\n                    setIsValidating(false);\n                    sbToastError(validateSchemaErr.payload.valid_msg);\n                    return validateSchemaErr.payload.valid_syntax;\n                })\n        }\n\n\n        return (\n            <div className='card'>\n                <div className='card-header p-2'>\n                    <div className='row no-gutters'>\n                        <div className='col-sm-3 align-self-center'>\n                            <SBFileLoader\n                                opts={schemaOpts}\n                                selectedOpt={selectedFile}\n                                loadedFileData={generatedSchema}\n                                fileName={fileName}\n                                setSelectedFile={setSelectedFile}\n                                onCancelFileUpload={onCancelFileUpload}\n                                onFileChange={onFileLoad}\n                                ref={ref}\n                                placeholder={'Select a schema...'}\n                                loc={'schemas'}\n                                isSaveable\n                            />\n                        </div>\n                        <div className='col-sm-9 align-self-center'>\n                            <SBCopyToClipboard buttonId='copyMessage' data={generatedSchema} customClass={'float-end'} />\n                            <SBDownloadBtn buttonId='schemaDownload' filename={fileName.name} data={generatedSchema} customClass={'float-end me-1'} />\n                            <button type='button' onClick={() => setActiveView('schema')} className={`float-end btn btn-primary btn-sm me-1 ${activeView == 'schema' ? ' d-none' : ''}`} title=\"View in JSON\">View JSON</button>\n                            <button type='button' onClick={() => setActiveView('creator')} className={`float-end btn btn-primary btn-sm me-1 ${activeView == 'creator' ? ' d-none' : ''}`} title=\"View via Input Form\">View Form</button>\n                            {isValidating ? <SBSpinner action={\"Validating\"} color={\"primary\"} /> :\n                                <SBValidateSchemaBtn\n                                    isValid={isValidJADN}\n                                    setIsValid={setIsValidJADN}\n                                    setIsValidating={setIsValidating}\n                                    schemaData={generatedSchema}\n                                    schemaFormat={LANG_JADN}\n                                    customClass={'float-end'}\n                                />\n                            }\n                        </div>\n                    </div>\n                </div>\n                <div className='card-body p-2'>\n                    <SchemaWrapper\n                        {...props}\n                        schemaCreator\n                        setIsValidating={setIsValidating}\n                        setIsValidJADN={setIsValidJADN}\n                        isLoading={isLoading}\n                        setIsLoading={setIsLoading}\n                        activeView={activeView}\n                        activeOpt={activeOpt}\n                        setActiveOpt={setActiveOpt}\n                        getItemSize={getItemSize}\n                        setRowHeight={setRowHeight}\n                        listRef={listRef}\n                        configOpt={configOpt}\n                        setConfigOpt={setConfigOpt}\n                        collapseAllFields={onCollapseAllFields}\n                    />\n                </div>\n            </div>\n        );\n    };\n    const wrappedComponentName = SchemaWrapper.displayName\n        || SchemaWrapper.name\n        || 'Component';\n\n    WithSchemaCreator.displayName = `withSchemaCreator(${wrappedComponentName})`;\n    return WithSchemaCreator;\n};","import React, { useEffect, useState } from \"react\";\nimport { faSquareCaretDown, faSquareCaretUp, faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport { faStar as farStar } from '@fortawesome/free-regular-svg-icons'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { TypeArray } from \"components/create/schema/interface\";\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons'\n\nexport interface SBOutlineBtnProps {\n    id: string;\n    title: string;\n    cards: any[];\n    visibleCard: number | null;\n    changeIndex: (v: TypeArray, dataIndex: number, i: number) => void;\n    onStarClick: (index: number) => void;\n    onScrollToCard: (idx: number) => void;\n}\n\nconst SBOutlineBtn = (props: SBOutlineBtnProps) => {\n\n    const { id = 'sb-outline', title, visibleCard, cards = [],\n        onStarClick, onScrollToCard, changeIndex } = props;\n\n    const [query, setQuery] = useState(\"\");\n    const [items, setItems] = useState(cards);\n\n    useEffect(() => {\n        setItems(setIsVisibleInOutline(cards));\n      }, [cards, visibleCard, query])\n\n    const setIsVisibleInOutline = (itemsToFilter: any[]) => {\n        const updatedItems = itemsToFilter.map(card =>\n            card.text.toLowerCase().includes(query.toLowerCase()) ? { ...card, isVisibleInOutline: true } : { ...card, isVisibleInOutline: false }\n        )\n        return (updatedItems)\n    }\n\n    const isMoveable = () => {\n        return query == \"\" ? true : false\n    }\n\n    const renderCards = items.map((card, i) => {\n        if (card.isVisibleInOutline) {\n            const backgroundColor_class = i == visibleCard ? 'highlight-color' : ''\n            const onCardClick = (e: React.MouseEvent<HTMLElement>) => {\n                e.preventDefault();\n                onScrollToCard(i);\n            }\n            if (isMoveable()) {\n                return (\n                    <div className={`card ${backgroundColor_class}`} key={i}>\n                        <div className='card-body list-group-item d-flex justify-content-between align-items-center'>\n                            <div>\n                                <span onClick={() => onStarClick(i)}>\n                                    <FontAwesomeIcon className='me-1' icon={card.isStarred == true ? faStar : farStar} />\n                                </span>\n                                <a title={'Click to view'} href={`#${i}`} onClick={onCardClick}>{card.text}</a>\n                            </div>\n\n                            <div className=\"btn-group\" role=\"group\" aria-label=\"button group\">\n                                {i == 0 ? '' :\n                                    <button type='button' className='btn btn-sm btn-primary' onClick={() => changeIndex(card.value, i, i - 1)}\n                                        title={`Move ${card.text} Up`}>\n                                        <FontAwesomeIcon icon={faSquareCaretUp} />\n                                    </button>}\n                                {i == items.length - 1 ? '' :\n                                    <button type='button' className='btn btn-sm btn-primary' onClick={() => changeIndex(card.value, i, i + 1)}\n                                        title={`Move ${card.text} Down`}>\n                                        <FontAwesomeIcon icon={faSquareCaretDown} />\n                                    </button>}\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n            return (\n                <div className={`card ${backgroundColor_class}`} key={i}>\n                    <div className='card-body list-group-item d-flex justify-content-between align-items-center'>\n                        <div>\n                            <span onClick={() => onStarClick(i)}>\n                                <FontAwesomeIcon className='me-1' icon={card.isStarred == true ? faStar : farStar} />\n                            </span>\n                            <a title={'Click to view'} href={`#${i}`} onClick={onCardClick}>{card.text}</a>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n        return null;\n    })\n\n\n    return (\n        <div id='outlineScrollContainer'>\n            {items && items.length > 0 ? (\n                <div id={id}>\n                    <ul className=\"nav nav-pills\">\n                        <li className=\"nav-item pb-0\"><a title=\"An outline view of all the schema types\" className=\"active nav-link bg-primary\">{title}</a></li>\n                    </ul>\n                    <div className=\"input-group search\" style={{ paddingTop: '5px' }}>\n                        <span className=\"input-group-text icon\" id=\"basic-addon1\"><FontAwesomeIcon icon={faMagnifyingGlass} /></span>\n                        <input type=\"search\" id=\"typesSearchBar\" className=\"form-control\" placeholder=\"Search...\" aria-label=\"Search\" onChange={(e) => setQuery(e.target.value.trim())} />\n                    </div>\n                    <div className=\"sb-outline mt-2\">\n                        <div>\n                            {renderCards}\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <></>\n            )\n            }\n        </div>\n    );\n}\n\nexport default SBOutlineBtn;\n","import React, { memo } from 'react';\nimport SBSelect, { Option } from 'components/common/SBSelect';\n\ninterface AddToIndexDropDownProps {\n    indexOpts: Option[];\n    onSelectChange: (e: Option) => void;\n    insertAt: Option;\n}\n\nexport const AddToIndexDropDown = memo(function AddToIndexDropDown(props: AddToIndexDropDownProps) {\n\n    const { indexOpts, onSelectChange, insertAt } = props;\n\n    return (\n        <div className='col'>\n            <ul className=\"nav nav-pills\">\n                <li className=\"nav-item pb-0 mb-2\">\n                    <a className=\"active nav-link bg-primary\" title='Enter numeric index to specify where to insert Type'>\n                        Insert Type at Index\n                    </a>\n                </li>\n            </ul>\n            <SBSelect id=\"addAtIndex\" name=\"addAtIndex\" value={insertAt}\n                placeholder=\"Select index to insert Types\"\n                onChange={onSelectChange} data={indexOpts}\n            />\n            <small className='text-muted'>\n                (Default: end)\n            </small>\n        </div>\n\n\n    );\n});","import React, { useEffect, memo, useState } from 'react'\nimport { flushSync } from 'react-dom';\nimport { faCircleChevronDown, faCircleChevronUp, faPlusSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { VariableSizeList as List } from \"react-window\";\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Info, Types } from '../../structure';\nimport { StandardTypeObject, TypeKeys } from '../consts';\nimport { TypeArray, StandardTypeArray } from 'components/create/schema/interface';\nimport withSchemaCreator, { configInitialState } from '../ParentEditor/withSchemaCreator';\nimport { getTypeName, zip } from 'components/utils/general';\nimport { sbToastError, sbToastSuccess } from 'components/common/SBToast';\nimport { Option } from 'components/common/SBSelect';\nimport SBEditor from 'components/common/SBEditor';\nimport SBSpinner from 'components/common/SBSpinner';\nimport SBScrollToTop from 'components/common/SBScrollToTop';\nimport { DragItem } from '../DragStyle/SBOutline';\nimport SBOutlineBtnStyle from './SBOutlineBtn';\nimport { AddToIndexDropDown } from './AddToIndexDropDown';\n\nconst defaultInsertIdx = { label: \"end\", value: \"end\" };\n\nconst SchemaCreatorBtn = memo(function SchemaCreatorBtn(props: any) {\n    const { selectedFile, generatedSchema, setGeneratedSchema, cardsState, setCardsState,\n        getItemSize, listRef, setRowHeight,\n        setIsValidJADN, setIsValidating, isLoading,\n        activeOpt, setActiveOpt, activeView, configOpt, setConfigOpt,\n        fieldCollapseState, setFieldCollapseState, infoCollapse, setInfoCollapse,\n        typesCollapse, setTypesCollapse,\n        allFieldsCollapse, collapseAllFields, fieldCollapseStateRef } = props;\n\n    const [visibleType, setVisibleType] = useState<number | null>(null);\n\n    const [insertAt, setInsertAt] = useState(defaultInsertIdx);\n    let indexOpts = generatedSchema.types ?\n        (generatedSchema.types.length == 1) ?\n            [{ value: \"0\", label: `${generatedSchema.types[0][0]} (beginning)` }, { value: \"end\", label: \"end\" }] :\n            generatedSchema.types.map((item: any, i: number) => {\n                if (i == 0) {\n                    return { value: \"0\", label: `${item[0]} (beginning)` };\n                } else if (i == (generatedSchema.types.length - 1)) {\n                    return { value: \"end\", label: `${item[0]} (end)` }\n                } else {\n                    return { value: `${i}`, label: `${item[0]} (index: ${i})` };\n                }\n            }) :\n        [defaultInsertIdx];\n\n    useEffect(() => {\n        indexOpts = generatedSchema.types ?\n            (generatedSchema.types.length == 1) ?\n                [{ value: \"0\", label: `${generatedSchema.types[0][0]} (beginning)` }, { value: \"end\", label: \"end\" }] :\n                generatedSchema.types.map((item: any, i: number) => {\n                    if (i == 0) {\n                        return { value: \"0\", label: `${item[0]} (beginning)` };\n                    } else if (i == (generatedSchema.types.length - 1)) {\n                        return { value: \"end\", label: `${item[0]} (end)` }\n                    } else {\n                        return { value: `${i}`, label: `${item[0]} (index: ${i})` };\n                    }\n                }) :\n            [defaultInsertIdx];\n        const optionValue = generatedSchema.types && insertAt ? insertAt.value : defaultInsertIdx.value;\n        const selectedOption = indexOpts.filter((option: Option) => option.value == optionValue);\n        setInsertAt(selectedOption ? selectedOption[0] : defaultInsertIdx);\n    }, [generatedSchema])\n\n    let infoKeys;\n    if (generatedSchema.info) {\n        const unusedInfoKeys = Object.keys(Info).filter(k =>\n            !(Object.keys(generatedSchema.info).includes(k)));\n\n        const unusedInfo = Object.fromEntries(Object.entries(Info).filter(([key]) => unusedInfoKeys.includes(key)));\n\n        infoKeys = Object.keys(unusedInfo).map(k => (\n            <div className='list-group-item  d-flex justify-content-between align-items-center p-2' key={k}>\n                {Info[k].key}\n\n                <button type='button' onClick={() => onDrop(k)} className='btn btn-sm btn-outline-primary'\n                    disabled={selectedFile?.value == 'file' ? true : false}\n                    title='Add to Schema'>\n                    <FontAwesomeIcon icon={faPlusSquare} />\n                </button>\n            </div>\n        ));\n    } else {\n        infoKeys = Object.keys(Info).map(k => (\n            <div className='list-group-item d-flex justify-content-between align-items-center p-2' key={k}>\n                {Info[k].key}\n\n                <button type='button' onClick={() => onDrop(k)} className='btn btn-sm btn-outline-primary'\n                    disabled={selectedFile?.value == 'file' ? true : false}\n                    title='Add to Schema'>\n                    <FontAwesomeIcon icon={faPlusSquare} />\n                </button>\n            </div>\n        ));\n    }\n\n    const typesKeys = Object.keys(Types).map(k => (\n        <div className='list-group-item d-flex justify-content-between align-items-center p-2' key={k}>\n            {Types[k].key}\n\n            <button type='button' onClick={() => onDrop(k)} className='btn btn-sm btn-outline-primary'\n                disabled={selectedFile?.value == 'file' ? true : false}\n                title='Add to Schema'>\n                <FontAwesomeIcon icon={faPlusSquare} />\n            </button>\n        </div>\n    ));\n\n    const onSelectChange = (e: Option) => {\n        if (e == null || parseInt(e.value) < 0 || parseInt(e.value) > generatedSchema.types.length) {\n            sbToastError(\"Invalid Index. Setting index to default: end.\")\n            e = defaultInsertIdx;\n        }\n        setInsertAt(e);\n    }\n\n    const onDrop = (key: string) => {\n        if (Object.keys(Info).includes(key)) {\n            const edit = key == 'config' ? Info[key].edit(configInitialState) : Info[key].edit();\n            const updatedSchema = generatedSchema.types ? {\n                info: {\n                    ...generatedSchema.info || {},\n                    ...edit\n                },\n                types: [...generatedSchema.types]\n            } :\n                {\n                    info: {\n                        ...generatedSchema.info || {},\n                        ...edit\n                    },\n                }\n\n            flushSync(() => {\n                setGeneratedSchema(updatedSchema);\n            });\n            setIsValidJADN(false);\n            setIsValidating(false);\n\n            var scrollSpyContentEl = document.getElementById(`${key}`)\n            scrollSpyContentEl?.scrollIntoView();\n\n        } else if (Object.keys(Types).includes(key)) {\n            let tmpTypes = generatedSchema.types ? [...generatedSchema.types] : [];\n            let tmpCards = [...cardsState];\n            let updatedFieldCollapseState = [...fieldCollapseState]\n            const type_name = getTypeName(tmpTypes, `${Types[key].key}-Name`);\n            const tmpDef = Types[key].edit({ name: type_name });\n            const dataIndex = generatedSchema.types?.length || 0;\n            const new_card = {\n                id: self.crypto.randomUUID(),\n                index: dataIndex,\n                text: type_name,\n                value: tmpDef,\n                isStarred: false\n            }\n            if (!insertAt || (insertAt && insertAt.value == \"end\")) {\n                tmpTypes.push(tmpDef);\n                tmpCards.push(new_card);\n                if (Types[key].type == 'structure') {\n                    updatedFieldCollapseState = [...fieldCollapseState, false]\n                } else {\n                    updatedFieldCollapseState = [...fieldCollapseState, undefined]\n                }\n            } else {\n                if (insertAt.value == \"0\") {\n                    new_card.index = 0;\n                    tmpTypes.unshift(tmpDef);\n                    tmpCards.unshift(new_card);\n\n                    if (Types[key].type == 'structure') {\n                        updatedFieldCollapseState = [false, ...fieldCollapseState]\n                    } else {\n                        updatedFieldCollapseState = [undefined, ...fieldCollapseState]\n                    }\n\n                } else {\n                    const idx = parseInt(insertAt.value);\n                    new_card.index = idx;\n\n                    tmpTypes = [\n                        ...tmpTypes.slice(0, idx),\n                        tmpDef,\n                        ...tmpTypes.slice(idx)\n                    ];\n                    tmpCards = [\n                        ...tmpCards.slice(0, idx),\n                        new_card,\n                        ...tmpCards.slice(idx)\n                    ];\n                    if (Types[key].type == 'structure') {\n                        updatedFieldCollapseState = [\n                            ...fieldCollapseState.slice(0, idx),\n                            false,\n                            ...fieldCollapseState.slice(idx)\n                        ];\n                    } else {\n                        updatedFieldCollapseState = [\n                            ...fieldCollapseState.slice(0, idx),\n                            undefined,\n                            ...fieldCollapseState.slice(idx)\n                        ];\n                    }\n                }\n            }\n\n            let updatedSchema = {\n                ...generatedSchema,\n                types: tmpTypes\n            };\n\n            flushSync(() => {\n                setGeneratedSchema(updatedSchema);\n                setCardsState(tmpCards);\n                setFieldCollapseState(updatedFieldCollapseState);\n            });\n            setIsValidJADN(false);\n            setIsValidating(false);\n\n            onScrollToCard(new_card.index);\n\n        } else {\n            console.log('Error: OnDrop() in client/src/components/generate/schema/SchemaCreator.tsx');\n        }\n    }\n\n    const onStarClick = (idx: number) => {\n        const updatedCards = cardsState.map((item: DragItem, i: number) => {\n            if (i === idx) {\n                return ({ ...item, isStarred: !item.isStarred });\n            } else {\n                return item;\n            }\n        });\n\n        setCardsState(updatedCards);\n    };\n\n    const onScrollToCard = (idx: number) => {\n        listRef.current.scrollToItem(idx);\n    }\n\n    const changeIndex = (arrVal: TypeArray, dataIndex: number, idx: number) => {\n        const val = zip(TypeKeys, arrVal) as StandardTypeObject;\n        const type = val.type.toLowerCase() as keyof typeof Types;\n        if (idx < 0) {\n            sbToastError('Error: Cannot move Type up anymore');\n            return;\n        } else if (idx >= generatedSchema.types.length) {\n            sbToastError('Error: Cannot move Type down anymore');\n            return;\n        }\n\n        let tmpTypes = [...generatedSchema.types];\n        tmpTypes = tmpTypes.filter((_t, i) => i !== dataIndex);\n\n        tmpTypes = [\n            ...tmpTypes.slice(0, idx),\n            Types[type].edit(val),\n            ...tmpTypes.slice(idx)\n        ];\n\n        let updatedSchema = {\n            ...generatedSchema,\n            types: tmpTypes\n        };\n\n        let tmpCards = [...cardsState];\n        const moved_card = tmpCards[dataIndex];\n        tmpCards = tmpCards.filter((_t, i) => i !== dataIndex);\n\n        tmpCards = [\n            ...tmpCards.slice(0, idx),\n            moved_card,\n            ...tmpCards.slice(idx)\n        ];\n\n        let updatedFieldCollapseState: Boolean[] = fieldCollapseStateRef.current;\n        const originalIndexBool = updatedFieldCollapseState[dataIndex];\n        updatedFieldCollapseState = updatedFieldCollapseState.filter((_bool: Boolean, i: number) =>\n            i !== dataIndex\n        );\n        updatedFieldCollapseState = [\n            ...updatedFieldCollapseState.slice(0, idx),\n            originalIndexBool,\n            ...updatedFieldCollapseState.slice(idx)\n        ];\n        setFieldCollapseState(updatedFieldCollapseState)\n\n        setGeneratedSchema(updatedSchema);\n        setCardsState(tmpCards);\n\n        setIsValidJADN(false);\n        setIsValidating(false);\n        onScrollToCard(dataIndex);\n    }\n\n    const infoEditors = Object.keys(Info).map((k, i) => {\n        const key = k as keyof typeof Info;\n        if (generatedSchema.info && k in generatedSchema.info) {\n            return Info[key].editor({\n                key: self.crypto.randomUUID(),\n                value: generatedSchema.info[key],\n                dataIndex: i,\n                placeholder: k,\n                change: (val: any) => {\n                    if (key == 'config') {\n                        setConfigOpt(val);\n                    }\n                    let updatedSchema = {\n                        ...generatedSchema,\n                        info: {\n                            ...generatedSchema.info,\n                            ...Info[key].edit(val)\n                        }\n                    };\n\n                    setGeneratedSchema(updatedSchema);\n                    setIsValidJADN(false);\n                    setIsValidating(false);\n\n                },\n                addTypeChange: (val: any) => {\n                    const idx = generatedSchema.types.length;\n                    const tmpTypes = [...generatedSchema.types];\n                    tmpTypes[idx] = Types[val.type.toLowerCase()].edit(val);\n\n                    const valArray: TypeArray = Object.values(val);\n                    const updatedCards = [...cardsState,\n                    {\n                        id: self.crypto.randomUUID(),\n                        index: idx,\n                        isStarred: false,\n                        text: val.name,\n                        value: valArray\n                    }\n                    ]\n\n                    if (tmpTypes.length != 0) {\n                        setGeneratedSchema((prev: any) => ({ ...prev, types: tmpTypes }));\n                    } else {\n                        if (generatedSchema.info) {\n                            setGeneratedSchema((prev: any) => ({ info: { ...prev.info } }));\n                        } else {\n                            setGeneratedSchema({});\n                        }\n                    }\n\n                    setCardsState(updatedCards);\n                    sbToastSuccess(`Successfully added Export ${val.name} to Types`);\n                    onScrollToCard(idx);\n                },\n                remove: (id: string) => {\n                    if (generatedSchema.info && id in generatedSchema.info) {\n                        if (id == 'config') {\n                            setConfigOpt(configInitialState);\n                        }\n                        const tmpInfo = { ...generatedSchema.info };\n                        delete tmpInfo[id];\n                        let updatedSchema;\n                        //remove info if empty\n                        if (Object.keys(tmpInfo).length == 0) {\n                            const tmpData = { ...generatedSchema };\n                            delete tmpData['info'];\n                            updatedSchema = tmpData;\n                        } else {\n                            updatedSchema = {\n                                ...generatedSchema,\n                                info: tmpInfo\n                            };\n                        }\n                        setGeneratedSchema(updatedSchema);\n                        setIsValidJADN(false);\n                        setIsValidating(false);\n                    }\n                },\n                config: configOpt\n            });\n        }\n        return null;\n    });\n\n    const typesEditors = ({ data, index, style }) => {\n        const def = data[index];\n        let type = def[1].toLowerCase() as keyof typeof Types;\n\n        //CHECK FOR VALID TYPE\n        if (!Object.keys(Types).includes(type)) {\n            sbToastError(`Error: ${type} in Type definition [${def}] is not a valid type. Changing type to String.`)\n            def[1] = \"String\";\n            type = \"string\";\n        }\n\n        return (Types[type].btneditor({\n            key: self.crypto.randomUUID(),\n            value: def,\n            dataIndex: index,\n            customStyle: { ...style, height: 'auto' },\n            setRowHeight: setRowHeight,\n            fieldCollapse: fieldCollapseState[index],\n            setFieldCollapse: (bool: boolean, idx: number) => {\n                const updatedFieldCollapseState = fieldCollapseState.map((fieldBool: boolean, i: number) => {\n                    if (i === idx) {\n                        return bool;\n                    } else {\n                        return fieldBool;\n                    }\n                });\n\n                setFieldCollapseState(updatedFieldCollapseState);\n            },\n            setIsVisible: setVisibleType,\n            change: (val, idx: number) => {\n                const tmpTypes = [...generatedSchema.types];\n                tmpTypes[idx] = Types[val.type.toLowerCase()].edit(val);\n\n                const valArray: TypeArray = Object.values(val);\n                const updatedCards = cardsState.map((card: DragItem, i: number) => {\n                    if (i === idx) {\n                        return ({\n                            ...card,\n                            text: val.name,\n                            value: valArray\n                        });\n                    } else {\n                        return card;\n                    }\n                });\n\n                if (tmpTypes.length != 0) {\n                    setGeneratedSchema((prev: any) => ({ ...prev, types: tmpTypes }));\n                } else {\n                    if (generatedSchema.info) {\n                        setGeneratedSchema((prev: any) => ({ info: { ...prev.info } }));\n                    } else {\n                        setGeneratedSchema({});\n                    }\n                }\n\n                setCardsState(updatedCards);\n                setIsValidJADN(false);\n                setIsValidating(false);\n            }\n            ,\n            remove: (idx: number) => {\n                const removedType = generatedSchema.types[idx];\n                const tmpTypes = generatedSchema.types.filter((_type: StandardTypeArray, i: number) => i != idx);\n                const tmpCards = cardsState.filter((_card: DragItem, index: number) => index != idx);\n                if (tmpTypes.length != 0) {\n                    setGeneratedSchema((prev: any) => ({ ...prev, types: tmpTypes }));\n                } else {\n                    if (generatedSchema.info) {\n                        setGeneratedSchema((prev: any) => ({ info: { ...prev.info } }));\n                    } else {\n                        setGeneratedSchema({});\n                    }\n                }\n\n                if (generatedSchema?.info?.exports?.includes(removedType[0])) {\n                    const tmpInfo = generatedSchema.info.exports.filter((typeName: string) => typeName != removedType[0]);\n                    setGeneratedSchema((prev: any) => ({ ...prev, info: { ...prev.info, exports: tmpInfo } }));\n                }\n\n                setCardsState(tmpCards);\n                setFieldCollapseState(\n                    fieldCollapseState.filter((_bool: Boolean, i: number) =>\n                        i !== idx\n                    ));\n                setIsValidJADN(false);\n                setIsValidating(false);\n            },\n            config: configOpt\n        }))\n    };\n\n    return (\n        <>\n            <div className='tab-content mb-2'>\n                <div className={`tab-pane fade ${activeView == 'creator' ? 'show active' : ''}`} id=\"creator\" role=\"tabpanel\" aria-labelledby=\"creator-tab\" tabIndex={0}>\n                    <div className='row'>\n                        <div id=\"schema-options\" className='col-sm-3 pr-1 card-body-scroller'>\n                            <div className='row'>\n                                <div className='col'>\n                                    <ul className=\"nav nav-pills pb-2\" id=\"editorKeys\" role=\"tablist\">\n                                        <li className='nav-item me-2'>\n                                            <a\n                                                className={`nav-link \n                                                    ${activeOpt == 'info' && (selectedFile?.value == 'file' && !generatedSchema ? false : true) ? ' active bg-primary' : ''}\n                                                    ${selectedFile?.value == 'file' && !generatedSchema ? 'disabled' : ''}`}\n                                                onClick={() => setActiveOpt('info')}\n                                                title=\"meta data (about a schema package)\"\n                                                data-bs-toggle=\"pill\"\n                                            >\n                                                Info\n                                            </a>\n                                        </li>\n                                        <li className='nav-item'>\n                                            <a\n                                                className={`nav-link \n                                                    ${activeOpt == 'types' && (selectedFile?.value == 'file' && !generatedSchema ? false : true) ? ' active bg-primary' : ''}\n                                                    ${selectedFile?.value == 'file' && !generatedSchema ? 'disabled' : ''}`}\n                                                onClick={() => setActiveOpt('types')}\n                                                title=\"schema content (the information model)\"\n                                                data-bs-toggle=\"pill\"\n                                            >\n                                                Types*\n                                            </a>\n                                        </li>\n                                    </ul>\n                                    <div className='tab-content mb-2'>\n                                        <div className={`tab-pane fade ${activeOpt == 'info' ? 'show active' : ''}`} id=\"info\" role=\"tabpanel\" aria-labelledby=\"info-tab\" tabIndex={0}>\n                                            <ul className=\"list-group\">\n                                                {infoKeys.length != 0 ? infoKeys : <div className='col'>No Info to add</div>}\n                                            </ul>\n                                        </div>\n                                        <div className={`tab-pane fade ${activeOpt == 'types' ? 'show active' : ''}`} id=\"types\" role=\"tabpanel\" aria-labelledby=\"types-tab\" tabIndex={0}>\n                                            <ul className=\"list-group\">\n                                                {typesKeys}\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='row mt-2'>\n                                <AddToIndexDropDown insertAt={insertAt} indexOpts={indexOpts} onSelectChange={onSelectChange} />\n                            </div>\n                            <div className='row mt-2'>\n                                <div className='col'>\n                                    <SBOutlineBtnStyle\n                                        id={'schema-outline'}\n                                        cards={cardsState}\n                                        title={'Outline'}\n                                        visibleCard={visibleType}\n                                        changeIndex={changeIndex}\n                                        onStarClick={onStarClick}\n                                        onScrollToCard={onScrollToCard}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n\n                        <div id=\"schema-editor\" className='col-md-9 px-2 card-body-scroller'>\n                            {isLoading ? <SBSpinner action={'Loading'} isDiv /> :\n                                <>\n                                    <div className='row'>\n                                        <div className=\"col pt-2\">\n                                            <div className='card'>\n                                                <div className='card-header bg-primary'>\n                                                    <div className='row'>\n                                                        <div className='col'>\n                                                            <h5 id=\"info\" className=\"card-title text-light\">Info <small style={{ fontSize: '10px' }}> metadata </small></h5>\n                                                        </div>\n                                                        <div className='col'>\n                                                            <span>\n                                                                <FontAwesomeIcon icon={infoCollapse ? faCircleChevronDown : faCircleChevronUp}\n                                                                    className='float-end btn btn-sm text-light'\n                                                                    onClick={() => setInfoCollapse(!infoCollapse)}\n                                                                    title={infoCollapse ? ' Show Info' : ' Hide Info'} />\n                                                            </span>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className='card-body'>\n                                                    {!infoCollapse &&\n                                                        <div>\n                                                            {generatedSchema.info ?\n                                                                <>{infoEditors}</>\n                                                                :\n                                                                <><p>To add metadata info make a selection from Info</p></>\n                                                            }\n                                                        </div>\n                                                    }\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className='row mt-2'>\n                                        <div className=\"col pt-2\">\n                                            <div className='card'>\n                                                <div className='card-header bg-primary'>\n                                                    <div className='row'>\n                                                        <div className='col'>\n                                                            <h6 id=\"types\" className='mb-0 pt-1 text-light'>Types* <small style={{ fontSize: '10px' }}> schema content </small></h6>\n                                                        </div>\n                                                        <div className='col'>\n                                                            {generatedSchema.types &&\n                                                                <>\n                                                                    <div className=\"btn-group btn-group-sm float-end\" role=\"group\" aria-label=\"Basic example\">\n                                                                        <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setTypesCollapse(!typesCollapse)}>\n                                                                            {typesCollapse ? 'Show Types' : ' Hide Types'}\n                                                                            <FontAwesomeIcon icon={typesCollapse ? faCircleChevronDown : faCircleChevronUp}\n                                                                                className='float-end btn btn-sm'\n                                                                                title={typesCollapse ? 'Show Types' : 'Hide Types'} />\n                                                                        </button>\n                                                                        <button type=\"button\" className=\"btn btn-secondary\" onClick={collapseAllFields}>\n                                                                            {allFieldsCollapse ? 'Show Fields' : 'Hide Fields'}\n                                                                            <FontAwesomeIcon icon={allFieldsCollapse ? faCircleChevronDown : faCircleChevronUp}\n                                                                                className='float-end btn btn-sm'\n                                                                                title={allFieldsCollapse ? 'Show Fields' : 'Hide Fields'} />\n                                                                        </button>\n                                                                    </div>\n                                                                </>\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className='card-body'>\n                                                    {!typesCollapse &&\n                                                        <div>\n                                                            {generatedSchema.types ?\n                                                                <div style={{ height: '65vh' }}>\n                                                                    <AutoSizer disableWidth>\n                                                                        {({ height }) => (\n                                                                            <List\n                                                                                className='List'\n                                                                                height={height}\n                                                                                itemCount={generatedSchema.types.length || 0}\n                                                                                itemData={generatedSchema.types}\n                                                                                itemSize={getItemSize}\n                                                                                width={'100%'}\n                                                                                ref={listRef}\n                                                                            >\n                                                                                {typesEditors}\n                                                                            </List>\n                                                                        )}\n                                                                    </AutoSizer>\n                                                                </div>\n                                                                :\n                                                                <><p>To add schema content make a selection from Types</p></>\n                                                            }\n                                                        </div>\n                                                    }\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n\n                <div className={`tab-pane fade ${activeView == 'schema' ? 'show active' : ''}`} id=\"schema\" role=\"tabpanel\" aria-labelledby=\"schema-tab\" tabIndex={0}>\n                    <div className='card'>\n                        <div className='card-body p-0'>\n                            <SBEditor data={generatedSchema} isReadOnly={true}></SBEditor>\n                        </div>\n                    </div>\n                </div>\n                <SBScrollToTop divID='schema-editor' />\n            </div >\n        </>\n    )\n});\nexport const SchemaCreatorBtnStyle = withSchemaCreator(SchemaCreatorBtn); ","import React, { useRef, useState } from 'react'\nimport type { FC } from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\nimport type { Identifier, XYCoord } from 'dnd-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGrip, faStar } from '@fortawesome/free-solid-svg-icons'\nimport { faStar as farStar } from '@fortawesome/free-regular-svg-icons'\nimport { TypeArray } from '../../../interface'\nimport { DragItem } from './SBOutline'\n\nconst style = {\n  cursor: 'move',\n}\n\nexport const ItemTypes = {\n  CARD: 'card',\n}\n\nexport interface SBOutlineCardProps {\n  id: any;\n  text: string;\n  index: number;\n  value: TypeArray;\n  isStarred: boolean;\n  isVisible: boolean;\n  isDraggable: boolean;\n  scrollToCard: (idx: number) => void;\n  moveCard: (item: DragItem, dragIndex: number, hoverIndex: number) => void;\n  addCard: (item: DragItem, hoverIndex: number) => void;\n  dropCard: (item: DragItem, index: number, originalIndex: number) => void;\n  handleStarToggle: (idx: number) => void;\n}\n\nexport const SBOutlineCard: FC<SBOutlineCardProps> = ({ id, text, index, value, isStarred, isVisible, isDraggable, scrollToCard, handleStarToggle, moveCard, addCard, dropCard }) => {\n\n  const originalIndex = index;\n  const [toggleStar, setToggleStar] = useState(isStarred);\n\n  const ref = useRef<HTMLDivElement>(null)\n  const [{ handlerId }, drop] = useDrop<\n    DragItem,\n    void,\n    { handlerId: Identifier | null }\n  >({\n    accept: [ItemTypes.CARD, 'TypesKeys'],\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId(),\n      }\n    },\n    hover(item: DragItem, monitor) {\n      if (!ref.current) {\n        return\n      }\n      const dragIndex = item.index\n      const hoverIndex = index\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect()\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset()\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return\n      }\n\n      // Time to actually perform the action\n      if (item.index == -1) {\n        addCard(item, hoverIndex)\n      } else {\n        moveCard(item, dragIndex, hoverIndex)\n      }\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex\n    },\n  })\n\n  const [{ isDragging }, drag] = useDrag({\n    type: ItemTypes.CARD,\n    item: () => {\n      return { id, originalIndex, index, text, value, isStarred: toggleStar }\n    },\n    end: (item, monitor) => {\n      const didDrop = monitor.didDrop()\n      if (!didDrop) {\n        moveCard(item, item.index, item.originalIndex)\n      } else {\n        dropCard(item, item.index, item.originalIndex);\n        scrollToCard(item.index)\n      }\n    },\n    collect: (monitor: any) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const opacity = isDragging ? 0 : 1\n  const backgroundColor_class = isVisible ? 'highlight-color' : ''\n  drag(drop(ref))\n\n  const onToggleStar = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    setToggleStar(prev => !prev);\n    handleStarToggle(index);\n  };\n\n  const onCardClick = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    scrollToCard(index);\n  }\n  \n  if (isDraggable) {\n    return (\n      <div className='card'>\n        <div className={`card-body list-group-item d-flex justify-content-between align-items-center ${backgroundColor_class}`} ref={ref} style={{ ...style, opacity }} data-handler-id={handlerId}>\n          <div>\n            <span onClick={onToggleStar}>\n              <FontAwesomeIcon className='me-1' icon={toggleStar ? faStar : farStar} />\n            </span>\n            <a title={'Click to view'} href={`#${index}`} onClick={onCardClick}>{text}</a>\n          </div>\n\n          <div>\n            <FontAwesomeIcon className='pt-1' title={'Drag and drop to reorder'} icon={faGrip}></FontAwesomeIcon>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className='card'>\n      <div className={`card-body list-group-item d-flex justify-content-between align-items-center ${backgroundColor_class}`} style={{ ...style, opacity }} data-handler-id={handlerId}>\n        <div>\n          <span onClick={onToggleStar}>\n            <FontAwesomeIcon className='me-1' icon={toggleStar ? faStar : farStar} />\n          </span>\n          <a title={'Click to view'} href={`#${index}`} onClick={onCardClick}>{text}</a>\n        </div>\n      </div>\n    </div>\n  )\n\n}","\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Unsubscribe } from 'redux';\nimport update from 'immutability-helper'\nimport { useDragDropManager, useDrop } from 'react-dnd';\nimport { TypeArray } from '../../../interface';\nimport { ItemTypes, SBOutlineCard } from \"./SBOutlineCard\";\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport interface DragItem {\n  id: any;\n  index: number;\n  text: string;\n  value: TypeArray;\n  isStarred: boolean;\n  isFiltered: boolean;\n}\n\nexport interface OutlineContainerState {\n  cards: DragItem[]\n}\n\nexport interface SBOutlineProps {\n  id: string;\n  title: string;\n  cards: any[];\n  visibleCard: number | null;\n  onScrollToCard: (idx: number) => void;\n  onDrop: (arg: DragItem[], index: number, originalIndex: number) => void;\n  onStarToggle: (updatedCards: DragItem[]) => void;\n}\n\nconst SBOutline = (props: SBOutlineProps) => {\n  const { id = 'sb-outline',\n    title,\n    visibleCard,\n    onDrop,\n    onStarToggle,\n    onScrollToCard,\n    cards = [] } = props;\n\n  const [items, setItems] = useState(cards);\n  const cardsStateRef = useRef(items);\n  const [query, setQuery] = useState(\"\")\n\n  useEffect(() => {\n    setItems(setIsVisibleInOutline(cards));\n  }, [cards, visibleCard, query])\n\n  useEffect(() => {\n    cardsStateRef.current = items;\n  }, [items])\n\n  const [dragValue, setDragValue] = useState<boolean>(false);\n  const dragDropManager = useDragDropManager();\n  const monitor = dragDropManager.getMonitor();\n  const timerRef = useRef<NodeJS.Timer>();\n  const unsubscribeRef = useRef<Unsubscribe>();\n\n  const [{ handlerId, isOver, canDrop }, drop] = useDrop(() => ({\n    accept: [ItemTypes.CARD, 'TypesKeys'],\n    drop: (item: DragItem, _monitor) => {\n      return { item, location: 'outline' };\n    },\n    collect: (monitor) => ({\n      handlerId: monitor.getHandlerId(),\n      canDrop: monitor.canDrop(),\n      isOver: monitor.isOver(),\n    }),\n  }),\n    [],\n  )\n\n  const setScrollIntervall = (speed: number, container: HTMLElement) => {\n    timerRef.current = setInterval(() => {\n      container.scrollBy(0, speed);\n    }, 1);\n  };\n\n  useEffect(() => {\n    if (dragValue) {\n      unsubscribeRef.current = monitor.subscribeToOffsetChange(() => {\n        const offset = monitor.getClientOffset();\n        // it can be html, body, div, any container that have scroll\n        const container = document.getElementById(\"outlineScrollContainer\");\n\n        if (!offset || !container) return;\n\n        if (offset.y < container.clientHeight / 2 - 200) {\n          if (timerRef.current) clearInterval(timerRef.current);\n          setScrollIntervall(-5, container);\n        } else if (offset.y > container.clientHeight / 2 + 200) {\n          if (timerRef.current) clearInterval(timerRef.current);\n          setScrollIntervall(5, container);\n        } else if (\n          offset.y > container.clientHeight / 2 - 200 &&\n          offset.y < container.clientHeight / 2 + 200\n        ) {\n          if (timerRef.current) clearInterval(timerRef.current);\n        }\n      });\n    } else if (unsubscribeRef.current) {\n      if (timerRef.current) clearInterval(timerRef.current);\n      unsubscribeRef.current();\n    }\n  }, [dragValue, monitor]);\n\n  useEffect(() => {\n    const unsubscribe = monitor.subscribeToStateChange(() => {\n      if (monitor.isDragging()) setDragValue(() => true);\n      else if (!monitor.isDragging()) setDragValue(() => false);\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [monitor]);\n\n  const onCardClick = (idx: number) => {\n    onScrollToCard(idx);\n  }\n\n  const onStarClick = useCallback((idx: number) => {\n    const updatedItems = cardsStateRef.current.map((item, i) => {\n      if (i === idx) {\n        return ({ ...item, isStarred: !item.isStarred });\n      } else {\n        return item;\n      }\n    });\n\n    setItems(updatedItems);\n    onStarToggle(updatedItems);\n  }, []);\n\n  const dropCard = (_item: DragItem, index: number, originalIndex: number) => {\n    onDrop(cardsStateRef.current, index, originalIndex);\n  };\n\n  const moveCard = useCallback((_newItem: DragItem, dragIndex: number, hoverIndex: number) => {\n    setItems((prevCards: DragItem[]) =>\n      update(prevCards, {\n        $splice: [\n          [dragIndex, 1],\n          [hoverIndex, 0, prevCards[dragIndex] as DragItem],\n        ],\n      }),\n    )\n  }, []);\n\n  const addCard = useCallback((newItem: DragItem, hoverIndex: number) => {\n    setItems((prevCards: DragItem[]) =>\n      update(prevCards, {\n        $splice: [\n          [hoverIndex, 0, newItem as DragItem],\n        ],\n      })\n    )\n  }, []);\n\n  const renderCard = useCallback(\n    (card: {\n      id: number, index: number, text: string, value: TypeArray, isStarred: boolean, isFiltered: boolean\n    }, index: number, isDraggable: boolean ) => {\n      return (\n        <SBOutlineCard\n          key={card.id}\n          index={index}\n          id={card.id}\n          text={card.text}\n          value={card.value}\n          isVisible={index == visibleCard}\n          isStarred={card.isStarred}\n          isDraggable={!isDraggable}\n          scrollToCard={onCardClick}\n          addCard={addCard}\n          moveCard={moveCard}\n          dropCard={dropCard}\n          handleStarToggle={onStarClick}\n        />\n      )\n    },\n    [visibleCard]\n  );\n\n  const setIsVisibleInOutline = (itemsToFilter: any[]) => {\n    const updatedItems = itemsToFilter.map(card =>\n        card.text.toLowerCase().includes(query.toLowerCase()) ? {...card, isVisibleInOutline: true} : {...card, isVisibleInOutline: false}\n    )\n    return(updatedItems)\n  }\n\n  const isDraggable = () => {\n    return query != \"\" ? true : false\n  }\n\n  return (\n    <div id='outlineScrollContainer'>\n      {items && items.length > 0 ? (\n        <div id={id}>\n          <ul className=\"nav nav-pills\">\n            <li className=\"nav-item pt-2\"><a title=\"An outline view of all the schema types\" className=\"bg-primary nav-link text-light\">{title}</a></li>\n          </ul>\n          <div className=\"input-group search\" style={{paddingTop: '5px'}}>\n            <span className=\"input-group-text icon\" id=\"basic-addon1\"><FontAwesomeIcon icon={faMagnifyingGlass} /></span>\n            <input type=\"search\" id=\"typesSearchBar\" className=\"form-control\" placeholder=\"Search...\" aria-label=\"Search\" onChange={(e) => setQuery(e.target.value.trim())}/>\n          </div>\n          <div className=\"sb-outline\"\n            ref={drop}\n            data-handler-id={handlerId}\n            style={{\n              minHeight: '10em',\n              backgroundColor: canDrop ? (isOver ? 'lightgreen' : 'rgba(0,0,0,.5)') : 'inherit',\n              paddingTop: '5px',\n            }}>\n              <div>{items.map((card, index) => card.isVisibleInOutline ? renderCard(card, index, isDraggable()) : null)}</div>\n          </div>\n        </div>\n      ) : (\n        <></>\n      )\n      }\n    </div>\n  );\n}\nexport default SBOutline;","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { useDragDropManager, useDrop } from 'react-dnd'\nimport { Unsubscribe } from 'redux';\nimport { DragItem } from './SBOutline';\ninterface DroppableProps {\n    onDrop?: (item: DragItem) => void;\n    acceptableType?: string;\n    children: any;\n}\n\nexport const Droppable = memo(function Droppable(props: DroppableProps) {\n    const { onDrop, acceptableType, children } = props;\n\n    const [{ isOver, canDrop }, drop] = useDrop(\n        () => ({\n            accept: [`${acceptableType}`],\n            drop: (item: any) => {\n                if (onDrop) {\n                    onDrop(item)\n                    return item\n                }\n            },\n            collect: (monitor) => ({\n                isOver: monitor.isOver(),\n                canDrop: monitor.canDrop(),\n            }),\n        }),\n        [onDrop],\n    )\n\n    const [dragValue, setDragValue] = useState<boolean>(false);\n    const dragDropManager = useDragDropManager();\n    const monitor = dragDropManager.getMonitor();\n    const timerRef = useRef<NodeJS.Timer>();\n    const unsubscribeRef = useRef<Unsubscribe>();\n\n    const setScrollIntervall = (speed: number, container: HTMLElement) => {\n        timerRef.current = setInterval(() => {\n            container.scrollBy(0, speed);\n        }, 1);\n    };\n\n    useEffect(() => {\n        if (dragValue) {\n            unsubscribeRef.current = monitor.subscribeToOffsetChange(() => {\n                const offset = monitor.getClientOffset();\n                // it can be html, body, div, any container that have scroll\n                const container = document.getElementById(\"DroppableScrollContainer\");\n\n                if (!offset || !container) return;\n\n                if (offset.y < container.clientHeight / 2 - 200) {\n                    if (timerRef.current) clearInterval(timerRef.current);\n                    setScrollIntervall(-5, container);\n                } else if (offset.y > container.clientHeight / 2 + 200) {\n                    if (timerRef.current) clearInterval(timerRef.current);\n                    setScrollIntervall(5, container);\n                } else if (\n                    offset.y > container.clientHeight / 2 - 200 &&\n                    offset.y < container.clientHeight / 2 + 200\n                ) {\n                    if (timerRef.current) clearInterval(timerRef.current);\n                }\n            });\n        } else if (unsubscribeRef.current) {\n            if (timerRef.current) clearInterval(timerRef.current);\n            unsubscribeRef.current();\n        }\n    }, [dragValue, monitor]);\n\n    useEffect(() => {\n        const unsubscribe = monitor.subscribeToStateChange(() => {\n            if (monitor.isDragging()) setDragValue(() => true);\n            else if (!monitor.isDragging()) setDragValue(() => false);\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, [monitor]);\n\n    return (\n        <div\n            ref={drop}\n            style={{\n                minHeight: '10em',\n                backgroundColor: canDrop ? (isOver ? 'lightgreen' : 'rgba(0,0,0,.5)') : 'inherit',\n                opacity: isOver ? 0.4 : 1,\n                padding: '5px',\n            }}\n            id=\"DroppableScrollContainer\"\n        >\n            {children}\n        </div>\n    );\n});","import React, { memo, useMemo } from \"react\";\nimport { useDrag } from 'react-dnd'\nimport { faGripLines } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\ninterface KeyItem {\n    id: any;\n    index: number;\n    text: string;\n}\n\ninterface DraggableKeyProps {\n    item: any;\n    acceptableType: string;\n    id: any;\n    index: number;\n    text: string;\n    isDraggable: boolean;\n    onTypesDrop?: (arg: KeyItem) => void;\n}\n\nexport const DraggableKey = memo(function DraggableKey(props: DraggableKeyProps) {\n    const { item, acceptableType, id, index, text, isDraggable = true, onTypesDrop } = props;\n    const [{ isDragging }, drag] = useDrag(\n        () => ({\n            type: acceptableType,\n            item: { id, index, text },\n            canDrag: isDraggable,\n            end: (item, monitor) => {\n                const dropResult = monitor.getDropResult();\n                const didDrop = monitor.didDrop()\n                if (didDrop && dropResult.location == 'outline' && acceptableType == 'TypesKeys' && onTypesDrop) {\n                    onTypesDrop(item);\n                }\n            },\n            collect: (monitor) => ({\n                item: monitor.getItem(),\n                isDragging: monitor.isDragging(),\n            }),\n        }), [item, acceptableType, isDraggable, onTypesDrop]\n    )\n\n    const containerStyle = useMemo(\n        () => ({\n            opacity: isDragging || !isDraggable ? 0.4 : 1,\n            cursor: isDraggable ? 'move' : 'default',\n        }),\n        [isDragging, isDraggable],\n    )\n\n    return (\n        <div ref={drag} style={containerStyle}>\n            <li className=\"list-group-item d-flex justify-content-between align-items-center p-2\" title={'Drag and drop to add'}>\n                {item}\n                <FontAwesomeIcon icon={faGripLines} />\n            </li>\n        </div>\n    );\n\n});\n","import React, { memo, useState } from 'react'\nimport { flushSync } from 'react-dom';\nimport { faCircleChevronDown, faCircleChevronUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { v4 as uuid4 } from 'uuid';\nimport { VariableSizeList as List } from \"react-window\";\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Info, Types } from '../../structure';\nimport { TypeArray, StandardTypeArray } from 'components/create/schema/interface';\nimport { TypeObject } from '../consts';\nimport withSchemaCreator, { configInitialState } from '../ParentEditor/withSchemaCreator';\nimport { getTypeName } from 'components/utils/general';\nimport { sbToastError, sbToastSuccess } from 'components/common/SBToast';\nimport SBEditor from 'components/common/SBEditor';\nimport SBSpinner from 'components/common/SBSpinner';\nimport SBScrollToTop from 'components/common/SBScrollToTop';\nimport SBOutline, { DragItem, DragItem as Item } from './SBOutline';\nimport { Droppable } from './Droppable'\nimport { DraggableKey } from './DraggableKey';\n\nconst SchemaCreatorDnd = memo(function SchemaCreator(props: any) {\n    const { selectedFile, generatedSchema, setGeneratedSchema,\n        cardsState, setCardsState, getItemSize, listRef, setRowHeight,\n        setIsValidJADN, setIsValidating, isLoading,\n        activeOpt, setActiveOpt, activeView, configOpt, setConfigOpt,\n        fieldCollapseState, setFieldCollapseState, infoCollapse, setInfoCollapse,\n        typesCollapse, setTypesCollapse,\n        allFieldsCollapse, collapseAllFields, fieldCollapseStateRef } = props;\n\n    const [visibleType, setVisibleType] = useState<number | null>(null);\n\n    const onSchemaDrop = (item: Item) => {\n        let key = item.text;\n        if (Object.keys(Info).includes(key)) {\n            const edit = key == 'config' ? Info[key].edit(configInitialState) : Info[key].edit();\n            const updatedSchema = generatedSchema.types ? {\n                info: {\n                    ...generatedSchema.info || {},\n                    ...edit\n                },\n                types: [...generatedSchema.types]\n            } :\n                {\n                    info: {\n                        ...generatedSchema.info || {},\n                        ...edit\n                    },\n                }\n\n            flushSync(() => {\n                setGeneratedSchema(updatedSchema);\n            });\n            setIsValidJADN(false);\n            setIsValidating(false);\n\n            var scrollSpyContentEl = document.getElementById(`${key}`)\n            scrollSpyContentEl?.scrollIntoView();\n\n        } else if (Object.keys(Types).includes(key)) {\n            const tmpTypes = generatedSchema.types ? [...generatedSchema.types] : [];\n            const type_name = getTypeName(tmpTypes, `${Types[key].key}-Name`);\n            const tmpDef = Types[key].edit({ name: type_name });\n            tmpTypes.push(tmpDef);\n            const dataIndex = generatedSchema.types?.length || 0;\n\n            const new_card = {\n                id: self.crypto.randomUUID(),\n                index: dataIndex,\n                text: type_name,\n                value: tmpDef,\n                isStarred: false\n            }\n\n            flushSync(() => {\n                setGeneratedSchema((prev: any) => ({ ...prev, types: tmpTypes }));\n                setCardsState((prev: any) => ([...prev, new_card]));\n                if (Types[key].type == 'structure') {\n                    setFieldCollapseState((prev: any) => ([...prev, false]));\n                } else {\n                    setFieldCollapseState((prev: any) => ([...prev, undefined]));\n                }\n            });\n\n            setIsValidJADN(false);\n            setIsValidating(false);\n            onScrollToCard(dataIndex);\n        }\n    }\n\n    const onOutlineDrop = (updatedCards: DragItem[], index: number, originalIndex: number) => {\n        const updatedTypes = updatedCards.map(item => item.value);\n        setGeneratedSchema((prev: any) => ({ ...prev, types: updatedTypes }));\n        setCardsState(updatedCards);\n        let updatedFieldCollapseState: Boolean[] = fieldCollapseStateRef.current;\n        const originalIndexBool = updatedFieldCollapseState[originalIndex];\n        updatedFieldCollapseState = updatedFieldCollapseState.filter((_bool: Boolean, i: number) =>\n            i !== originalIndex\n        );\n        updatedFieldCollapseState = [\n            ...updatedFieldCollapseState.slice(0, index),\n            originalIndexBool,\n            ...updatedFieldCollapseState.slice(index)\n        ];\n\n        setFieldCollapseState(updatedFieldCollapseState)\n        listRef.current?.resetAfterIndex(0, false);\n    };\n\n    const onStarClick = (updatedCards: DragItem[]) => {\n        setCardsState(updatedCards);\n    }\n\n    const onScrollToCard = (idx: number) => {\n        listRef.current?.scrollToItem(idx);\n    }\n\n    const onTypesToOutlineDrop = (item: any) => {\n        let key = item.text;\n        let insertAt = item.index;\n        const tmpTypes = generatedSchema.types ? [...generatedSchema.types] : [];\n        const type_name = getTypeName(tmpTypes, `${Types[key].key}-Name`);\n        const tmpDef = Types[key].edit({ name: type_name });\n\n        let updatedTypes = [\n            ...tmpTypes.slice(0, insertAt),\n            tmpDef,\n            ...tmpTypes.slice(insertAt)\n        ];\n\n        const new_card = {\n            id: self.crypto.randomUUID(),\n            index: insertAt,\n            text: type_name,\n            value: tmpDef,\n            isStarred: false\n        }\n\n        let updatedCards = [\n            ...cardsState.slice(0, insertAt),\n            new_card,\n            ...cardsState.slice(insertAt)\n        ];\n\n        let updatedFieldCollapseState: Boolean[];\n        if (Types[key].type == 'structure') {\n            updatedFieldCollapseState = [\n                ...fieldCollapseState.slice(0, insertAt),\n                false,\n                ...fieldCollapseState.slice(insertAt)\n            ];\n        } else {\n            updatedFieldCollapseState = [\n                ...fieldCollapseState.slice(0, insertAt),\n                undefined,\n                ...fieldCollapseState.slice(insertAt)\n            ];\n        }\n\n        flushSync(() => {\n            setGeneratedSchema((prev: any) => ({ ...prev, types: updatedTypes }));\n            setCardsState(updatedCards);\n            setFieldCollapseState(updatedFieldCollapseState);\n        });\n\n        setIsValidating(false);\n        onScrollToCard(insertAt);\n    }\n\n    let infoKeys;\n    if (generatedSchema.info) {\n        const unusedInfoKeys = Object.keys(Info).filter(k =>\n            !(Object.keys(generatedSchema.info).includes(k)));\n\n        const unusedInfo = Object.fromEntries(Object.entries(Info).filter(([key]) => unusedInfoKeys.includes(key)));\n\n        infoKeys = Object.keys(unusedInfo).map(k => (\n            <DraggableKey item={Info[k].key} acceptableType={'InfoKeys'} key={uuid4()}\n                id={uuid4()} index={-1} text={k}\n                isDraggable={selectedFile?.value == 'file' ? false : true} />\n        ));\n    } else {\n        infoKeys = Object.keys(Info).map(k => (\n            <DraggableKey item={Info[k].key} acceptableType={'InfoKeys'} key={uuid4()}\n                id={uuid4()} index={-1} text={k}\n                isDraggable={selectedFile?.value == 'file' ? false : true} />\n        ));\n    }\n\n    const typesKeys = Object.keys(Types).map(k => (\n        <DraggableKey item={Types[k].key} acceptableType={'TypesKeys'} key={uuid4()}\n            id={uuid4()} index={-1} text={k}\n            isDraggable={selectedFile?.value == 'file' ? false : true}\n            onTypesDrop={onTypesToOutlineDrop}\n        />\n    ));\n\n    const infoEditors = Object.keys(Info).map((k, i) => {\n        const key = k as keyof typeof Info;\n        if (generatedSchema.info && k in generatedSchema.info) {\n            return Info[key].editor({\n                key: self.crypto.randomUUID(),\n                value: generatedSchema.info[key],\n                dataIndex: i,\n                placeholder: k,\n                change: (val: any) => {\n                    if (key == 'config') {\n                        setConfigOpt(val);\n                    }\n\n                    setGeneratedSchema((prev: any) => ({\n                        ...prev,\n                        info: {\n                            ...prev.info,\n                            ...Info[key].edit(val)\n                        }\n                    }));\n\n                    setIsValidJADN(false);\n                    setIsValidating(false);\n\n                },\n                addTypeChange: (val: any) => {\n                    const idx = generatedSchema.types?.length || 0;\n                    const tmpTypes = generatedSchema.types ? [...generatedSchema.types] : [];\n                    tmpTypes[idx] = Types[val.type.toLowerCase()].edit(val);\n\n                    const valArray: TypeArray = Object.values(val);\n                    const updatedCards = [...cardsState,\n                    {\n                        id: self.crypto.randomUUID(),\n                        index: idx,\n                        isStarred: false,\n                        text: val.name,\n                        value: valArray\n                    }\n                    ]\n\n                    if (tmpTypes.length != 0) {\n                        setGeneratedSchema((prev: any) => ({ ...prev, types: tmpTypes }));\n                    } else {\n                        if (generatedSchema.info) {\n                            setGeneratedSchema((prev: any) => ({ info: { ...prev.info } }));\n                        } else {\n                            setGeneratedSchema({});\n                        }\n                    }\n\n                    setCardsState(updatedCards);\n                    sbToastSuccess(`Successfully added Export ${val.name} to Types`);\n                    onScrollToCard(idx);\n                },\n                remove: (id: string) => {\n                    if (generatedSchema.info && id in generatedSchema.info) {\n                        if (id == 'config') {\n                            setConfigOpt(configInitialState);\n                        }\n                        const tmpInfo = { ...generatedSchema.info };\n                        delete tmpInfo[id];\n                        let updatedSchema;\n                        //remove info if empty\n                        if (Object.keys(tmpInfo).length == 0) {\n                            const tmpData = { ...generatedSchema };\n                            delete tmpData['info'];\n                            updatedSchema = tmpData;\n                        } else {\n                            updatedSchema = {\n                                ...generatedSchema,\n                                info: tmpInfo\n                            };\n                        }\n                        setGeneratedSchema(updatedSchema);\n                        setIsValidJADN(false);\n                        setIsValidating(false);\n                    }\n                },\n                config: configOpt\n            });\n        }\n        return null;\n    });\n\n    const typesEditors = ({ data, index, style }) => {\n        const def = data[index];\n        let type = def[1].toLowerCase() as keyof typeof Types;\n\n        //CHECK FOR VALID TYPE\n        if (!Object.keys(Types).includes(type)) {\n            sbToastError(`Error: ${type} in Type definition [${def}] is not a valid type. Changing type to String.`)\n            def[1] = \"String\";\n            type = \"string\";\n        }\n\n        return (Types[type].dndeditor({\n            key: self.crypto.randomUUID(),\n            value: def,\n            dataIndex: index,\n            customStyle: { ...style, height: 'auto' },\n            fieldCollapse: fieldCollapseState[index],\n            setFieldCollapse: (bool: boolean, idx: number) => {\n                const updatedFieldCollapseState = fieldCollapseState.map((fieldBool: boolean, i: number) => {\n                    if (i === idx) {\n                        return bool;\n                    } else {\n                        return fieldBool;\n                    }\n                });\n\n                setFieldCollapseState(updatedFieldCollapseState);\n            },\n            setRowHeight: setRowHeight,\n            setIsVisible: setVisibleType,\n            change: (val: TypeObject, idx: number) => {\n                const tmpTypes = [...generatedSchema.types];\n                tmpTypes[idx] = Types[val.type.toLowerCase()].edit(val);\n\n                const valArray: TypeArray = Object.values(val);\n                const updatedCards = cardsState.map((card, i) => {\n                    if (i === idx) {\n                        return ({\n                            ...card,\n                            text: val.name,\n                            value: valArray\n                        });\n                    } else {\n                        return card;\n                    }\n                });\n\n                if (tmpTypes.length != 0) {\n                    setGeneratedSchema((prev: any) => ({ ...prev, types: tmpTypes }));\n                } else {\n                    if (generatedSchema.info) {\n                        setGeneratedSchema((prev: any) => ({ info: { ...prev.info } }));\n                    } else {\n                        setGeneratedSchema({});\n                    }\n                }\n\n                setCardsState(updatedCards);\n                setIsValidJADN(false);\n                setIsValidating(false);\n            }\n            ,\n            remove: (idx: number) => {\n                const removedType = generatedSchema.types[idx];\n                const tmpTypes = generatedSchema.types.filter((_type: StandardTypeArray, i: number) => i != idx);\n                const tmpCards = cardsState.filter((_card: DragItem, index: number) => index != idx);\n                if (tmpTypes.length != 0) {\n                    setGeneratedSchema((prev: any) => ({ ...prev, types: tmpTypes }));\n                } else {\n                    if (generatedSchema.info) {\n                        setGeneratedSchema((prev: any) => ({ info: { ...prev.info } }));\n                    } else {\n                        setGeneratedSchema({});\n                    }\n                }\n\n                if (generatedSchema?.info?.exports?.includes(removedType[0])) {\n                    const tmpInfo = generatedSchema.info.exports.filter((typeName: string) => typeName != removedType[0]);\n                    setGeneratedSchema((prev: any) => ({ ...prev, info: { ...prev.info, exports: tmpInfo } }));\n                }\n\n                setCardsState(tmpCards);\n                setFieldCollapseState(\n                    fieldCollapseState.filter((_bool: Boolean, i: number) =>\n                        i !== idx\n                    ));\n                setIsValidJADN(false);\n                setIsValidating(false);\n            },\n            config: configOpt\n        }))\n    };\n\n    return (\n        <>\n            <div className='tab-content mb-2'>\n                <div className={`container-fluid tab-pane fade ${activeView == 'creator' ? 'show active' : ''}`} id=\"creator\" role=\"tabpanel\" aria-labelledby=\"creator-tab\" tabIndex={0}>\n                    <div className='row'>\n                        <div id=\"schema-options\" className='col-sm-3 ps-0 card-body-scroller'>\n                            <div className='row'>\n                                <div className='col'>\n                                    <ul className=\"nav nav-pills pb-2\" id=\"editorKeys\" role=\"tablist\">\n                                        <li className='nav-item me-2'>\n                                            <a\n                                                className={`nav-link \n                                                    ${activeOpt == 'info' && (selectedFile?.value == 'file' && !generatedSchema ? false : true) ? ' active bg-primary' : ''}\n                                                    ${selectedFile?.value == 'file' && !generatedSchema ? 'disabled' : ''}`}\n                                                onClick={() => setActiveOpt('info')}\n                                                title=\"meta data (about a schema package)\"\n                                                data-bs-toggle=\"pill\"\n                                            >\n                                                Info\n                                            </a>\n                                        </li>\n                                        <li className='nav-item'>\n                                            <a\n                                                className={`nav-link \n                                                    ${activeOpt == 'types' && (selectedFile?.value == 'file' && !generatedSchema ? false : true) ? ' active bg-primary' : ''}\n                                                    ${selectedFile?.value == 'file' && !generatedSchema ? 'disabled' : ''}`}\n                                                onClick={() => setActiveOpt('types')}\n                                                title=\"schema content (the information model)\"\n                                                data-bs-toggle=\"pill\"\n                                            >\n                                                Types*\n                                            </a>\n                                        </li>\n                                    </ul>\n                                    <div className='tab-content mb-2'>\n                                        <div className={`tab-pane fade ${activeOpt == 'info' ? 'show active' : ''}`} id=\"info\" role=\"tabpanel\" aria-labelledby=\"info-tab\" tabIndex={0}>\n                                            <ul className=\"list-group\">\n                                                {infoKeys.length != 0 ? infoKeys : <div className='col'>No Info to add</div>}\n                                            </ul>\n                                        </div>\n                                        <div className={`tab-pane fade ${activeOpt == 'types' ? 'show active' : ''}`} id=\"types\" role=\"tabpanel\" aria-labelledby=\"types-tab\" tabIndex={0}>\n                                            <ul className=\"list-group\">\n                                                {typesKeys}\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='row'>\n                                <div className='col'>\n                                    <SBOutline\n                                        id={'schema-outline'}\n                                        cards={cardsState}\n                                        title={'Outline'}\n                                        onDrop={onOutlineDrop}\n                                        onStarToggle={onStarClick}\n                                        onScrollToCard={onScrollToCard}\n                                        visibleCard={visibleType}\n                                    ></SBOutline>\n                                </div>\n                            </div>\n                        </div>\n                        <div id=\"schema-editor\" className='col-md-9 px-1 card-body-scroller' >\n                            {isLoading ? <SBSpinner action={'Loading'} isDiv /> :\n                                <>\n                                    <div className='row'>\n                                        <div className=\"col\">\n                                            <div className='card'>\n                                                <div className='card-header text-light bg-primary' style={{ justifyContent: 'center', display: 'flex', flexDirection: 'column' }}>\n                                                    <div className='row'>\n                                                        <div className='col'>\n                                                            <h5 id=\"info\" className=\"card-title text-light\">Info <small style={{ fontSize: '10px' }}> metadata </small></h5>\n                                                        </div>\n                                                        <div className='col'>\n                                                            <span>\n                                                                <FontAwesomeIcon icon={infoCollapse ? faCircleChevronDown : faCircleChevronUp}\n                                                                    className='float-end btn btn-sm text-light'\n                                                                    onClick={() => setInfoCollapse(!infoCollapse)}\n                                                                    title={infoCollapse ? ' Show Info' : ' Hide Info'} />\n                                                            </span>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className='card-body'>\n                                                    {!infoCollapse &&\n                                                        <Droppable onDrop={onSchemaDrop} acceptableType={'InfoKeys'} >\n                                                            {generatedSchema.info ?\n                                                                <>{infoEditors}</>\n                                                                :\n                                                                <><p>To add metadata info click and drag items from Info</p></>\n                                                            }\n                                                        </Droppable>\n                                                    }\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className='row mt-2'>\n                                        <div className=\"col pt-2\">\n                                            <div className='card'>\n                                                <div className='card-header bg-primary'>\n                                                    <div className='row'>\n                                                        <div className='col'>\n                                                            <h6 id=\"types\" className='pt-1 text-light'>Types* <small style={{ fontSize: '10px' }}> schema content </small></h6>\n                                                        </div>\n                                                        <div className='col'>\n                                                            {generatedSchema.types &&\n                                                                <>\n                                                                    <div className=\"btn-group btn-group-sm float-end\" role=\"group\" aria-label=\"Basic example\">\n                                                                        <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setTypesCollapse(!typesCollapse)}>\n                                                                            {typesCollapse ? 'Show Types' : ' Hide Types'}\n                                                                            <FontAwesomeIcon icon={typesCollapse ? faCircleChevronDown : faCircleChevronUp}\n                                                                                className='float-end btn btn-sm text-light'\n                                                                                title={typesCollapse ? 'Show Types' : 'Hide Types'} />\n                                                                        </button>\n                                                                        <button type=\"button\" className=\"btn btn-secondary\" onClick={collapseAllFields}>\n                                                                            {allFieldsCollapse ? 'Show Fields' : 'Hide Fields'}\n                                                                            <FontAwesomeIcon icon={allFieldsCollapse ? faCircleChevronDown : faCircleChevronUp}\n                                                                                className='float-end btn btn-sm text-light'\n                                                                                title={allFieldsCollapse ? 'Show Fields' : 'Hide Fields'} />\n                                                                        </button>\n                                                                    </div>\n                                                                </>\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className='card-body'>\n                                                    {!typesCollapse &&\n                                                        <Droppable onDrop={onSchemaDrop} acceptableType={\"TypesKeys\"} >\n                                                            {generatedSchema.types ?\n                                                                <div style={{ height: '65vh' }}>\n                                                                    <AutoSizer disableWidth>\n                                                                        {({ height }) => (\n                                                                            <List\n                                                                                className='List'\n                                                                                height={height}\n                                                                                itemCount={generatedSchema.types.length || 0}\n                                                                                itemData={generatedSchema.types}\n                                                                                itemSize={getItemSize}\n                                                                                width={'100%'}\n                                                                                ref={listRef}\n                                                                                itemKey={() => self.crypto.randomUUID()}\n                                                                            >\n                                                                                {typesEditors}\n                                                                            </List>\n                                                                        )}\n                                                                    </AutoSizer>\n                                                                </div> :\n                                                                <><p>To add schema content click and drag items from Types</p></>\n                                                            }\n                                                        </Droppable>\n                                                    }\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </>\n                            }\n                        </div>\n                    </div>\n                </div>\n\n                <div className={`tab-pane fade ${activeView == 'schema' ? 'show active' : ''}`} id=\"schema\" role=\"tabpanel\" aria-labelledby=\"schema-tab\" tabIndex={0}>\n                    <div className='card'>\n                        <div className='card-body p-0'>\n                            <SBEditor data={generatedSchema} isReadOnly={true}></SBEditor>\n                        </div>\n                    </div>\n                </div>\n                <SBScrollToTop divID='schema-editor' />\n            </div >\n        </>\n    )\n});\nexport const SchemaCreatorDndStyle = withSchemaCreator(SchemaCreatorDnd);","import React, { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Helmet } from 'react-helmet-async'\nimport { faEllipsisV } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { getValidFormatOpts } from 'actions/format'\nimport { info } from 'actions/util'\nimport { getPageTitle } from 'reducers/util'\nimport { dismissAllToast } from 'components/common/SBToast'\nimport { Option } from 'components/common/SBSelect'\nimport { SBConfirmModal } from 'components/common/SBConfirmModal';\nimport { DragItem } from './structure/editors/DragStyle/SBOutline'\nimport { SchemaCreatorBtnStyle } from './structure/editors/BtnStyle/SchemaCreatorBtn'\nimport { SchemaCreatorDndStyle } from './structure/editors/DragStyle/SchemaCreatorDnd'\n\nconst SchemaGenerator = () => {\n    const dispatch = useDispatch();\n\n    const [selectedSchemaFile, setSelectedSchemaFile] = useState<Option | null>();\n    const [generatedSchema, setGeneratedSchema] = useState('');\n    const [cardsState, setCardsState] = useState<DragItem[]>([]);\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n    const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n\n    const [isButtonStyle, setIsButtonStyle] = useState(false);\n\n    const [infoCollapse, setInfoCollapse] = useState(false);\n    const [typesCollapse, setTypesCollapse] = useState(false);\n    const [allFieldsCollapse, setAllFieldsCollapse] = useState(false);\n    const [fieldCollapseState, setFieldCollapseState] = useState<Boolean[]>([]);\n    const fieldCollapseStateRef = useRef<Boolean[]>(fieldCollapseState);\n\n    const meta_title = useSelector(getPageTitle) + ' | Schema Creation'\n    const meta_canonical = `${window.location.origin}${window.location.pathname}`;\n    useEffect(() => {\n        dispatch(info());\n        dispatch(getValidFormatOpts());\n        dismissAllToast();\n    }, [dispatch])\n\n    const onResetItemClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        setIsConfirmModalOpen(true);\n    };\n\n    const resetSchema = (response: boolean) => {\n        setIsConfirmModalOpen(false);\n        if (response == true) {\n            dismissAllToast();\n            setSelectedSchemaFile(null);\n            setGeneratedSchema('');\n            setCardsState([]);\n        }\n    }\n\n    return (\n        <>\n            <div>\n                <Helmet>\n                    <title>{meta_title}</title>\n                    <link rel=\"canonical\" href={meta_canonical} />\n                </Helmet>\n                <div className='row'>\n                    <div className='col-md-12'>\n                        <div className='card'>\n                            <div className='card-header bg-secondary p-2'>\n                                <h5 className='m-0' style={{ display: 'inline' }}><span className='align-middle'>Schema Creation</span></h5>\n                                <div className=\"btn-toolbar float-end\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                                    <div className=\"btn-group me-2\" role=\"group\" aria-label=\"First group\">\n                                        <button type=\"reset\" className=\"btn btn-sm btn-danger\" onClick={onResetItemClick}>Reset</button>\n                                    </div>\n                                    <div className=\"btn-group\" role=\"group\" aria-label=\"Third group\">\n                                        <div className='dropdown'>\n                                            <button className=\"btn btn-sm btn-primary\"\n                                                type=\"button\"\n                                                id=\"dropdownMenuButton\"\n                                                data-bs-toggle=\"dropdown\"\n                                                data-bs-display=\"static\"\n                                                aria-haspopup=\"true\"\n                                                aria-expanded=\"false\"\n                                                title='More Options...'\n                                                onClick={() => setIsDropdownOpen(prevState => !prevState)} >\n                                                <FontAwesomeIcon icon={faEllipsisV} />\n                                            </button>\n                                            <ul className={`dropdown-menu dropdown-menu-end ${isDropdownOpen ? 'show' : ''}`} aria-labelledby=\"dropdownMenuButton\">\n                                                <li><h6 className=\"dropdown-header\">Editor Style</h6></li>\n                                                <li><a href=\"#\" onClick={() => { setIsButtonStyle(false); setIsDropdownOpen(false); }} className={`dropdown-item ${isButtonStyle == false ? 'active' : ''}`}>Drag and Drop</a></li>\n                                                <li><a href=\"#\" onClick={() => { setIsButtonStyle(true); setIsDropdownOpen(false); }} className={`dropdown-item ${isButtonStyle == true ? 'active' : ''}`}>Button</a></li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='card-body p-2'>\n                                {isButtonStyle ? <SchemaCreatorBtnStyle\n                                    selectedFile={selectedSchemaFile} setSelectedFile={setSelectedSchemaFile}\n                                    generatedSchema={generatedSchema} setGeneratedSchema={setGeneratedSchema}\n                                    cardsState={cardsState} setCardsState={setCardsState}\n                                    fieldCollapseState={fieldCollapseState}\n                                    setFieldCollapseState={setFieldCollapseState}\n                                    allFieldsCollapse={allFieldsCollapse}\n                                    setAllFieldsCollapse={setAllFieldsCollapse}\n                                    infoCollapse={infoCollapse}\n                                    setInfoCollapse={setInfoCollapse}\n                                    typesCollapse={typesCollapse}\n                                    setTypesCollapse={setTypesCollapse}\n                                    fieldCollapseStateRef={fieldCollapseStateRef} /> :\n                                    <SchemaCreatorDndStyle\n                                        selectedFile={selectedSchemaFile} setSelectedFile={setSelectedSchemaFile}\n                                        generatedSchema={generatedSchema} setGeneratedSchema={setGeneratedSchema}\n                                        cardsState={cardsState} setCardsState={setCardsState}\n                                        fieldCollapseState={fieldCollapseState}\n                                        setFieldCollapseState={setFieldCollapseState}\n                                        allFieldsCollapse={allFieldsCollapse}\n                                        setAllFieldsCollapse={setAllFieldsCollapse}\n                                        infoCollapse={infoCollapse}\n                                        setInfoCollapse={setInfoCollapse}\n                                        typesCollapse={typesCollapse}\n                                        setTypesCollapse={setTypesCollapse}\n                                        fieldCollapseStateRef={fieldCollapseStateRef} />\n                                }\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <SBConfirmModal\n                isOpen={isConfirmModalOpen}\n                title={`Reset Schema`}\n                message={`Are you sure you want to reset the Schema?`}\n                onResponse={resetSchema}>\n            </SBConfirmModal>\n        </>\n    );\n}\nexport default SchemaGenerator "],"names":["ModalSize","SBConfirmModal","props","isOpen","_props$title","title","_props$message","message","_props$modalSize","modalSize","sm","confirm_value","onResponse","React","createPortal","_jsx","id","className","concat","tabIndex","role","type","onClick","e","preventDefault","style","zIndex","document","body","TypeKeys","StandardFieldKeys","EnumeratedFieldKeys","ConfigOptions","$MaxBinary","description","$MaxString","$MaxElements","$Sys","$TypeName","$FieldName","$NSID","memo","name","_props$value","value","_props$description","_props$options","options","placeholder","_props$type","change","remove","required","removable","_props$labelColumns","labelColumns","_props$fieldColumns","fieldColumns","_useState","useState","_useState2","_slicedToArray","valueData","setValueData","_useState3","_useState4","isRegex","setIsRegex","_useState5","_useState6","isChecked","setIsChecked","useEffect","setVal","label","_useState7","_useState8","val","inputArgs","onChange","target","onBlur","onSelectChange","htmlFor","SBSelect","data","isGrouped","Array","isArray","isCreatable","isClearable","_FontAwesomeIcon","FontAwesomeIcon","icon","faMinusSquare","_FontAwesomeIcon2","_extends","RegExp","toString","sbToastSuccess","err","sbToastError","_FontAwesomeIcon3","faCheck","_FontAwesomeIcon4","faXmark","_FontAwesomeIcon5","faQuestion","includes","checked","_FontAwesomeIcon6","_FontAwesomeIcon7","config","isConfirmModalOpen","setIsConfirmModalOpen","k","v","tmpValues","_objectSpread","sbToastInfo","parsedVal","test","parseInt","keys","Object","map","key","keyProps","KeyValueEditor","toLowerCase","fontSize","faMinusCircle","response","typeDef","_props$name","_props$comment","comment","_props$fields","fields","primDef","_props$name2","_props$type2","_props$options2","_props$comment2","record","edit","btneditor","StructureEditorBtnStyle","dndeditor","StructureEditorDndStyle","enumerated","choice","array","mapof","PrimitiveEditorBtnStyle","PrimitiveEditorDndStyle","arrayof","binary","boolean","integer","number","string","addTypeChange","dataArr","setDataArr","newExportType","setNewExportType","addTypeName","setAddTypeName","schemaTypes","useAppSelector","state","Util","types","schema","shallowEqual","base","validExports","length","filter","_useState9","_useState10","toggleAddToTypesModal","setToggleAddToTypesModal","removeIndex","dataset","currentTarget","index","_toConsumableArray","splice","onCloseClick","dismissAllToast","indices","i","idx","regex","baseTypes","isSmStyle","customNoOptionMsg","addToTypes","faPlusSquare","faPlusCircle","_p","exportType","typeArr","Types","typeVal","zip","onCreateTypeClick","valueObjInit","valueObj","setValueObj","_e$target","tmpvalue","_e$target2","JSON","stringify","toObject","reduce","obj","row","_defineProperty","removeAll","_row","some","TypeOptionsEditor","deserializedState","_props$optionType","optionType","schemaTypesObject","formatTypes","useSelector","getFormatOptions","getOptions","values","arr","_step","formats_returned","_iterator","_createForOfIteratorHelper","s","n","done","format","push","f","validOptions","safeGet","ValidOptions","RequiredOptions","TypeOptionInputArgs","fieldOptions","FieldOptionInputArgs","deserializeOptions","opts","opts2obj","fieldOpts","OptionTypes","field","opt","typeOpts","objectFromTuple","apply","optionValues","saveModal","_props$fieldOptions","toggleModal","md","setData","tmpData","saveOptions","typeOptVal","undefined","updatedData","toggleModalhere","FieldOptionsEditor","_hr","console","log","errCount","collectionType","collectionCount","opts2arr","withStructureEditor","StructureWrapper","WithStructureEditor","dataIndex","setFieldCollapse","customStyle","setRowHeight","setIsVisible","predefinedTypes","_useInView","useInView","fallbackInView","threshold","inViewRef","ref","inView","entry","modal","setModal","isEditableID","SBConfirmModalValName","rowRef","useRef","current","getBoundingClientRect","height","getFieldPropValue","propPos","propValue","item","updatevalue","onRemoveItemClick","modalData","prevState","find","str","startsWith","maxLength","OptionsModal","lg","sortFields","tmpFields","sort","a","b","fieldChange","fieldPropValID","fieldPropValName","tmpFieldValues","onFieldRemoval","_valueObj$fields5","pop","onAddField","_valueObj$fields","_valueObj$fields3","_valueObj$fields4","_valueObj$fields2","f_count","listOfIDs","Math","max","fieldName","flushSync","structureEditor","wrappedComponentName","displayName","withFieldEditor","FieldWrapper","WithFieldEditor","fieldKeys","valType","setValType","objectValues","FieldEditorBtnStyle","_button","parentIndex","isFirst","isLast","changeIndex","editableID","faSquareCaretUp","faSquareCaretDown","readOnly","fieldCollapse","moveField","oldIndex","newIndex","prevField","valID","prevID","href","faCircleChevronDown","faCircleChevronUp","faArrowDown19","FieldEditorDndStyle","acceptableType","moveCard","dropCard","isDragging","dragRef","previewRef","originalIndex","_useDrag","useDrag","collect","monitor","getItem","handlerId","getHandlerId","end","didDrop","_useDrag2","drag","preview","_useDrop","useDrop","accept","hover","draggedItem","_previewRef$current","dragIndex","hoverIndex","hoverBoundingRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","containerStyle","useMemo","opacity","cursor","faGrip","color","_props$items","items","fieldRemove","onDrop","isEnumerated","self","crypto","randomUUID","cardsState","setCardsState","dragValue","setDragValue","useDragDropManager","getMonitor","timerRef","unsubscribeRef","setScrollIntervall","speed","container","setInterval","scrollBy","subscribeToOffsetChange","offset","getElementById","clientHeight","clearInterval","unsubscribe","subscribeToStateChange","useCallback","card","findIndex","prevCards","update","$splice","_useDragLayer","useDragLayer","canDrop","isOver","_useDrop2","_useDrop2$","renderCard","backgroundColor","padding","SBOutlineFields","reordered_types","withPrimitiveEditor","PrimitiveWrapper","WithPrimitiveEditor","Number","isInteger","primitiveEditor","metaDef","_ref","_ref$k","_ref$v","package","editor","version","copyright","license","namespaces","arguments","KeyObjectEditor","exports","KeyArrayEditor","ConfigObjectEditor","configInitialState","$MAX_BINARY","$MAX_STRING","$MAX_ELEMENTS","$SYS","$TYPENAME","$FIELDNAME","withSchemaCreator","SchemaWrapper","WithSchemaCreator","dispatch","useDispatch","selectedFile","setSelectedFile","generatedSchema","setGeneratedSchema","fieldCollapseState","setFieldCollapseState","allFieldsCollapse","setAllFieldsCollapse","fieldCollapseStateRef","_listRef$current","setIsValidJADN","setSchema","listRef","resetAfterIndex","configOpt","setConfigOpt","ext","LANG_JADN","fileName","setFileName","schemaOpts","getAllSchemas","isValidJADN","isValidating","setIsValidating","isLoading","setIsLoading","_useState11","_useState12","activeView","setActiveView","_useState13","_useState14","activeOpt","setActiveOpt","rowHeight","size","_listRef$current2","_listRef$current3","count","tracker","onFileLoad","_asyncToGenerator","_regeneratorRuntime","_callee","schemaObj","fileStr","_fileName","_context","prev","next","parse","t0","abrupt","validateJADNSyntax","sent","getFilenameOnly","getFilenameExt","text","isStarred","isVisibleInOutline","def","stop","_x","_x2","jsonObj","validateSchema","then","validateSchemaVal","payload","valid_bool","valid_msg","valid_syntax","validateSchemaErr","SBFileLoader","selectedOpt","loadedFileData","onCancelFileUpload","onFileChange","loc","isSaveable","SBCopyToClipboard","buttonId","customClass","SBDownloadBtn","filename","_SBSpinner","SBSpinner","action","SBValidateSchemaBtn","isValid","setIsValid","schemaData","schemaFormat","schemaCreator","getItemSize","collapseAllFields","updatedFieldCollapseState","bool","_props$id","visibleCard","_props$cards","cards","onStarClick","onScrollToCard","query","setQuery","setItems","setIsVisibleInOutline","itemsToFilter","renderCards","backgroundColor_class","onCardClick","faStar","farStar","paddingTop","_span","faMagnifyingGlass","trim","AddToIndexDropDown","indexOpts","insertAt","_ul","_small","defaultInsertIdx","SchemaCreatorBtn","infoKeys","infoCollapse","setInfoCollapse","typesCollapse","setTypesCollapse","visibleType","setVisibleType","setInsertAt","optionValue","selectedOption","option","info","unusedInfoKeys","Info","unusedInfo","fromEntries","entries","disabled","typesKeys","updatedSchema","scrollSpyContentEl","scrollIntoView","_generatedSchema$type","tmpTypes","tmpCards","type_name","getTypeName","tmpDef","new_card","unshift","slice","scrollToItem","infoEditors","valArray","updatedCards","tmpInfo","typesEditors","_ref3","fieldBool","_generatedSchema$info","_generatedSchema$info2","removedType","_type","_card","typeName","_bool","_div","SBOutlineBtnStyle","arrVal","_t","moved_card","originalIndexBool","isDiv","AutoSizer","disableWidth","_ref4","List","itemCount","itemData","itemSize","width","_p2","SBEditor","isReadOnly","_SBScrollToTop","SBScrollToTop","divID","SchemaCreatorBtnStyle","ItemTypes","SBOutlineCard","isVisible","isDraggable","scrollToCard","handleStarToggle","addCard","toggleStar","setToggleStar","_ref$current","onToggleStar","onStarToggle","cardsStateRef","_monitor","location","updatedItems","_item","_newItem","newItem","minHeight","Droppable","children","DraggableKey","_props$isDraggable","onTypesDrop","canDrag","dropResult","getDropResult","faGripLines","SchemaCreatorDnd","onSchemaDrop","onTypesToOutlineDrop","updatedTypes","uuid4","_generatedSchema$type2","SBOutline","justifyContent","display","flexDirection","itemKey","SchemaCreatorDndStyle","selectedSchemaFile","setSelectedSchemaFile","isDropdownOpen","setIsDropdownOpen","isButtonStyle","setIsButtonStyle","_useState15","_useState16","_useState17","_useState18","_useState19","_useState20","meta_title","getPageTitle","meta_canonical","window","origin","pathname","getValidFormatOpts","Helmet","rel","faEllipsisV","_li"],"sourceRoot":""}