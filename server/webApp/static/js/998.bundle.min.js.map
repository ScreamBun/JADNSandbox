{"version":3,"file":"js/998.bundle.min.js","mappings":"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","sources":["webpack://client/./src/components/common/SBFileLoader.tsx","webpack://client/./src/components/common/SBSubmitBtn.tsx","webpack://client/./src/components/common/SBValidateSchemaBtn.tsx","webpack://client/./src/components/common/SBFormatBtn.tsx","webpack://client/./src/components/common/SchemaLoader.tsx","webpack://client/./src/components/validator/MessageValidated.tsx","webpack://client/./src/components/validator/MessageValidator.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport SBSaveFile from \"./SBSaveFile\";\nimport SBSelect, { Option } from \"./SBSelect\";\nimport { useDispatch } from \"react-redux\";\nimport { loadFile } from \"actions/util\";\nimport { sbToastError } from \"./SBToast\";\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { LANG_JADN } from \"components/utils/constants\";\n\ninterface SBFileLoaderProps {\n    customClass?: string;\n    opts: any[];\n    selectedOpt: Option | null;\n    setSelectedFile?: (fileOpt: Option | null) => void;\n    placeholder: string;\n    loc: 'schemas' | 'messages';\n    onCancelFileUpload: (e: React.MouseEvent<HTMLButtonElement> | React.ChangeEvent<HTMLInputElement> | null) => void;\n    onFileChange: (fileData?: string | ArrayBuffer | null, fileName?: Option | undefined) => void;\n    acceptableExt?: string | undefined;\n    isSaveable?: boolean;\n    loadedFileData?: any;\n    fileName?: {\n        name: string,\n        ext: string\n    };\n    fileExt?: string;\n}\n\nconst SBFileLoader = forwardRef(function SBLoadSchema(props: SBFileLoaderProps, ref) {\n    const dispatch = useDispatch();\n    const { customClass, opts, selectedOpt, loadedFileData,\n        setSelectedFile, placeholder, loc,\n        acceptableExt, onCancelFileUpload, onFileChange,\n        isSaveable, fileName, fileExt = LANG_JADN } = props;\n\n    const handleFileSelect = (e: Option) => {\n        if (e == null) {\n            onCancelFileUpload(null);\n            return;\n\n        } else if (e.value == \"file\") {\n            ref.current.value = '';\n            ref.current?.click();\n\n        } else {\n            dispatch(loadFile(loc, e.value))\n                .then(async (loadFileVal) => {\n                    if (loadFileVal.error) {\n                        sbToastError(loadFileVal.payload.response);\n                        return;\n                    }\n                    let dataObj = loadFileVal.payload.data;\n                    onFileChange(dataObj, e);\n                })\n                .catch((loadFileErr) => {\n                    sbToastError(loadFileErr.payload.data);\n                    onFileChange();\n                })\n        }\n    };\n\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        if (e.target.files && e.target.files.length != 0) {\n            const file = e.target.files[0];\n            const fileReader = new FileReader();\n            fileReader.onload = (ev: ProgressEvent<FileReader>) => {\n                if (ev.target) {\n                    let dataStr = ev.target.result;\n                    onFileChange(dataStr, { value: file.name, label: file.name });\n                }\n            };\n            fileReader.readAsText(file);\n        }\n    }\n\n    return (\n        <>\n            <div className={`d-flex + ${customClass}`}>\n                <SBSelect id={\"file-select\"}\n                    data={opts}\n                    onChange={handleFileSelect}\n                    placeholder={placeholder}\n                    loc={loc}\n                    value={selectedOpt}\n                    isGrouped\n                    isFileUploader\n                    isSmStyle\n                    isClearable\n                />\n                {isSaveable && <SBSaveFile buttonId=\"saveFile\" toolTip={'Save as..'} data={loadedFileData} loc={loc} customClass={\"float-end ms-1\"}\n                    filename={fileName?.name} ext={fileExt} setDropdown={setSelectedFile} />}\n            </div>\n            <div className='d-none'>\n                <input type=\"file\" id=\"file-input\" name=\"file-input\" accept={acceptableExt} onChange={handleFileChange} ref={ref} />\n                <button id=\"cancelFileUpload\" type='button' className=\"btn btn-sm btn-secondary ms-0\" onClick={() => onCancelFileUpload} style={{ display: 'inline' }}>\n                    <FontAwesomeIcon icon={faXmark}></FontAwesomeIcon>\n                </button>\n            </div >\n        </>\n    );\n});\n\nexport default SBFileLoader;","import React from \"react\";\nimport SBSpinner from \"./SBSpinner\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SBSubmitBtn = (props: any) => {\n\n    const { buttonId, buttonTxt, customClass, isLoading, isDisabled, buttonTitle, formId } = props;\n\n    return (\n        <>\n            {isLoading ? <SBSpinner color={\"success\"} /> :\n                <button \n                    id={buttonId || 'submitBtn'} \n                    type={'submit'} \n                    form={formId}\n                    title={buttonTitle || \"Submit\"} \n                    className={'btn btn-sm btn-success border-0 hoverSubmit ' + customClass} \n                    disabled={isDisabled}>\n                        <span>{buttonTxt || \"Submit\"}</span>\n                        <FontAwesomeIcon icon={faPaperPlane} />\n                </button>\n            }\n        </>\n    )\n}\nexport default SBSubmitBtn;","import { faCheck, faXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { setSchema } from \"actions/util\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { sbToastSuccess, dismissAllToast, sbToastError } from \"./SBToast\";\nimport { validateSchema } from \"actions/validate\";\nimport { LANG_JADN, LANG_JSON } from \"components/utils/constants\";\n\nconst SBValidateSchemaBtn = (props: any) => {\n\n    const { isValid, setIsValid, setIsValidating, schemaData, schemaFormat, customClass } = props;\n    const dispatch = useDispatch();\n\n    const onValidateClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        dismissAllToast();\n        setIsValid(false);\n\n        if (!schemaData) {\n            sbToastError('Validation Error: No Schema to validate');\n            setIsValidating(false);\n            return;\n        }\n\n        setIsValidating(true);\n\n        let jsonObj = schemaData;\n        if (typeof jsonObj == 'string') {\n            try {\n                jsonObj = JSON.parse(jsonObj);\n            } catch (err: any) {\n                sbToastError(`Invalid JSON: ${err.message}`)\n                setIsValidating(false);\n                return;\n            }\n        }\n\n        if (schemaFormat == LANG_JSON) {\n            validateJSONSchema(jsonObj);\n        } else {\n            validateJADNSchema(jsonObj);\n        }\n\n        setIsValidating(false);\n    }\n\n\n    const validateJADNSchema = (jsonObj: any) => {\n        try {\n            dispatch(validateSchema(jsonObj, LANG_JADN))\n                .then((validateSchemaVal: any) => {\n                    if (validateSchemaVal.payload.valid_bool == true) {\n                        setIsValid(true);\n                        dispatch(setSchema(jsonObj));\n                        sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                    } else {\n                        dispatch(setSchema(null));\n                        sbToastError(validateSchemaVal.payload.valid_msg);\n                    }\n                })\n                .catch((validateSchemaErr) => {\n                    dispatch(setSchema(null));\n                    sbToastError(validateSchemaErr.payload.valid_msg)\n                }).finally(() => {\n                    setIsValidating(false);\n                })\n\n        } catch (err) {\n            if (err instanceof Error) {\n                dispatch(setSchema(null));\n                setIsValidating(false);\n                sbToastError(err.message)\n            }\n        }\n    }\n\n    const validateJSONSchema = (jsonObj: any) => {\n        try {\n            dispatch(validateSchema(jsonObj, LANG_JSON))\n                .then((validateSchemaVal: any) => {\n                    if (validateSchemaVal.payload.valid_bool == true) {\n                        setIsValid(true);\n                        dispatch(setSchema(jsonObj));\n                        sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                    } else {\n                        dispatch(setSchema(null));\n                        sbToastError(validateSchemaVal.payload.valid_msg);\n                    }\n                })\n                .catch((validateSchemaErr) => {\n                    dispatch(setSchema(null));\n                    sbToastError(validateSchemaErr.payload.valid_msg)\n\n                }).finally(() => {\n                    setIsValidating(false);\n                })\n        } catch (err) {\n            if (err instanceof Error) {\n                sbToastError(err.message)\n                setIsValidating(false);\n                sbToastError(err.message)\n            }\n        }\n    }\n\n    return (\n        <>\n            <button id='validateJADNButton' type='button' className={`btn btn-sm btn-primary ms-1 me-1 + ${customClass}`} title={isValid ? \"Schema is valid\" : \"Click to validate Schema\"}\n                onClick={onValidateClick}>\n                <span className=\"m-1\">Valid</span>\n                {isValid ? (\n                    <span className=\"badge rounded-pill text-bg-success\">\n                        <FontAwesomeIcon icon={faCheck} />\n                    </span>) : (\n                    <span className=\"badge rounded-pill text-bg-danger\">\n                        <FontAwesomeIcon icon={faXmark} />\n                    </span>)\n                }\n            </button>\n        </>\n    );\n};\n\nexport default SBValidateSchemaBtn;","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faIndent } from \"@fortawesome/free-solid-svg-icons\";\nimport { LANG_JADN } from \"components/utils/constants\";\nimport { FormatJADN } from \"components/utils\";\nimport { sbToastError } from \"./SBToast\";\n\nconst SBFormatBtn = (props: any) => {\n\n    const { ext, data, customClass, handleFormatClick } = props;\n\n    const onFormatClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        if (!data) {\n            sbToastError('Format Error: No Schema to format');\n            return;\n        }\n\n        try {\n            let dataObj = data;\n            if (typeof data == 'string') {\n                dataObj = JSON.parse(dataObj);\n            }\n\n            if (ext == LANG_JADN) {\n                dataObj = FormatJADN(dataObj);\n            }\n\n            handleFormatClick(dataObj);\n\n        } catch {\n            sbToastError('Failed to format: Invalid JSON')\n            return;\n        }\n    }\n\n    return (\n        <>\n            <button\n                id='formatButton'\n                type='button'\n                className={'btn btn-sm btn-primary ' + customClass}\n                onClick={onFormatClick}\n                title='Format'>\n                <FontAwesomeIcon icon={faIndent} />\n            </button>\n        </>\n    );\n}\n\nexport default SBFormatBtn;","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllSchemas } from \"../../reducers/util\";\nimport { info, setSchema } from \"../../actions/util\";\nimport { getSchemaConversions } from \"reducers/convert\";\nimport { validateSchema } from \"actions/validate\";\nimport { LANG_JADN } from \"components/utils/constants\";\nimport { getFilenameExt, getFilenameOnly } from \"components/utils/general\";\nimport { dismissAllToast, sbToastError, sbToastSuccess } from \"./SBToast\";\nimport SBCopyToClipboard from \"./SBCopyToClipboard\";\nimport SBSelect, { Option } from \"./SBSelect\";\nimport SBSpinner from \"./SBSpinner\";\nimport SBFormatBtn from \"./SBFormatBtn\";\nimport SBEditor from \"./SBEditor\";\nimport SBValidateSchemaBtn from \"./SBValidateSchemaBtn\";\nimport SBFileLoader from \"./SBFileLoader\";\n\n//File Loader Note: User should be able to upload any JSON/JADN schema; \n//It does not need to be syntactically correct since the user can edit the schema in the code editor.\n\ninterface SchemaLoaderProps {\n    selectedFile: Option | null;\n    setSelectedFile: (selectedOpt: Option | null) => void;\n    loadedSchema: object | null;\n    setLoadedSchema: (schema: object | null) => void;\n    decodeMsg?: Option | null;\n    setDecodeMsg?: (msgType: Option | null) => void;\n    setDecodeSchemaTypes?: (obj: {\n        all: string[] | [],\n        exports: string[] | []\n    }) => void;\n    acceptFormat?: string[];\n    schemaFormat: Option | null;\n    setSchemaFormat: (fmtOpt: Option | null) => void;\n}\n\nconst SchemaLoader = (props: SchemaLoaderProps) => {\n    const dispatch = useDispatch();\n\n    const { selectedFile, setSelectedFile, loadedSchema, setLoadedSchema, decodeMsg, setDecodeMsg, setDecodeSchemaTypes, acceptFormat, schemaFormat, setSchemaFormat } = props;\n    const [isValid, setIsValid] = useState(false);\n    const [isValidating, setIsValidating] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [fileName, setFileName] = useState({\n        name: '',\n        ext: LANG_JADN\n    });\n    const schemaOpts = useSelector(getAllSchemas);\n    const validSchemaFormatOpt = useSelector(getSchemaConversions);\n    const ref = useRef<HTMLInputElement | null>(null);\n\n    useEffect(() => {\n        if (fileName.ext) {\n            setSchemaFormat({ value: fileName.ext, label: fileName.ext })\n        }\n    }, [fileName])\n\n    useEffect(() => {\n        if (!loadedSchema) {\n            setIsValid(false);\n            setSelectedFile(null);\n            setSchemaFormat(null);\n        }\n    }, [loadedSchema])\n\n    useEffect(() => {\n        dispatch(info());\n    }, [dispatch])\n\n    const loadDecodeTypes = (schemaObj: any) => {\n        let decodeTypes: { all: any[], exports: any[] } = {\n            all: [],\n            exports: []\n        };\n        let msgDecode = '';\n\n        if (typeof schemaObj == \"string\") {\n            try {\n                schemaObj = JSON.parse(schemaObj);\n            } catch {\n                schemaObj = schemaObj\n            }\n        }\n\n        if (schemaObj.info !== undefined) {\n            if (schemaObj.info.exports !== undefined) {\n                decodeTypes.exports = schemaObj.info.exports;\n            }\n        }\n        if (schemaObj.types !== undefined) {\n            decodeTypes.all = schemaObj.types.map((def: any[]) => def[0]);\n            decodeTypes.all = decodeTypes.all.filter(dt => !decodeTypes.exports.includes(dt));\n            decodeTypes.all.sort();\n        }\n        if (decodeMsg === null || !decodeTypes.all.includes(decodeMsg)) {\n            if (decodeTypes.exports.length >= 1) {\n                msgDecode = decodeTypes.exports[0];\n            } else if (decodeTypes.all.length >= 1) {\n                msgDecode = decodeTypes.all[0];\n            }\n        }\n        setDecodeSchemaTypes(decodeTypes);\n        setDecodeMsg({ value: msgDecode, label: msgDecode });\n    }\n\n    const onFormatClick = (formattedSchema: object) => {\n        if (formattedSchema) {\n            setLoadedSchema(formattedSchema);\n        }\n    }\n\n    const sbEditorOnChange = (data: string) => {\n        dismissAllToast();\n        setIsValid(false);\n        setLoadedSchema(data);\n        dispatch(setSchema(null));\n        try {\n            if (setDecodeSchemaTypes && setDecodeMsg) {\n                loadDecodeTypes(JSON.parse(data));\n            }\n        } catch {\n            return;\n        }\n    }\n\n    const onFileLoad = async (schemaObj?: any, fileStr?: Option) => {\n        setIsValid(false);\n        setIsLoading(true);\n        if (schemaObj && fileStr) {\n            setSelectedFile(fileStr);\n            const fileName = {\n                name: getFilenameOnly(fileStr.label),\n                ext: getFilenameExt(fileStr.label)\n            }\n            setFileName(fileName);\n            setLoadedSchema(schemaObj);\n            try {\n                dispatch(validateSchema(schemaObj, fileName.ext))\n                    .then((validateSchemaVal: any) => {\n                        if (validateSchemaVal.payload.valid_bool == true) {\n                            setIsValid(true);\n                            if (typeof schemaObj == \"string\") {\n                                schemaObj = JSON.parse(schemaObj);\n                            }\n                            dispatch(setSchema(schemaObj));\n                            sbToastSuccess(validateSchemaVal.payload.valid_msg);\n                        } else {\n                            sbToastError(validateSchemaVal.payload.valid_msg);\n                            dispatch(setSchema(null));\n                        }\n                    })\n                    .catch((validateSchemaErr) => {\n                        sbToastError(validateSchemaErr.payload.valid_msg)\n                        dispatch(setSchema(null));\n                    }).finally(() => {\n                        setIsValidating(false);\n                    })\n            } catch (err) {\n                if (err instanceof Error) {\n                    setIsValidating(false);\n                    sbToastError(err.message)\n                }\n            }\n\n            if (setDecodeSchemaTypes && setDecodeMsg) {\n                loadDecodeTypes(schemaObj);\n            }\n        }\n        setIsLoading(false);\n    }\n\n    const onCancelFileUpload = (e: React.MouseEvent<HTMLButtonElement> | React.ChangeEvent<HTMLInputElement> | null) => {\n        if (e) {\n            e.preventDefault();\n        }\n        dismissAllToast();\n        setIsLoading(false);\n        setIsValidating(false);\n        setIsValid(false);\n        setLoadedSchema(null);\n        dispatch(setSchema(null));\n        setSelectedFile(null);\n        setFileName({\n            name: '',\n            ext: LANG_JADN\n        });\n        if (ref.current) {\n            ref.current.value = '';\n        }\n        if (setDecodeSchemaTypes && setDecodeMsg) {\n            setDecodeMsg(null);\n            setDecodeSchemaTypes([]);\n        }\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <div className=\"row no-gutters\">\n                    <div className=\"col-lg-6 align-self-center\">\n                        <SBFileLoader\n                            opts={schemaOpts}\n                            selectedOpt={selectedFile}\n                            loadedFileData={loadedSchema}\n                            fileName={fileName}\n                            fileExt={schemaFormat?.value}\n                            setSelectedFile={setSelectedFile}\n                            onCancelFileUpload={onCancelFileUpload}\n                            onFileChange={onFileLoad}\n                            acceptableExt={acceptFormat}\n                            ref={ref}\n                            placeholder={'Select a schema...'}\n                            loc={'schemas'}\n                            isSaveable\n                        />\n                    </div>\n                    {acceptFormat && <div className=\"col-lg-3 align-self-center\">\n                        <SBSelect id={\"schema-format-list\"}\n                            data={validSchemaFormatOpt}\n                            onChange={(e: Option) => setSchemaFormat(e)}\n                            value={schemaFormat}\n                            placeholder={'Schema format...'}\n                            isSmStyle\n                            isClearable />\n                    </div>}\n                    <div className=\"col text-end align-self-center nowrap\">\n                        {isValidating ? <SBSpinner action={\"Validating\"} color={\"primary\"} /> :\n                            <SBValidateSchemaBtn\n                                isValid={isValid}\n                                setIsValid={setIsValid}\n                                setIsValidating={setIsValidating}\n                                schemaData={loadedSchema}\n                                schemaFormat={schemaFormat?.value}\n                            />\n                        }\n                        <SBCopyToClipboard buttonId='copySchema' data={loadedSchema} customClass='me-1' />\n                        <SBFormatBtn customClass=\"me-1\" handleFormatClick={onFormatClick} ext={schemaFormat?.value} data={loadedSchema} />\n\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-body-page\">\n                {isLoading ? <SBSpinner action={'Loading'} isDiv /> :\n                    <SBEditor data={loadedSchema || \"\"} onChange={sbEditorOnChange}></SBEditor>}\n            </div>\n        </div>\n    )\n}\nexport default SchemaLoader;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n    escaped2cbor, format, hexify\n} from '../utils';\nimport { getMsgFiles, getSelectedSchema, getValidMsgTypes } from \"reducers/util\";\nimport { sbToastError } from \"components/common/SBToast\";\nimport SBCopyToClipboard from \"components/common/SBCopyToClipboard\";\nimport SBEditor from \"components/common/SBEditor\";\nimport { useLocation } from \"react-router-dom\";\nimport SBSaveFile from \"components/common/SBSaveFile\";\nimport SBSelect, { Option } from \"components/common/SBSelect\";\nimport { getFilenameExt, getFilenameOnly } from \"components/utils/general\";\nimport { LANG_CBOR, LANG_JADN, LANG_JSON, LANG_XML } from \"components/utils/constants\";\nimport SBFileLoader from \"components/common/SBFileLoader\";\nimport SBSubmitBtn from \"components/common/SBSubmitBtn\";\n\nconst MessageValidated = (props: any) => {\n    const location = useLocation();\n\n    const { selectedFile, setSelectedFile, loadedMsg, setLoadedMsg, msgFormat, setMsgFormat, decodeSchemaTypes, decodeMsg, setDecodeMsg, isLoading, formId } = props;\n    const validSchema = useSelector(getSelectedSchema);\n    const [fileName, setFileName] = useState({\n        name: '',\n        ext: LANG_JADN\n    });\n    const msgOpts = useSelector(getMsgFiles);\n    const validMsgFormat = useSelector(getValidMsgTypes)\n    const ref = useRef<HTMLInputElement | null>(null);\n\n    useEffect(() => {\n        if (location.state) {\n            const index = Object.values(validMsgFormat).indexOf(location.state)\n            setMsgFormat({ value: Object.values(validMsgFormat)[index], label: Object.values(validMsgFormat)[index] });\n        }\n    }, [])\n\n    const onFileLoad = async (dataFile?: any, fileStr?: Option) => {\n        if (fileStr) {\n            setSelectedFile(fileStr);\n            const fileName = {\n                name: getFilenameOnly(fileStr.label),\n                ext: getFilenameExt(fileStr.label) || LANG_JSON\n            }\n            setFileName(fileName);\n            if (dataFile) {\n                fileName.ext == LANG_JADN ? setMsgFormat({ value: LANG_JSON, label: LANG_JSON }) : setMsgFormat({ value: fileName.ext, label: fileName.ext });\n                const formattedData = format(dataFile, fileName.ext, 2);\n                if (formattedData.startsWith('Error')) {\n                    setLoadedMsg(dataFile);\n                } else {\n                    setLoadedMsg(formattedData);\n                }\n            } else {\n                switch (fileName.ext) {\n                    case 'cbor':\n                        dataFile = escaped2cbor(hexify(dataFile));\n                        break;\n                    default:\n                        sbToastError(`File cannot be loaded: Invalid JSON`);\n                }\n            }\n        }\n    };\n\n    const onMsgChange = (data: any) => {\n        //setSelectedFile('');\n        // setDecodeMsg('');\n        // setMsgFormat('');\n        setLoadedMsg(data);\n    }\n\n    const onCancelFileUpload = (e: React.MouseEvent<HTMLButtonElement> | React.ChangeEvent<HTMLInputElement> | null) => {\n        if (e) {\n            e.preventDefault();\n        }\n        setSelectedFile('');\n        setFileName({\n            name: '',\n            ext: LANG_JADN\n        });\n        setLoadedMsg('');\n        if (ref.current) {\n            ref.current.value = '';\n        }\n        //setDecodeMsg('');\n        //setMsgFormat('');\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <div className='row no-gutters'>\n                    <div className='col-sm-8'>\n                        <div className=\"d-flex\">                           \n\n                            <SBFileLoader\n                                customClass={'me-1'}\n                                opts={msgOpts}\n                                selectedOpt={selectedFile}\n                                fileName={fileName}\n                                setSelectedFile={setSelectedFile}\n                                onCancelFileUpload={onCancelFileUpload}\n                                onFileChange={onFileLoad}\n                                acceptableExt={'.json, .cbor, .xml'}\n                                ref={ref}\n                                placeholder={'Select a data file...'}\n                                loc={'messages'}\n                            />\n\n                            <SBSelect id={\"data-format-list\"}\n                                    customClass={'me-1'}\n                                    data={validMsgFormat}\n                                    onChange={(e: Option) => setMsgFormat(e)}\n                                    value={msgFormat}\n                                    placeholder={'Data format...'}\n                                    isSmStyle\n                                    isClearable />                             \n\n                            <SBSelect id={\"data-decode-list\"}\n                                customClass={'me-1'}\n                                data={decodeSchemaTypes.exports}\n                                onChange={(e: Option) => setDecodeMsg(e)}\n                                value={decodeMsg}\n                                placeholder={'Data type...'}\n                                isSmStyle\n                                isClearable\n                                customNoOptionMsg={'Select a schema to begin'} />\n                        </div>\n                    </div>\n\n                    <div className='col-sm-4 align-self-center'>\n                        <div className='d-flex float-end'>\n                            <SBSubmitBtn buttonId=\"validateSchema\"\n                                buttonTitle=\"Validate the data against the given schema\"\n                                buttonTxt=\"Validate\"\n                                customClass=\"me-1 float-end\"\n                                isLoading={isLoading}\n                                formId={formId}\n                                isDisabled={Object.keys(validSchema).length != 0 && loadedMsg && decodeMsg && msgFormat ? false : true}>\n                            </SBSubmitBtn>\n                            <SBCopyToClipboard buttonId='copyData' data={loadedMsg} customClass='float-end me-1' />\n                            <SBSaveFile data={loadedMsg} loc={'messages'} customClass={\"float-end\"} filename={fileName.name} ext={msgFormat ? msgFormat.value : LANG_JSON} setDropdown={setSelectedFile} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-body-page\">\n                <SBEditor data={loadedMsg} convertTo={msgFormat ? msgFormat.value : ''} onChange={onMsgChange}></SBEditor>\n            </div>\n        </div>\n    )\n}\n\nexport default MessageValidated","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Helmet } from 'react-helmet-async'\nimport MessageValidated from './MessageValidated'\nimport { validateMessage } from 'actions/validate'\nimport { info, setSchema } from 'actions/util'\nimport { getPageTitle } from 'reducers/util'\nimport SchemaLoader from 'components/common/SchemaLoader'\nimport { dismissAllToast, sbToastError, sbToastSuccess } from 'components/common/SBToast'\nimport { Option } from 'components/common/SBSelect'\n\n\nconst MessageValidator = () => {\n    const dispatch = useDispatch();\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [selectedSchemaFile, setSelectedSchemaFile] = useState<Option | null>(null);\n    const [schemaFormat, setSchemaFormat] = useState<Option | null>(null);\n    const [loadedSchema, setLoadedSchema] = useState<object | null>(null);\n    const [selectedMsgFile, setSelectedMsgFile] = useState('');\n    const [loadedMsg, setLoadedMsg] = useState('');\n    const [msgFormat, setMsgFormat] = useState<Option | null>(null);\n    const [decodeMsg, setDecodeMsg] = useState<Option | null>(null);\n    const [decodeSchemaTypes, setDecodeSchemaTypes] = useState<{\n        all: string[],\n        exports: string[]\n    }>({\n        all: [],\n        exports: []\n    });\n\n    const meta_title = useSelector(getPageTitle) + ' | Data Validation';\n    const meta_canonical = `${window.location.origin}${window.location.pathname}`;\n    const formId = \"validation_form\";\n\n    useEffect(() => {\n        dispatch(info());\n        dismissAllToast();\n    }, [dispatch])\n\n    const onReset = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        dismissAllToast();\n        setIsLoading(false);\n        setSelectedSchemaFile(null);\n        setLoadedSchema(null);\n        setSelectedMsgFile('');\n        setLoadedMsg('');\n        setMsgFormat(null);\n        setDecodeMsg(null);\n        setDecodeSchemaTypes({\n            all: [],\n            exports: []\n        });\n        dispatch(setSchema(null));\n    }\n\n    const submitForm = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setIsLoading(true);\n\n        if (loadedSchema && loadedMsg && msgFormat && decodeMsg) {\n            try {\n                dispatch(validateMessage(loadedSchema, loadedMsg, msgFormat.value, decodeMsg.value))\n                    .then((submitVal: any) => {\n                        if (submitVal && submitVal.payload.valid_bool) {\n                            setIsLoading(false);\n                            sbToastSuccess(submitVal.payload.valid_msg)\n                        } else {\n                            if (submitVal.payload.valid_msg.length != 1 && typeof submitVal.payload.valid_msg == 'object') {\n                                setIsLoading(false);\n                                for (const index in submitVal.payload.valid_msg) {\n                                    sbToastError(submitVal.payload.valid_msg[index])\n                                }\n                            } else {\n                                setIsLoading(false);\n                                sbToastError(submitVal.payload.valid_msg)\n                            }\n                        }\n                    })\n                    .catch((submitErr: { message: string }) => {\n                        setIsLoading(false);\n                        sbToastError(submitErr.message)\n                        return false;\n                    })\n            } catch (err) {\n                if (err instanceof Error) {\n                    setIsLoading(false);\n                    sbToastError(err.message)\n                }\n            }\n        } else {\n            var err = '';\n            if (!loadedSchema) {\n                err += ' schema';\n            }\n            if (!loadedMsg) {\n                err += ', data';\n            }\n            if (!msgFormat) {\n                err += ', data format';\n            }\n            if (!decodeMsg) {\n                err += ', data type';\n            }\n            sbToastError('ERROR: Validation failed - Please select ' + err)\n            setIsLoading(false);\n        }\n    }\n\n    return (\n        <div>\n            <Helmet>\n                <title>{meta_title}</title>\n                <link rel=\"canonical\" href={meta_canonical} />\n            </Helmet>\n            <div className='row'>\n                <div className='col-md-12'>\n                    <div className='card'>\n                        <div className='card-header bg-secondary p-2'>\n                            <h5 className='m-0' style={{ display: 'inline' }}><span className='align-middle'>Data Validation</span></h5>\n                            <button type='reset' className='btn btn-sm btn-danger float-end' onClick={onReset}>Reset</button>\n                        </div>\n                        <div className='card-body p-2'>\n                            <form id={formId} onSubmit={submitForm}>\n                                <div className='row'>\n                                    <div className='col-md-6 pr-1'>\n                                        <SchemaLoader\n                                            selectedFile={selectedSchemaFile} setSelectedFile={setSelectedSchemaFile}\n                                            schemaFormat={schemaFormat} setSchemaFormat={setSchemaFormat}\n                                            loadedSchema={loadedSchema} setLoadedSchema={setLoadedSchema}\n                                            decodeMsg={decodeMsg} setDecodeMsg={setDecodeMsg}\n                                            setDecodeSchemaTypes={setDecodeSchemaTypes} />\n                                    </div>\n                                    <div className='col-md-6 pl-1'>\n                                        <MessageValidated\n                                            selectedFile={selectedMsgFile} setSelectedFile={setSelectedMsgFile}\n                                            loadedMsg={loadedMsg} setLoadedMsg={setLoadedMsg}\n                                            msgFormat={msgFormat} setMsgFormat={setMsgFormat}\n                                            decodeMsg={decodeMsg} setDecodeMsg={setDecodeMsg}\n                                            decodeSchemaTypes={decodeSchemaTypes}\n                                            isLoading={isLoading} formId={formId}\n                                        />\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\nexport default MessageValidator\n"],"names":["forwardRef","props","ref","dispatch","useDispatch","customClass","opts","selectedOpt","loadedFileData","setSelectedFile","placeholder","loc","acceptableExt","onCancelFileUpload","onFileChange","isSaveable","fileName","_props$fileExt","fileExt","LANG_JADN","React","_jsx","className","concat","SBSelect","id","data","onChange","e","_ref$current","value","current","click","loadFile","then","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","loadFileVal","dataObj","_context","prev","next","error","sbToastError","payload","response","abrupt","stop","_x","apply","arguments","loadFileErr","isGrouped","isFileUploader","isSmStyle","isClearable","SBSaveFile","buttonId","toolTip","filename","name","ext","setDropdown","type","accept","preventDefault","target","files","length","file","fileReader","FileReader","onload","ev","dataStr","result","label","readAsText","onClick","style","display","_FontAwesomeIcon","FontAwesomeIcon","icon","faXmark","buttonTxt","isLoading","isDisabled","buttonTitle","formId","_SBSpinner","SBSpinner","color","form","title","disabled","faPaperPlane","isValid","setIsValid","setIsValidating","schemaData","schemaFormat","validateJADNSchema","jsonObj","validateSchema","validateSchemaVal","valid_bool","setSchema","sbToastSuccess","valid_msg","validateSchemaErr","err","Error","message","validateJSONSchema","LANG_JSON","dismissAllToast","JSON","parse","_span","_span2","faCheck","_span3","handleFormatClick","FormatJADN","_unused","faIndent","selectedFile","loadedSchema","setLoadedSchema","decodeMsg","setDecodeMsg","setDecodeSchemaTypes","acceptFormat","setSchemaFormat","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","isValidating","_useState5","_useState6","setIsLoading","_useState7","_useState8","setFileName","schemaOpts","useSelector","getAllSchemas","validSchemaFormatOpt","getSchemaConversions","useRef","useEffect","info","loadDecodeTypes","schemaObj","decodeTypes","all","exports","msgDecode","undefined","types","map","def","filter","dt","includes","sort","onFileLoad","fileStr","_fileName","getFilenameOnly","getFilenameExt","_x2","SBFileLoader","action","SBValidateSchemaBtn","SBCopyToClipboard","SBFormatBtn","formattedSchema","_SBSpinner2","isDiv","SBEditor","_unused2","location","useLocation","loadedMsg","setLoadedMsg","msgFormat","setMsgFormat","decodeSchemaTypes","validSchema","getSelectedSchema","msgOpts","getMsgFiles","validMsgFormat","getValidMsgTypes","state","index","Object","values","indexOf","dataFile","formattedData","format","startsWith","t0","escaped2cbor","hexify","customNoOptionMsg","SBSubmitBtn","keys","convertTo","selectedSchemaFile","setSelectedSchemaFile","_useState9","_useState10","selectedMsgFile","setSelectedMsgFile","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","meta_title","getPageTitle","meta_canonical","window","origin","pathname","Helmet","rel","href","onSubmit","validateMessage","submitVal","_typeof","submitErr","SchemaLoader","MessageValidated"],"sourceRoot":""}