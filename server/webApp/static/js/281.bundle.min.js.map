{"version":3,"file":"js/281.bundle.min.js","mappings":"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","sources":["webpack://client/./src/components/translate/SchemaTranslated.tsx","webpack://client/./src/components/translate/SchemaTranslator.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getValidTranslations } from \"reducers/convert\";\nimport SBCopyToClipboard from \"components/common/SBCopyToClipboard\";\nimport SBEditor from \"components/common/SBEditor\";\nimport { useLocation } from \"react-router-dom\";\nimport SBCollapseViewer from \"components/common/SBCollapseViewer\";\nimport SBSelect, { Option } from \"components/common/SBSelect\";\nimport { initConvertedSchemaState } from \"components/visualize/SchemaVisualizer\";\nimport { getSelectedSchema } from \"reducers/util\";\nimport SBDownloadBtn from \"components/common/SBDownloadBtn\";\nimport SBSubmitBtn from \"components/common/SBSubmitBtn\";\nimport SBDownloadFileBtn from \"components/common/SBDownloadFileBtn\";\nimport { LANG_XSD } from \"components/utils/constants\";\n\nconst SchemaTranslated = (props: any) => {\n    const location = useLocation();\n\n    const { translation, setTranslation, translatedSchema, setTranslatedSchema, isLoading, ext, setSchemaFormat, formId } = props;\n    const validSchema = useSelector(getSelectedSchema);\n    const data = useSelector(getValidTranslations);\n    let translateOpts: Option[] = data && data[ext] ? Object.entries(data[ext]).map(([key, value]) => ({\n        value: value,\n        label: key\n    })) : [];\n\n    useEffect(() => {\n        if (location.state) {\n            Object.keys(data).map((key) => {\n                const fmt = key.toLowerCase();\n                Object.entries(data[key]).map(([key, value]) => {\n                    if (value == location.state) {\n                        setSchemaFormat({ value: fmt, label: fmt });\n                        setTranslation({ value: value, label: key });\n                    }\n                })\n            })\n        }\n    }, [])\n\n    const handleTranslation = (e: Option[]) => {\n        let translateTo = [];\n        for (let i = 0; i < Object.values(e).length; i++) {\n            translateTo.push(Object.values(e)[i])\n        }\n        setTranslation(translateTo);\n        setTranslatedSchema(initConvertedSchemaState);\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header p-2\">\n                <div className='row no-gutters'>\n                    <div className='col-md-6'>\n                        <SBSelect id={\"translation-list\"} data={translateOpts} onChange={handleTranslation}\n                            placeholder={'Translate to...(select at least one)'}\n                            value={translation} isMultiSelect isSmStyle isClearable\n                        />\n                    </div>\n                    <div className='col-md-6 align-self-center'>\n                        <div className={`${translatedSchema.length == 1 && translatedSchema[0].schema ? '' : ' d-none'}`}>\n                            <SBCopyToClipboard buttonId='copyTranslatededSchema' data={translatedSchema[0].schema} customClass='float-end' />\n                            <SBDownloadBtn buttonId='schemaDownload' data={translatedSchema[0].schema} ext={(translation.length == 1 ? translation[0].value : translation)} customClass={`me-1 float-end`} />\n                            <div className={`${translatedSchema[0].fmt == LANG_XSD.toUpperCase() ? '' : ' d-none'}`}>\n                                <SBDownloadFileBtn buttonId='jadnBaseTypesDownload' buttonTitle='Download JADN Base Types Schema' fileName='jadn_base_types.xsd' customClass={`me-1 float-end`}></SBDownloadFileBtn>\n                            </div>\n                        </div>\n                        <SBSubmitBtn buttonId=\"translateSchema\" \n                            buttonTitle=\"Translate the given JADN schema to the selected format\"\n                            buttonTxt=\"Translate\"\n                            customClass=\"me-1 float-end\" \n                            isLoading={isLoading}\n                            formId={formId}\n                            isDisabled={Object.keys(validSchema).length != 0 && translation.length != 0 ? false : true}>\n                        </SBSubmitBtn>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-body-page\">\n                {translation.length > 1 && translatedSchema.length > 1 ?\n                    <SBCollapseViewer data={translatedSchema} /> :\n                    <SBEditor data={translatedSchema[0].schema} isReadOnly={true} convertTo={(translation.length == 1 ? translation[0].value : translation)}></SBEditor>\n                }\n            </div>\n        </div>\n    )\n}\nexport default SchemaTranslated;","import React, { useEffect, useState } from 'react'\nimport { Helmet } from 'react-helmet-async'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getPageTitle } from 'reducers/util'\nimport { convertSchema, info } from 'actions/convert'\nimport { setSchema } from 'actions/util'\nimport { SchemaJADN } from 'components/create/schema/interface'\nimport SchemaLoader from 'components/common/SchemaLoader'\nimport { dismissAllToast, sbToastError, sbToastSuccess } from 'components/common/SBToast'\nimport { initConvertedSchemaState } from 'components/visualize/SchemaVisualizer'\nimport { Option } from 'components/common/SBSelect'\nimport SchemaTranslated from './SchemaTranslated'\n\n\nconst SchemaTranslator = () => {\n    const dispatch = useDispatch();\n\n    const [selectedFile, setSelectedFile] = useState<Option | null>(null);\n    const [schemaFormat, setSchemaFormat] = useState<Option | null>(null);\n    const [loadedSchema, setLoadedSchema] = useState<object | null>(null);\n    const [translation, setTranslation] = useState<Option[]>([]);\n    const [translatedSchema, setTranslatedSchema] = useState(initConvertedSchemaState);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const meta_title = useSelector(getPageTitle) + ' | Schema Translation'\n    const meta_canonical = `${window.location.origin}${window.location.pathname}`;\n    const formId = \"translation_form\";\n\n    useEffect(() => {\n        dispatch(info());\n        dismissAllToast();\n    }, [dispatch])\n\n    useEffect(() => {\n        setTranslatedSchema(initConvertedSchemaState);\n        setTranslation([]);\n    }, [loadedSchema, schemaFormat])\n\n    const onReset = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        dismissAllToast();\n        setIsLoading(false);\n        setSelectedFile(null);\n        setLoadedSchema(null);\n        setTranslation([]);\n        setSchemaFormat(null);\n        setTranslatedSchema(initConvertedSchemaState);\n        dispatch(setSchema(null));\n    }\n\n    const submitForm = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setIsLoading(true);\n        if (translation) {\n            let schemaObj: SchemaJADN | string = loadedSchema;\n\n            if (typeof schemaObj == 'string') {\n                try {\n                    schemaObj = JSON.parse(loadedSchema);\n                } catch (err) {\n                    if (err instanceof Error) {\n                        setIsLoading(false);\n                        sbToastError(err.message);\n                    }\n                }\n            }\n            //convertSchema takes in an array of values\n            const arr = translation.map(obj => obj.value);\n            dispatch(convertSchema(schemaObj, schemaFormat?.value, arr))\n                .then((convertSchemaVal) => {\n                    if (convertSchemaVal.error) {\n                        setIsLoading(false);\n                        setTranslatedSchema(initConvertedSchemaState);\n                        sbToastError(convertSchemaVal.payload.response);\n                        return;\n                    }\n                    setIsLoading(false);\n                    setTranslatedSchema(convertSchemaVal.payload.schema.convert);\n                    const convertedArr = convertSchemaVal.payload.schema.convert.map(obj => obj.fmt_ext);\n                    for (let i = 0; i < arr.length; i++) {\n                        if (convertedArr.includes(arr[i])) {\n                            if (convertSchemaVal.payload.schema.convert[i].err == false) {\n                                sbToastSuccess(`Schema translated to ${convertSchemaVal.payload.schema.convert[i].fmt} successfully`);\n                            } else {\n                                sbToastError(`Schema failed to translate to ${convertSchemaVal.payload.schema.convert[i].fmt} ${convertSchemaVal.payload.schema.convert[i].schema ? `: ${convertSchemaVal.payload.schema.convert[i].schema}` : ''}`);\n                            }\n                        } else {\n                            sbToastError(`Failed to translate to ${translation[i].label}`);\n                        }\n                    }\n                })\n                .catch((convertSchemaErr: string) => {\n                    setTranslatedSchema(initConvertedSchemaState);\n                    setIsLoading(false);\n                    sbToastError(convertSchemaErr);\n                })\n        } else {\n            setTranslatedSchema(initConvertedSchemaState);\n            setIsLoading(false);\n            sbToastError(\"No language selected for translation\");\n        }\n    }\n\n    return (\n        <div>\n            <Helmet>\n                <title>{meta_title}</title>\n                <link rel=\"canonical\" href={meta_canonical} />\n            </Helmet>\n            <div className='row'>\n                <div className='col-md-12'>\n                    <div className='card'>\n                        <div className='card-header bg-secondary p-2'>\n                            <h5 className='m-0' style={{ display: 'inline' }}><span className='align-middle'>Schema Translation</span></h5>\n                            <button type='reset' className='btn btn-sm btn-danger float-end' onClick={onReset}>Reset</button>\n                        </div>\n                        <div className='card-body p-2'>\n                            <form id={formId} onSubmit={submitForm}>\n                                <div className='row'>\n                                    <div className='col-md-6 pr-1'>\n                                        <SchemaLoader\n                                            selectedFile={selectedFile} setSelectedFile={setSelectedFile}\n                                            schemaFormat={schemaFormat} setSchemaFormat={setSchemaFormat}\n                                            loadedSchema={loadedSchema} setLoadedSchema={setLoadedSchema} acceptFormat={['.json']} />\n                                    </div>\n                                    <div className='col-md-6 pl-1'>\n                                        <SchemaTranslated\n                                            formId={formId}\n                                            translatedSchema={translatedSchema} setTranslatedSchema={setTranslatedSchema}\n                                            translation={translation} setTranslation={setTranslation}\n                                            setSchemaFormat={setSchemaFormat}\n                                            isLoading={isLoading} ext={schemaFormat?.value} />\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SchemaTranslator"],"names":["props","location","useLocation","translation","setTranslation","translatedSchema","setTranslatedSchema","isLoading","ext","setSchemaFormat","formId","validSchema","useSelector","getSelectedSchema","data","getValidTranslations","translateOpts","Object","entries","map","_ref","_ref2","_slicedToArray","key","value","label","useEffect","state","keys","fmt","toLowerCase","_ref3","_ref4","_jsx","className","SBSelect","id","onChange","e","translateTo","i","values","length","push","initConvertedSchemaState","placeholder","isMultiSelect","isSmStyle","isClearable","concat","schema","SBCopyToClipboard","buttonId","customClass","SBDownloadBtn","LANG_XSD","toUpperCase","_SBDownloadFileBtn","SBDownloadFileBtn","buttonTitle","fileName","SBSubmitBtn","buttonTxt","isDisabled","SBCollapseViewer","SBEditor","isReadOnly","convertTo","dispatch","useDispatch","_useState","useState","_useState2","selectedFile","setSelectedFile","_useState3","_useState4","schemaFormat","_useState5","_useState6","loadedSchema","setLoadedSchema","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","setIsLoading","meta_title","getPageTitle","meta_canonical","window","origin","pathname","info","dismissAllToast","Helmet","rel","href","style","display","_span","type","onClick","preventDefault","setSchema","onSubmit","schemaObj","JSON","parse","err","Error","sbToastError","message","arr","obj","convertSchema","then","convertSchemaVal","error","payload","response","convert","convertedArr","fmt_ext","includes","sbToastSuccess","convertSchemaErr","SchemaLoader","acceptFormat","SchemaTranslated"],"sourceRoot":""}