; meta: title - Stateless Packet Filtering Profile
; meta: package - http://oasis-open.org/openc2/oc2slpf/v1.1
; meta: version - 0-wd01
; meta: description - Data definitions for Stateless Packet Filtering (SLPF) functions
; meta: exports - OpenC2-Command, OpenC2-Response

OpenC2-Command = {  ; $Record {}
  action:        Action,     ; The task or activity to be performed #jadn_opts:{"type": "Action", "field": 1}                                     
  target:        Target,     ; The object referenced by the Action #jadn_opts:{"type": "Target", "field": 2}                                      
  ? args:        Args,       ; Additional information that applies to the Command #jadn_opts:{"type": "Args", "field": 3, "options": {"minc": 0}} 
  ? actuator:    Actuator,   ; The profile that defines the Command #jadn_opts:{"type": "Actuator", "field": 4, "options": {"minc": 0}}           
  ? command_id:  Command-ID  ; An identifier of this Command #jadn_opts:{"type": "Command-ID", "field": 5, "options": {"minc": 0}}                
}

OpenC2-Response = [  ; $Map {}
  status:         Status-Code,   ; Integer status code #jadn_opts:{"type": "Status-Code", "field": 1}                                             
  ? status_text:  tstr,          ; Free-form description of the Response status #jadn_opts:{"type": "String", "field": 2, "options": {"minc": 0}} 
  ? results:      Results        ; Results returned by the invoked Command #jadn_opts:{"type": "Results", "field": 3, "options": {"minc": 0}}     
]

; Actions used in this profile
; $Enumerated {}
Action =   "query"   ; Initiate a request for information #jadn_opts:{"field": 3}                                                                                                      
Action /=  "deny"    ; Prevent a certain event or action from completion, such as preventing a flow from reaching a destination or preventing access #jadn_opts:{"field": 6}           
Action /=  "allow"   ; Permit access to or execution of a Target #jadn_opts:{"field": 8}                                                                                               
Action /=  "update"  ; Instruct a component to retrieve, install, process, and operate in accordance with a software update, reconfiguration, or other update #jadn_opts:{"field": 16} 
Action /=  "delete"  ; Remove an entity (e.g., data, files, flows) #jadn_opts:{"field": 20}                                                                                            

// Targets used in this profile
Target = (  ; $Choice {}
  features:         Features //          ; A set of items used with the query Action to determine an Actuator's capabilities #jadn_opts:{"type": "Features", "field": 9}                           
  file:             File //              ; Properties of a file #jadn_opts:{"type": "File", "field": 10}                                                                                           
  ipv4_net:         IPv4-Net //          ; An IPv4 address range including CIDR prefix length #jadn_opts:{"type": "IPv4-Net", "field": 13}                                                         
  ipv6_net:         IPv6-Net //          ; An IPv6 address range including prefix length #jadn_opts:{"type": "IPv6-Net", "field": 14}                                                              
  ipv4_connection:  IPv4-Connection //   ; A 5-tuple of source and destination IPv4 address ranges, source and destination ports, and protocol #jadn_opts:{"type": "IPv4-Connection", "field": 15} 
  ipv6_connection:  IPv6-Connection //   ; A 5-tuple of source and destination IPv6 address ranges, source and destination ports, and protocol #jadn_opts:{"type": "IPv6-Connection", "field": 16} 
  slpf:             AP-Target            ; Targets defined in this profile #jadn_opts:{"type": "AP-Target", "field": 1024, "options": {"dir": true}}                                               
)

Actuator = [  ; $Map {'minv': 1}
  ? slpf:  AP-Specifiers  ; Actuator Specifiers defined in this profile #jadn_opts:{"type": "AP-Specifiers", "field": 1024, "options": {"minc": 0, "dir": true}} 
]

Args = [  ; $Map {'minv': 1}
  ? start_time:          Date-Time,       ; The specific date/time to initiate the Command #jadn_opts:{"type": "Date-Time", "field": 1, "options": {"minc": 0}}                                 
  ? stop_time:           Date-Time,       ; The specific date/time to terminate the Command #jadn_opts:{"type": "Date-Time", "field": 2, "options": {"minc": 0}}                                
  ? duration:            Duration,        ; The length of time for an Command to be in effect #jadn_opts:{"type": "Duration", "field": 3, "options": {"minc": 0}}                               
  ? response_requested:  Response-Type,   ; The type of Response required for the Command: none, ack, status, complete #jadn_opts:{"type": "Response-Type", "field": 4, "options": {"minc": 0}} 
  ? slpf:                AP-Args          ; Command Arguments defined in this profile #jadn_opts:{"type": "AP-Args", "field": 1024, "options": {"minc": 0, "dir": true}}                        
]

// Response Results
Results = [  ; $Map {'minv': 1}
  ? versions:    Results$Versions,     ; List of OpenC2 language versions supported by this Actuator #jadn_opts:{"type": "Results$Versions", "field": 1, "options": {"minc": 0}}           
  ? profiles:    Results$Profiles,     ; List of profiles supported by this Actuator #jadn_opts:{"type": "Results$Profiles", "field": 2, "options": {"minc": 0}}                           
  ? pairs:       Action-Targets,       ; List of targets applicable to each supported Action #jadn_opts:{"type": "Action-Targets", "field": 3, "options": {"minc": 0}}                     
  ? rate_limit:  Results$rate-limit,   ; Maximum number of requests per minute supported by design or policy #jadn_opts:{"type": "Results$rate-limit", "field": 4, "options": {"minc": 0}} 
  ? args:        Results$Args,         ; List of supported Command Arguments #jadn_opts:{"type": "Results$Args", "field": 5, "options": {"minc": 0}}                                       
  ? slpf:        AP-Results            ; Results defined in this profile #jadn_opts:{"type": "AP-Results", "field": 1024, "options": {"minc": 0, "dir": true}}                             
]

// Targets applicable to each action
Action-Targets = [  ; $Map {}
  query:   Action-targets$Query,    ; #jadn_opts:{"type": "Action-targets$Query", "field": 3}   
  deny:    Action-targets$Deny,     ; #jadn_opts:{"type": "Action-targets$Deny", "field": 6}    
  allow:   Action-targets$Allow,    ; #jadn_opts:{"type": "Action-targets$Allow", "field": 8}   
  update:  Action-targets$Update,   ; #jadn_opts:{"type": "Action-targets$Update", "field": 16} 
  delete:  Action-targets$Delete    ; #jadn_opts:{"type": "Action-targets$Delete", "field": 20} 
]

; $Enumerated {}
Query-Targets =  "features"  ; #jadn_opts:{"field": 1} 

; $Enumerated {}
Allow-Deny-Targets =   "ipv4_net"         ; #jadn_opts:{"field": 1} 
Allow-Deny-Targets /=  "ipv6_net"         ; #jadn_opts:{"field": 2} 
Allow-Deny-Targets /=  "ipv4_connection"  ; #jadn_opts:{"field": 3} 
Allow-Deny-Targets /=  "ipv6_connection"  ; #jadn_opts:{"field": 4} 

; $Enumerated {}
Update-Targets =  "file"  ; #jadn_opts:{"field": 1} 

; $Enumerated {}
Delete-Targets =  "slpf/rule_number"  ; #jadn_opts:{"field": 1} 

// SLPF targets
AP-Target = (  ; $Choice {}
  rule_number:  Rule-ID  ; Immutable identifier assigned when a rule is created. Identifies a rule to be deleted #jadn_opts:{"type": "Rule-ID", "field": 1} 
)

// SLPF actuator specifiers (may be empty)
AP-Specifiers = [  ; $Map {}
  ? hostname:     tstr,                      ; RFC 1123 hostname (can be a domain name or IP address) for a particular device with SLPF functionality #jadn_opts:{"type": "String", "field": 1, "options": {"minc": 0}}    
  ? named_group:  tstr,                      ; User defined collection of devices with SLPF functionality #jadn_opts:{"type": "String", "field": 2, "options": {"minc": 0}}                                                
  ? asset_id:     tstr,                      ; Unique identifier for a particular SLPF #jadn_opts:{"type": "String", "field": 3, "options": {"minc": 0}}                                                                   
  ? asset_tuple:  Ap-specifiers$Asset_tuple  ; Unique tuple identifier for a particular SLPF consisting of a list of up to 10 strings #jadn_opts:{"type": "Ap-specifiers$Asset_tuple", "field": 4, "options": {"minc": 0}} 
]

// SLPF command arguments
AP-Args = [  ; $Map {'minv': 1}
  ? drop_process:  Drop-Process,   ; Specifies how to handle denied packets #jadn_opts:{"type": "Drop-Process", "field": 1, "options": {"minc": 0}}                                                                                                                                                                  
  ? persistent:    bool,           ; Normal operations assume any changes to a device are to be implemented persistently. Setting the persistent modifier to FALSE results in a change that is not persistent in the event of a reboot or restart #jadn_opts:{"type": "Boolean", "field": 2, "options": {"minc": 0}} 
  ? direction:     Direction,      ; Specifies whether to apply rules to incoming or outgoing traffic. If omitted, rules are applied to both #jadn_opts:{"type": "Direction", "field": 3, "options": {"minc": 0}}                                                                                                    
  ? insert_rule:   Rule-ID         ; Specifies the identifier of the rule within a list, typically used in a top-down rule list #jadn_opts:{"type": "Rule-ID", "field": 4, "options": {"minc": 0}}                                                                                                                   
]

// SLPF results defined in this profile
AP-Results = [  ; $Map {}
  ? rule_number:  Rule-ID  ; Rule identifier returned from allow or deny Command. #jadn_opts:{"type": "Rule-ID", "field": 1, "options": {"minc": 0}} 
]

; $Enumerated {}
Drop-Process =   "none"       ; Drop the packet and do not send a notification to the source of the packet #jadn_opts:{"field": 1}                    
Drop-Process /=  "reject"     ; Drop the packet and send an ICMP host unreachable (or equivalent) to the source of the packet #jadn_opts:{"field": 2} 
Drop-Process /=  "false_ack"  ; Drop the traffic and send a false acknowledgement #jadn_opts:{"field": 3}                                             

; $Enumerated {}
Direction =   "both"     ; Apply rules to all traffic #jadn_opts:{"field": 1}           
Direction /=  "ingress"  ; Apply rules to incoming traffic only #jadn_opts:{"field": 2} 
Direction /=  "egress"   ; Apply rules to outgoing traffic only #jadn_opts:{"field": 3} 

; Access rule identifier
; $Rule-ID(Integer) {}

; $Enumerated {'id': True}
Status-Code =   "Processing"           ; an interim Response used to inform the Producer that the Consumer has accepted the Command but has not yet completed it #jadn_opts:{"field": 102}                            
Status-Code /=  "OK"                   ; the Command has succeeded #jadn_opts:{"field": 200}                                                                                                                          
Status-Code /=  "Created"              ; the Command has succeeded and a new resource has been created as a result of it #jadn_opts:{"field": 201}                                                                    
Status-Code /=  "Bad_Request"          ; the Consumer cannot process the Command due to something that is perceived to be a Producer error (e.g., malformed Command syntax) #jadn_opts:{"field": 400}                 
Status-Code /=  "Unauthorized"         ; the Command Message lacks valid authentication credentials for the target resource or authorization has been refused for the submitted credentials #jadn_opts:{"field": 401} 
Status-Code /=  "Forbidden"            ; the Consumer understood the Command but refuses to authorize it #jadn_opts:{"field": 403}                                                                                    
Status-Code /=  "Not_Found"            ; the Consumer has not found anything matching the Command #jadn_opts:{"field": 404}                                                                                           
Status-Code /=  "Internal_Error"       ; the Consumer encountered an unexpected condition that prevented it from performing the Command #jadn_opts:{"field": 500}                                                     
Status-Code /=  "Not_Implemented"      ; the Consumer does not support the functionality required to perform the Command #jadn_opts:{"field": 501}                                                                    
Status-Code /=  "Service_Unavailable"  ; the Consumer is currently unable to perform the Command due to a temporary overloading or maintenance of the Consumer #jadn_opts:{"field": 503}                              

Features = [* string] ; An array of zero to ten names used to query an Actuator for its supported capabilities. #jadn_opts:{"type": "ArrayOf"}

File = [  ; $Map {'minv': 1}
  ? name:    tstr,   ; The name of the file as defined in the file system #jadn_opts:{"type": "String", "field": 1, "options": {"minc": 0}}               
  ? path:    tstr,   ; The absolute path to the location of the file in the file system #jadn_opts:{"type": "String", "field": 2, "options": {"minc": 0}} 
  ? hashes:  Hashes  ; One or more cryptographic hash codes of the file contents #jadn_opts:{"type": "Hashes", "field": 3, "options": {"minc": 0}}        
]

// IPv4 address and prefix length
IPv4-Net = [  ; $Array {'format': 'ipv4-net'}
  ipv4_addr:        IPv4-Addr,   ; IPv4 address as defined in [RFC0791] #jadn_opts:{"type": "IPv4-Addr", "field": 1}                                                   
  ? prefix_length:  int64        ; CIDR prefix-length. If omitted, refers to a single host address. #jadn_opts:{"type": "Integer", "field": 2, "options": {"minc": 0}} 
]

; 5-tuple that specifies a tcp/ip connection
IPv4-Connection = {  ; $Record {'minv': 1}
  ? src_addr:  IPv4-Net,    ; IPv4 source address range #jadn_opts:{"type": "IPv4-Net", "field": 1, "options": {"minc": 0}}                                 
  ? src_port:  Port,        ; Source service per [RFC6335] #jadn_opts:{"type": "Port", "field": 2, "options": {"minc": 0}}                                  
  ? dst_addr:  IPv4-Net,    ; IPv4 destination address range #jadn_opts:{"type": "IPv4-Net", "field": 3, "options": {"minc": 0}}                            
  ? dst_port:  Port,        ; Destination service per [RFC6335] #jadn_opts:{"type": "Port", "field": 4, "options": {"minc": 0}}                             
  ? protocol:  L4-Protocol  ; Layer 4 protocol (e.g., TCP) - see L4-Protocol section #jadn_opts:{"type": "L4-Protocol", "field": 5, "options": {"minc": 0}} 
}

// IPv6 address and prefix length
IPv6-Net = [  ; $Array {'format': 'ipv6-net'}
  ipv6_addr:        IPv6-Addr,   ; IPv6 address as defined in [RFC8200] #jadn_opts:{"type": "IPv6-Addr", "field": 1}                                             
  ? prefix_length:  int64        ; prefix length. If omitted, refers to a single host address #jadn_opts:{"type": "Integer", "field": 2, "options": {"minc": 0}} 
]

; 5-tuple that specifies a tcp/ip connection
IPv6-Connection = {  ; $Record {'minv': 1}
  ? src_addr:  IPv6-Net,    ; IPv6 source address range #jadn_opts:{"type": "IPv6-Net", "field": 1, "options": {"minc": 0}}                            
  ? src_port:  Port,        ; Source service per [RFC6335] #jadn_opts:{"type": "Port", "field": 2, "options": {"minc": 0}}                             
  ? dst_addr:  IPv6-Net,    ; IPv6 destination address range #jadn_opts:{"type": "IPv6-Net", "field": 3, "options": {"minc": 0}}                       
  ? dst_port:  Port,        ; Destination service per [RFC6335] #jadn_opts:{"type": "Port", "field": 4, "options": {"minc": 0}}                        
  ? protocol:  L4-Protocol  ; Layer 4 protocol (e.g., TCP) - [Section 3.4.2.10] #jadn_opts:{"type": "L4-Protocol", "field": 5, "options": {"minc": 0}} 
}

; Date and Time
; $Date-Time(Integer) {'minv': 0}

; A length of time
; $Duration(Integer) {'minv': 0}

; Specifies the results to be returned from a query features Command
; $Enumerated {}
Feature =   "versions"    ; List of OpenC2 Language versions supported by this Actuator #jadn_opts:{"field": 1}         
Feature /=  "profiles"    ; List of profiles supported by this Actuator #jadn_opts:{"field": 2}                         
Feature /=  "pairs"       ; List of supported Actions and applicable Targets #jadn_opts:{"field": 3}                    
Feature /=  "rate_limit"  ; Maximum number of Commands per minute supported by design or policy #jadn_opts:{"field": 4} 
Feature /=  "args"        ; List of supported Command Argumemnts #jadn_opts:{"field": 5}                                

// Cryptographic hash values
Hashes = [  ; $Map {'minv': 1}
  md5:     Hashes$md5,    ; MD5 hash as defined in [RFC1321] #jadn_opts:{"type": "Hashes$md5", "field": 1}       
  sha1:    Hashes$sha1,   ; SHA1 hash as defined in [RFC6234] #jadn_opts:{"type": "Hashes$sha1", "field": 2}     
  sha256:  Hashes$sha256  ; SHA256 hash as defined in [RFC6234] #jadn_opts:{"type": "Hashes$sha256", "field": 3} 
]

; 32 bit IPv4 address as defined in [RFC0791]
; $IPv4-Addr(Binary) {'format': 'ipv4-addr'}

; 128 bit IPv6 address as defined in [RFC8200]
; $IPv6-Addr(Binary) {'format': 'ipv6-addr'}

; Value of the protocol (IPv4) or next header (IPv6) field in an IP packet. Any IANA value, [RFC5237]
; $Enumerated {}
L4-Protocol =   "icmp"  ; Internet Control Message Protocol - [RFC0792] #jadn_opts:{"field": 1}      
L4-Protocol /=  "tcp"   ; Transmission Control Protocol - [RFC0793] #jadn_opts:{"field": 6}          
L4-Protocol /=  "udp"   ; User Datagram Protocol - [RFC0768] #jadn_opts:{"field": 17}                
L4-Protocol /=  "sctp"  ; Stream Control Transmission Protocol - [RFC4960] #jadn_opts:{"field": 132} 

; Transport Protocol Port Number, [RFC6335]
; $Port(Integer) {'minv': 0, 'maxv': 65535}

; $Enumerated {}
Response-Type =   "none"      ; No response #jadn_opts:{"field": 0}                                     
Response-Type /=  "ack"       ; Respond when Command received #jadn_opts:{"field": 1}                   
Response-Type /=  "status"    ; Respond with progress toward Command completion #jadn_opts:{"field": 2} 
Response-Type /=  "complete"  ; Respond when all aspects of Command completed #jadn_opts:{"field": 3}   

; Major.Minor version number
; $Version(String) {}

; Unique name of an Actuator Profile
; $Namespace(String) {'format': 'uri'}

; Command Identifier
; $Command-ID(String) {'pattern': '^\\S{0,36}$'}

Results$Versions = [* string] ; List of OpenC2 language versions supported by this Actuator #jadn_opts:{"type": "ArrayOf"}

Results$Profiles = [* string] ; List of profiles supported by this Actuator #jadn_opts:{"type": "ArrayOf"}

Results$Args = [* string] ; List of supported Command Arguments #jadn_opts:{"type": "ArrayOf"}

Action-targets$Query = [* string] ; #jadn_opts:{"type": "ArrayOf"}

Action-targets$Deny = [* string] ; #jadn_opts:{"type": "ArrayOf"}

Action-targets$Allow = [* string] ; #jadn_opts:{"type": "ArrayOf"}

Action-targets$Update = [* string] ; #jadn_opts:{"type": "ArrayOf"}

Action-targets$Delete = [* string] ; #jadn_opts:{"type": "ArrayOf"}

Ap-specifiers$Asset_tuple = [* string] ; Unique tuple identifier for a particular SLPF consisting of a list of up to 10 strings #jadn_opts:{"type": "ArrayOf"}

; Maximum number of requests per minute supported by design or policy
; $Results$rate-limit(Number) {'minf': 0.0}

; MD5 hash as defined in [RFC1321]
; $Hashes$md5(Binary) {'format': 'x', 'minv': 16, 'maxv': 16}

; SHA1 hash as defined in [RFC6234]
; $Hashes$sha1(Binary) {'format': 'x', 'minv': 20, 'maxv': 20}

; SHA256 hash as defined in [RFC6234]
; $Hashes$sha256(Binary) {'format': 'x', 'minv': 32, 'maxv': 32}
